//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.47;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.47] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x3df63e=_0x5cc5;function _0x2fb2(){const _0x29174e=['performMoveToPoint','applyDamageCaps','addNewState','value','setBattleCameraPoint','ConvertCount','visualHpGauge','Sprite_Battler_update','displayMpDamage','CnKtP','alterPriority','Amp','createPartyCommandWindowBattleCore','setupBattleCoreData','extraPositionY','ShowReflect','_jumpWholeDuration','moouJ','value1','ActSeq_Movement_WaitForFloat','Index','blockWidth','ciCDU','Scene_Battle_onActorCancel','dimColor1','BattleCore','autoBattleStart','AUTO\x20BATTLE','ySdVF','Game_BattlerBase_die','PreDamage%1JS','applyGuard','updateCallMenu','jumpBattler','okTargetSelectionVisibility','iXUvh','ActSeq_Movement_Scale','alive\x20friends\x20not\x20user','Elements','BattleCmdList','retreat','becomeSTBExploited','ShowCosts','_borderPortraitDuration','onAngleEnd','_homeX','kZHxP','PDlgR','cUXjL','Sprite_Actor_updateFrame','isCustomBattleScope','_targetSkewY','_allTargets','ActSeq_Movement_MoveToTarget','processBorderActor','FUNC','anchorX','GpezT','collapseType','<CUSTOM\x20ACTION\x20SEQUENCE>','battleMove','repositionCancelButtonBorderStyle','uurhO','join','startAction','commandStyleCheck','motionSpeed','attackAnimationId1','isTeamBased','ArRedFlat','Game_Action_makeTargets','startMove','gMfvl','CmdTextAlign','PortraitScaleBorderStyle','isETB','active','autoSelectPriority','isAnyoneSkewing','frameCount','mainSpriteWidth','isAppeared','PreDamageJS','biCfo','softDamageCapRate','applyData','mainSpriteScaleX','_pattern','split','NloPB','filter','stepForward','qYiEn','isEnemy','ActSeq_Target_PrevTarget','damageFlat','_cache','updateGrow','getStypeIdWithName','rWFMV','textColor','CounterPlayback','DamageFlat','gaugeLineHeight','_battleCoreBattleStartEvent','compareEnemySprite','processBattleCoreJS','_item','mpHealingFmt','hardDamageCap','move','BattleVictoryJS','processForcedAction','isImmortal','waitForJump','applySoftDamageCap','clearRect','Scene_Battle_selectNextCommand','vBEDP','PostEndBattleJS','sliceMin','_cursorArea','clearElementChanges','drawBackgroundRect','kVYxw','Radius','AnchorX','ActSeq_Mechanics_HpMpTp','KXAwp','EFfuJ','lSEfD','alignBattleCoreDamageSprite','isFlipped','OYGbZ','VariableHeal','Window_BattleLog_popBaseLine','Sprite_Actor_setActorHome','ActSeq_Horror_NoiseRemove','escape','WJlYn','eHhmS','2537754pqtWkn','BattleManager_onEscapeSuccess','isBattleCoreTargetScope','Opacity','walNV','name','ActSeq_Target_RandTarget','VisuMZ_2_PartySystem','updateScale','ARRAYFUNC','formula','getCommonEventIdWithName','ChangeOrderBy','qFSzI','createEffectActionSet','IPupm','BfPiY','HzpNx','changeBattlerOpacity','createAnimationSprite','utFcg','Wave','ParseActorNotetags','ShowWeapon','sSEsl','isBattleMember','svBattlerShadowVisible','addBattleCoreAutoBattleStyleCommand','MHXWW','makeBattleCommand','battleZoom','_animationContainer','performActionMotions','autoBattle','GEOpq','StartName','Game_Battler_startTpbTurn','length','ActionEndUpdate','Intensity','pmFBi','BattleManager_makeActionOrders','mainSprite','QsJFI','CmdIconOptions','_createCursorArea','Rate','invokeMagicReflection','yxCCO','float','VisuMZ_2_BattleSystemPTB','PortraitScale','clearFreezeMotion','Mnrsp','setupBattleCore','EnableDamageCap','battleSpriteSkew','dead\x20opponents','ActSeq_Mechanics_BtbGain','_activeWeaponSlot','pzFLI','MP_Rate','damageOffsetX','hitRate','cameraOffsetDuration','stbGainInstant','commandNameWindowDrawText','Actor-%1-%2','gxaBU','setActiveWeaponSet','updatePositionBattleCore','DisablePartyCmd','ActSeq_Mechanics_RemoveBuffDebuff','initialize','isTpbMainPhase','treAI','updatePadding','AS\x20TARGET','_battleLayoutStyle','isAnyoneFloating','BattleStartEvent','CommandAddOptions','EXTsp','makeData','onJumpEnd','index','PreDamageAsUserJS','auto','clearForcedGameTroopSettingsBattleCore','ForceRandom','Window_BattleLog_popupDamage','Sprite_Enemy_updateCollapse','Scene_Battle_commandFight','logWindowRect','addedStateObjects','AutoBattle','spinBattler','setSTBExploited','RNdvB','QYbMM','text','onActorOk','VariableDmg','PostEndTurnJS','thrust','Window_BattleEnemy_initialize','ActSeq_Movement_WaitForScale','setupWeaponAnimation','performAttack','isCTB','ActSeq_Movement_MoveBy','version','xfyRm','makeTargetSprites','TpGaugeOffsetY','ActSeq_Impact_ShockwavePoint','open','_offsetX','LUK','getNextSubjectFromPool','abs','BattleManager_isTpbMainPhase','_executedValue','ShowSubstitute','GLxQH','startTurn','getNextSubject','isSpriteVisible','Window_BattleStatus_drawItemImage','evade','kzSXt','preemptive','GclmU','CalcEscapeRaiseJS','Game_BattlerBase_canGuard','autoBattleUseSkills','_lastEnemy','targetDistortionSpritePosition','checkCacheKey','StatusWindowAttachmentBackOffsetY','finishActionSet','rTJdN','battleLayoutStyle','sleep','isBreakStunned','ActSeq_Movement_WaitForOpacity','setBattlerFacePoint','NameFontSize','isActiveTpb','_enemy','8FhggjL','JcMlG','getDualWieldTimes','xmksw','ActSeq_Mechanics_TextPopup','height','addAutoBattleCommands','QRukp','parent','SwitchCritical','missle','actorCommandEscape','Sprite_Enemy_createStateIconSprite','_floatHeight','BackColor','battleCommandName','PreDamageAsTargetJS','IconStypeNorm','nafDH','xumIZ','updateCancel','startActorCommandSelection','skills','ByWFS','Window_ActorCommand_initialize','BindCommonEventKeysForObj','_motion','hOtkt','status','Exploited','iconIndex','weatherPower','PdJDV','innerWidth','Parse_Notetags_Action','code','kdSZA','_growX','ZLYyO','startDamagePopup','Sprite_Enemy_updateStateSprite','SwitchMissEvade','changeAtbCastTime','_shadowScaleX','Targets1','enemyNames','vvXZo','battleEffect','drawItemStatusXPStyle','guardSkillId','tyMmY','VarianceFormulaJS','ShowTpDmg','popBaseLine','mpDamageFmt','currentClass','updateAction','battlerShadowScaleX','ekHrQ','_action','fillRect','MANUAL','focus','requestMotionRefresh','_weaponSprite','maxTp','_frontAttachmentSprite','Game_Action_apply','default','updateFloat','displayActionResults','_eventId','isMagical','addText','ActSeq_Mechanics_RemoveState','pXfKV','HitRate','QUpQF','QaSDz','portrait','displayChangedBuffs','selectNextCommandTpb','sortDamageSprites','refreshDimmerBitmap','Game_Enemy_setup','updateBattlebackBitmap2','WyjCv','_skewEasing','ActSeq_Angle_Reset','_createEffectsContainer','numTargets','animation','refresh','frontviewSpriteY','removeImmortal','QsdoB','LcVVm','createAnimationContainer','criticalHitRate','_preemptive','Override','ActSeq_Target_CurrentIndex','StartTurnShow','evcYw','create','urDdg','XzElw','MswJs','ynksO','clearDamagePopup','_handlers','ActSeq_Movement_WaitForSpin','setAttack','updateCommandNameWindow','command339','Game_Action_executeDamage','hccjG','Sprite_Battler_startMove','isEscapeCommandEnabled','yiOqs','fyztZ','displayItemMessage','SkewY','WaitComplete','ShowEnemyGauge','ConvertActionSequenceTarget','ActSeq_Impact_ShockwaveCenterTargets','KaTdi','ActSeq_ChangeAngle','_autoBattleWindow','toUpperCase','needsActorInputCancel','currentAction','_homeY','Sprite_Actor_update','turn','Window_BattleLog_performMagicEvasion','angleDuration','isSkipPartyCommandWindow','SkewX','BattleManager_onEncounter','_inputting','MduJr','battleCamera','UNIyk','qELXy','SBOod','onEscapeSuccess','CkBFE','_colorType','destroy','ActSeq_Horror_GlitchCreate','WBUJE','getBattlePortraitFilename','updateFlip','canAttack','hpAffected','resizeWindowBorderStyle','applyForcedGameTroopSettingsBattleCore','UyBiI','Window_BattleLog_performRecovery','centerFrontViewSprite','loop','magicSkills','Window_BattleLog_update','DefaultStyle','ATK','dead\x20enemies','Jxggp','isWaiting','BTestBypass','skillItemWindowRectMiddle','ndWEN','checkShowHideSwitchNotetags','Window_BattleLog_displayFailure','battleGrow','updateBattlerContainer','removeBuff','oRdOW','drawItemImageListStyle','_forcedBattlers','isAnyProjectilePresent','ForceDeath','blt','CreateCommonEventKeys','onMoveEnd','emerge','ElementStatusCore','hitFlat','pointY','_angleDuration','PpykF','ArPenRate','BattleManager_selectNextCommand','ActiveTpbOptionsMessage','lrSrl','itemHit','SsOLP','battleOpacity','FaceDirection','_branch','freezeFrame','ParseAllNotetags','setText','_cancelButton','apply','clearMotion','LBjIC','skew','_cacheTextWidth','_jumpMaxHeight','PARTY','pkgiC','mainSpriteHeight','adjustPosition_ScaleUp','ActSeq_Motion_PerformAction','cancelButtonText','654970XmYhmy','pxrlz','bJGWq','FJJtx','show','WnpYp','itemEffectAddAttackState','constructor','WaitForSpin','zEUjs','anchor','isSkewing','dMLoD','FRkWI','skMiZ','ActSeq_Mechanics_DeathBreak','adjustPosition_ScaleToFit','fLGot','regenerateAll','ActSeq_Mechanics_EnemyEscape','endAnimation','Scene_Battle_createCancelButton','byDhW','_index','process_VisuMZ_BattleCore_Failsafes','VisuMZ_0_CoreEngine','updateShadowBattleCore','Sprite_Battler_setHome','_tpbNeedsPartyCommand','suerL','updateBattleProcess','isJumping','TargetLocation','_stypeIDs','CastPhysical','isAutoBattleCommandEnabled','evaded','updateInterpreter','_interpreter','juNSE','eAFQO','SARdF','resetBreakShield','HomePosJS','atbInterrupt','QTrUr','message1','MTpXz','EVAL','_svBattlerData','Scene_Battle_start','elPnZ','attackStatesRate','_flipScaleX','uDIva','endAction','ParseWeaponNotetags','battleCommands','_jumpHeight','inStx','createTroopNote','ffNVZ','Sprite_StateIcon_updateFrame','ShowFacesListStyle','addCombatLogCommand','Game_BattlerBase_canAttack','Game_System_initialize','addTextToCombatLog','updatePointAnimations','PopupOffsetY','VisuMZ_2_DragonbonesUnion','displayRemovedStates','setImmortal','WaitForAngle','JS\x20ESCAPE\x20FAILURE','WaitForSkew','CmdIconItem','PrioritySortActors','performCastAnimation','joEsa','_skewDuration','Window_BattleLog_displayMiss','jump','StatusWindowSkinHide','getSkillIdWithName','svAnchorY','_targets','createEnemyNames','MeleeDistance','ParseSkillNotetags','BattleManager_startAction','param','SvBattlerMass-%1-%2','arPenFlat','CTJAg','FMOkM','vKsev','weapons','Sprite_Battler_damageOffsetX','visibilityState','hpDamage','arRedFlat','createUIContainer','commandSymbol','startWeaponAnimation','BoostPoints','setupFont','updateStatusWindowPosition','PerformAction','Parse_Notetags_Targets','ActSeq_Mechanics_Collapse','JS\x20ESCAPE\x20SUCCESS','SynQd','xTnJc','setSvBattlerSprite','indexOf','isGuard','_skewX','Skills','AVULo','ActSeq_Animation_ShowAnimation','_weather','isAnyoneMoving','endBattle','applyCritical','Shadow2','PaWDn','padding','enemyId','_battlerName','ActSeq_Animation_AttackAnimation','requestFauxAnimation','ActionCount','isFriendly','selectNextCommand','noSimilarSTypes','_text','some','Linear','SuVnF','createActorCommandWindowBattleCore','alive\x20opponents\x20not\x20target','removeAnimation','isDying','NextTurn','iconText','setup','setSkill','PreEndActionJS','addItemCommand','HLsDH','process_VisuMZ_BattleCore_DamageStyles','_linkedSprite','Sprite_Weapon_loadBitmap','reserveCommonEvent','isTpbCharged','onRegeneratePlayStateAnimation','battleUIOffsetX','baSof','GlhpZ','makeActionList','Window_BattleLog_displayEvasion','dPoXd','Sprite_Battler_updatePosition','itemLineRect','OdbUZ','updateJump','_requestRefresh','AlphaFilter','needsSelectionBattleCore','changeCtbCastTime','_regionBattleback1','Game_Map_encounterList','inputtingAction','qHrtp','noise','PreStartTurnJS','AutoBattleOK','RjhRZ','isStateResist','ZVmyx','IRplf','onGrowEnd','_forceAction','adjustPosition_ScaleDown','Game_Actor_makeActionList','_jumpDuration','JEgQH','actor%1-portrait','getConfigValue','GJPsK','backColor','drawIcon','drawItemImage','%1RegenerateJS','_endBattle','updateLink','TrVci','battleCorePreBattleCommonEvent','xsDzE','displayHpDamage','updateCustomActionSequence','ppMXg','description','isBuffAffected','isItemCommandEnabled','callOkHandler','ChargeRate','isTickBased','removeBuffsAuto','OmOig','requestPointAnimation','Window_BattleLog_performCounter','VisuMZ_3_SideviewBattleUI','isSceneBattle','createDamageSprite','ActSeq_BattleLog_WaitForNewLine','Window_BattleLog_pushBaseLine','sZjzj','attackAnimationIdSlot','LmLeO','changeInputWindow','flashDuration','kLgmI','SvMotionIdleSolo-%1-%2','adjustPosition_1for1','ActSeq_Animation_WaitForAnimation','_tempEquipCheck','ActSeq_Element_AddElements','ActSeq_Camera_Clamp','YLneg','+%1\x20MP','createTargetsJS','_additionalSprites','eraseState','DefeatEvent','isGuardWaiting','isShownOnBattlePortrait','createCancelButton','pIBNq','isTriggered','Armor-%1-%2','_uiContainer','damageContainer','undecided','current\x20target','_borderPortraitTargetX','clearActiveWeaponSet','Turns','skillTypes','COMBATLOG','_skillWindow','_lineHeight','OverallFormulaJS','bPETr','createAutoBattleWindow','attackSkillId','10407089VdZZSE','command236','isFightCommandEnabled','front\x20base','Scene_Battle_updateBattleProcess','jzSun','isAnyoneChangingOpacity','ShowPopup','Game_Action_evalDamageFormula','getDamageStyle','ArPenFlat','Window_PartyCommand_initialize','REyQT','battleCameraData','checkTpbInputClose','WaitForMovement','Sprite_Actor_initMembers','OdfCK','ActSeq_Mechanics_DamagePopup','_angleWholeDuration','EniwQ','prev\x20target','hide','Window_BattleLog_performEvasion','XPActorCommandLines','wGEJh','EscapeSuccess','addFightCommand','drawItem','PostStartTurnJS','performMagicEvasion','command119','canBattlerMove','anchorY','MLEzY','applyVariance','yeZZg','TpbGaugeOffsetY','setMoveEasingType','_enemyIDs','alive\x20actors\x20not\x20user','pWmTD','ActSeq_Impact_ZoomBlurTargetCenter','FlashDuration','VisuMZ_2_BattleSystemSTB','ZRAWY','eowYj','Window_BattleLog_refresh','wWJTQ','VisuMZ_3_ActSeqProjectiles','VisuMZ_1_MainMenuCore','currentExt','YkaCD','callUpdateHelp','shouldPopupDamage','missed','States','FaZnG','NLLdq','ActSeq_Movement_FaceDirection','PopupShiftX','pop','createBattleField','updateShadowScale','Window_BattleEnemy_show','toString','setBattleSkew','onOpacityEnd','JS\x20%1REGENERATE','NameOffsetY','actionBattleCoreJS','setBattleCameraOffset','UCqTt','getBattlePortrait','isNextSceneBattleTransitionable','Game_Action_itemHit','nPclV','displayReflection','jJXvr','placeGauge','Item-%1-%2','WOTAi','Game_Action_isForOpponent','performCollapse','_iconIndex','refreshStatusWindow','TaEBB','trueRandomTarget','EGkTp','YVxjM','maxLines','weaponImageId','_customDamageFormula','_actor','makeSuccess','mVLrs','isMeleeSingleTargetAction','SIMVP','WRarP','_flinched','_checkOn','Game_Battler_onBattleStart','hasBeenDefeatedBefore','FullActions','log','isBorderStylePortraitShown','AutoBattleCancel','Mqjac','HelpItem','coreEngineRepositionEnemies','damageOffsetY','createPartyCommandWindow','isDTB','rJOqP','canAlterActionCostPTB','Shadow','setActiveWeaponSlot','Parse_Notetags_TraitObjects','refreshCursor','YqGvM','getColor','eKIBd','mGQEl','removeActor','displayStartMessages','Sprite_Actor_updateBitmap','isOkEnabled','EscapeFailureJS','updateStyleOpacity','actor','process_VisuMZ_BattleCore_Notetags','PoCMc','-%1\x20MP','CAJFi','-%1','refreshMotion','_totalValue','CheckMapBattleEventValid','Scene_Options_maxCommands','pattern','jYPrf','tJUej','BdaxU','eAqTJ','textSizeEx','Scene_Battle_onEnemyCancel','width','ODbZn','ConvertParams','performActionEndMembers','_floatDuration','message4','setBattler','adjustPosition','onTurnEnd','QbvaF','_effectsContainer','ActSeq_Animation_PlayAtCoordinate','<CENTER>%1','DamageRate','growBattler','statusWindowRect','ARRAYSTRUCT','actionEffect','Window_BattleLog_performActionEnd','battlelog','canUseItemCommand','Game_Battler_clearMotion','makeTargetsBattleCore','MTqIx','FZczE','Game_Battler_clearDamagePopup','ClearBattleLog','ShowAddedState','customDamageFormula','CreateActionSequenceTargets','Scene_Battle_helpWindowRect','shadow','AttackAnimation','zpHVT','isAnyoneJumping','hufrH','members','DisplayAction','bitmapHeight','Game_Party_addActor','finishActorInput','onSelectAction','setBattlerFlip','alterType','gainFullActionsPTB','removeDamageSprite','isActionSelectionValid','encounterList','adjustWeaponSpriteOffset','%1StartTurnJS','process_VisuMZ_BattleCore_PluginParams','partyCommandWindowRectXPStyle','ActorCmd','showNormalAnimation','gainMp','PTEML','Exploiter','isVisualHpGaugeDisplayed','setValue','StatusWindowAttachmentFrontOffsetX','showHelpWindow','alive\x20battlers','performFlinch','PostRegenerateJS','AutoNotetag','pnzjK','map','nXffu','Game_Actor_setup','slices','addOptionsCommand','type','DISAo','createChildSprite','getAttackWeaponAnimationId','glitch','performCounter','OffsetY','useItem','ScaleDown','terminate','_freezeMotionData','battleAngle','State-%1-%2','cancelTargetSelectionVisibility','AsUser','executeDamage','CalcEscapeRatioJS','MXqSC','Scene_Battle_createActorCommandWindow','allBattleMembers','createKeyJS','eacnx','canGuard','hEyCR','createHelpWindow','isHidden','mCrkp','_tempActor','WaitForEffect','command357','DefaultDamageStyle','applyHardDamageCap','uvPCW','SbEHA','lZUpY','singleSkill','HSNMu','ActionEnd','performEvasion','_battleCoreNoElement','partyCommandWindowRect','clearWeaponAnimation','calcWindowHeight','die','SLiFu','battleUIOffsetY','DamageDisplay','processPostBattleCommonEvents','ceil','CalcActionSpeedJS','alive\x20battlers\x20not\x20user','iBjZb','_enemyNameContainer','Window_Options_addGeneralOptions','HOWQj','_stateSprite','Scene_Battle_createHelpWindow','VisuMZ_1_SkillsStatesCore','itemTextAlign','getDefeatedEnemies','StartTurnMsg','tqkFQ','5163144egRKnS','Window_BattleLog_performCollapse','boxHeight','optDisplayTp','DefaultSoftScaler','XPSpriteYLocation','moveBattlerToPoint','oMHVV','updatePosition','HelpSkillType','ijatz','slice','isForRandomBattleCore','Game_BattlerBase_addNewState','ResetFocus','_logWindow','processRefresh','createAttachmentSprites','ActSeq_BattleLog_Clear','EscapeSuccessJS','basicGaugesY','ActSeq_Skew_WaitForSkew','ALSHM','_tempBattler','loadEnemy','splice','_forcing','setFrame','gainCurrentActionsFTB','StatusWindowAttachmentBack','Game_Battler_makeSpeed','displayType','WtypeId','MDF','showEnemyAttackAnimation','ARRAYSTR','opponentsUnit','createActionSequenceProjectile','drain','isDeathStateAffected','setActionState','reverse','dPbqY','applyArmorModifiers','startJump','SDVzc','PreRegenerateJS','setupChild','motionType','forceSelect','iSbqK','DefaultHardCap','left','KnDlW','isBattleTest','_battlePortrait','AttachStateOffsetX','ActSeq_BattleLog_Refresh','Actions','Pzvhu','DnJVY','TpbActiveChangeEnabled','onFloatEnd','PKgrk','CnHWT','CopyCombatLog','refreshBattlerMotions','MaxLines','CheckSkillCommandShowSwitches','CastCertain','_svBattlerSprite','charged','RFXKQ','setBattlerMotionTrailData','sDQUB','Game_Battler_performMiss','ShowCurrentState','KHVAd','bottom','_commonEventIDs','ActSeq_ChangeSkew','yImsB','isItem','jAQdb','_appeared','_skewWholeDuration','revertTpbCachedActor','_updateCursorFilterArea','criticalDmgFlat','fontSize','movement','ActSeq_Mechanics_CustomDmgFormula','createSeparateDamagePopups','isMeleeMultiTargetAction','_spriteset','_cursorSprite','createBattleUIOffsetY','aJHMV','mwgzR','VisuMZ_1_ElementStatusCore','remove','Scene_ItemBase_applyItem','attackAnimationId2','eDjgW','BattleManager_inputtingAction','KbUdX','replace','refreshActorPortrait','CUAeq','_skewY','forceAction','RegExp','ttqGB','setVisibleUI','selectPreviousCommand','actorId','note','HLiqs','tpnxm','IGfxT','waitForNewLine','onDatabaseLoaded','Scene_Battle_createPartyCommandWindow','ScaleX','usePremadeActionSequence','uTrSI','Mute','bLSdY','_forcedBattleLayout','StatusWindowSkinFilename','min','stepBack','PostDamageAsUserJS','isMVAnimation','createHpGaugeSprite','getItemDamageAmountTextOriginal','subject','YDkNN','YQzif','OffsetAdjust','_dragonbonesSpriteContainer','onEscapeFailure','updateTargetPosition','ohFcD','qomzH','Scene_Battle_startPartyCommandSelection','JS\x20%1DAMAGE\x20%2','updateBorderSprite','ActSeq_Camera_FocusPoint','makeDeepCopy','maxCols','WaitForCamera','ITEM','setupZoomBlurImpactFilter','getHardDamageCap','AllowRandomSpeed','drawSingleSkillCost','Damage','isPreviousSceneBattleTransitionable','callOptions','kOsfy','OOwWn','TvLJw','onEnemyCancel','gKjvb','displayAddedStates','ActSeq_Horror_NoiseCreate','_borderPortraitSprite','requestDragonbonesAnimation','updateEventMain','isAutoBattle','onAllActionsEnd','Scene_Boot_onDatabaseLoaded','PostDamage%1JS','znjKq','LOLBL','maxBattleMembers','Strength','floor','svAnchorX','updateAngleCalculations','sideview_ui','wlTpM','isInputting','svBattlerData','setupCriticalEffect','weatherType','Window_BattleLog_performSubstitute','isBypassDamageCap','ActSeq_Movement_FaceTarget','Game_BattlerBase_isStateResist','ActSeq_Mechanics_CtbOrder','stateRate','ActSeq_Zoom_Scale','gGJNh','isOpen','OUUTu','mhp','cwmHJ','apcgs','xgFkr','cIyQE','statusWindowRectBorderStyle','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','QHsYb','vMQJV','mainSpriteScaleY','_targetAngle','Cgypx','setupMotion','playEnemyDamage','GroupDigits','autoBattleAtStart','alive\x20enemies\x20not\x20user','BHOsr','isCharging','ActSeq_Motion_MotionType','ActSeq_Mechanics_Immortal','eVJdF','Game_Temp_requestAnimation','Scene_Map_launchBattle','autoSelectLastSelected','updateStateIconSprite','EiYqG','NameAttachStateIcon','updateShadowVisibility','zdcsi','ActSeq_Impact_ColorBreak','clearFreezeMotionForWeapons','Actor','gytkc','JS\x20%1APPLY\x20%2','result','Scene_Battle_createAllWindows','VariableID','Scene_Battle_skillWindowRect','nextActiveWeaponSlot','activate','ActSeq_Movement_WaitForSkew','ActSeq_Angle_WaitForAngle','startOpacity','isNonSubmenuCancel','addBattleCoreAutoBattleStartupCommand','oSlIo','NameOffsetX','yKsUq','PostApplyAsUserJS','wXbPm','front\x20center','_emptyBitmap','AdjustRect','autoMeleeMultiTargetActionSet','SceneManager_isSceneChanging','UyxFK','ljkLj','_weaponImageId','_shadowSprite','Game_BattlerBase_initMembers','ActSeq_Mechanics_AddState','makeActionListAutoAttack','DttWf','commandEscape','ActSeq_Mechanics_VariablePopup','KRKRQ','eaTLJ','PostApplyJS','PostStartActionJS','smooth','isPartyTpbInputtable','format','stop','Window_BattleLog_displayCritical','Game_Action_applyGlobal','ActSeq_Set_FinishAction','applyItem','ResetOffset','SlotID','_commonEventQueue','battleEnd','head','xOzdh','AddOption','options','Game_Action_needsSelection','XubbD','lrKrw','Class-%1-%2','_surprise','DDPBV','BattleManager_processVictory','ScaleY','AsTarget','popupDamage','getTraitSetKeys','_targetOpacity','animationNextDelay','setHelpWindow','actionSplicePoint','qgQJt','waitForMovement','AIrSP','vwKFb','Window_BattleLog_displayCurrentState','_animationSprites','Window_BattleLog_performReflection','isPlaytest','CommandAddAutoBattle','_deathStateApplied','%1StartBattleJS','XPActorDefaultHeight','animationShouldMirror','alive\x20enemies\x20not\x20target','not\x20focus','Sprite_Battler_setBattler','_reflectionTarget','addShowHpGaugeCommand','12dPDmLF','startEnemySelection','aliveMembers','_targetGrowX','pAJpC','QYQRC','WaitForAnimation','mainFontSize','getChildIndex','PopupPosition','_lastRegenFrameCount','SkipPartyCmd','initBattleCore','zYiDE','autoBattleStyle','ActSeq_Horror_TVRemove','startPartyCommandSelection','StepDuration','GvspF','faceRect','canAddSkillCommand','bbNnq','_damagePopupArray','ActSeq_Zoom_WaitForZoom','alterCost','compatibilityVisible','removeChild','ePoVz','isPTB','isAnimationPlaying','MnWJf','contents','parameters','uiMenuStyle','cfzJV','SqLSB','CmdIconAutoBattle','Window_Options_statusText','custom','update','ConfigManager_applyData','lxIbo','battleSpin','tkjgm','ActSeq_BattleLog_WaitForBattleLog','actorCommandSingleSkill','occasion','JSON','AddHpGaugeOption','registerDefeatedEnemy','RkSpg','processActorCommandCancelTPB','regenerateAllBattleCore','setHelpWindowItem','innerHeight','hTCrR','ARRAYNUM','_baseY','_lines','ActSeq_Motion_WaitMotionFrame','makeTargetSelectionMoreVisible','battleSkew','getMenuImage','exit','WunJH','TIYGU','_back1Sprite','MKsrO','lukEffectRate','Scale','wiFuz','hiwIU','_back2Sprite','dvyYf','onActorCancel','gainTp','QHHuh','_shadowScaleY','_targetGrowY','missile','parse','addSingleSkillCommand','Name','Scene_Battle_onEnemyOk','PopupOffsetX','Game_Battler_forceAction','isOTB','ActSeq_Set_SetupAction','SkillItemBorderCols','Enemy','_actorCommandWindow','getEnemyIdWithName','Direction','ActSeq_Mechanics_WaitForEffect','_createClientArea','svShadow','battleFloat','_enemyWindow','createMainSprite','_ptbActionCost','setupMotionBlurImpactFilter','_flashColor','Sprite_Battleback_adjustPosition','dead\x20actors','OrQgs','JS\x20%1END\x20TURN','IkkGU','ATTACK','setBackgroundType','ActSeq_Movement_Jump','setupBattleback','prepareBorderActor','Game_Party_removeActor','destroyDamageSprite','evalDamageFormulaBattleCore','Sprite_Enemy_initVisibility','4cXnTwz','DigitGrouping','HpGaugeOffsetY','UNTITLED','buffRemove','_duration','NameLegacy','isSceneChanging','updateForceAction','Sprite_Actor_moveToStartPosition','wtypeId','_actorSprites','itemEffectAddNormalState','Window_SkillList_maxCols','Sprite_Actor_updateShadow','applyGlobal','changeAtbChargeTime','ParseStateNotetags','_canLose','ParseItemNotetags','ForceExploiter','FaceAway','getSkillTypes','\x5cI[%1]%2','WaitForZoom','hpDamageFmt','XHLJB','friendsUnit','measureTextWidth','gfBza','ActSeq_Mechanics_ActionEffect','_battlerHue','ActSeq_Mechanics_PtbConvert','motionIdle','removeStatesAuto','LastSelected','changeBattlebacks','isCertainHit','_dimmerSprite','_tpbState','scale','drawItemStyleIcon','hasSvBattler','isActor','BindCommonEventKeysForGroup','drawGauge','Game_Enemy_transform','textWidth','Game_Battler_performDamage','StateIconOffsetY','xlmlA','_effectDuration','onEnemyOk','PartyCmd','drawItemImagePortraitStyle','svBattlerAnchorX','DistanceY','battlerSmoothImage','isCommandEnabled','getLastPluginCommandInterpreter','user','applyAngleChange','call','Variable','yEWBD','%1EndTurnJS','_opacityWholeDuration','BARE\x20HANDS','addAttackCommand','Game_Map_battleback1Name','Game_Action_isForFriend','VisuMZ_2_BattleSystemFTB','stepFlinch','addImmortal','loadPicture','HitFlat','_indent','performDamage','ZRcSp','updateBitmap','Settings','ScaleUp','allowRandomSpeed','createContents','isChanting','KDQEf','NameAlwaysVisible','CmdTextAutoBattle','isOptionsCommandAdded','NXuta','messageSpeed','setupHpGaugeSprite','clearBattleCoreData','MotionType','performSubstitute','Mirror','updateEffectContainers','kiBcO','mTPWs','mONLs','Game_BattlerBase_eraseState','Game_Battler_performActionStart','Sprite_Battler_initMembers','alive\x20opponents','requestRefresh','addCustomCommands','showAnimation','_tpbSceneChangeCacheActor','KFawk','Pre','PostEndActionJS','bgType','ISScK','createJS','frameVisible','_battlerContainer','VisuMZ_2_WeaponSwapSystem','PreApplyJS','WofZC','WSMvT','DigitGroupingDamageSprites','aMEkW','Uhgam','PostDamageAsTargetJS','ECusH','aryDN','command301','moveBattlerDistance','changePaintOpacity','sPRmq','ActSeq_Movement_BattleStep','RUaAB','qhLfe','_mainSprite','ActSeq_Mechanics_CtbSpeed','StatusWindowAttachmentFront','addEscapeCommand','getInputButtonString','surprise','TpGaugeOffsetX','VisuMZ_2_BattleSystemCTB','swing','StyleON','fittingHeight','CmdStyle','mlbcK','updateStateSprite','CurrentTurn','performWeaponAnimation','_backAttachmentSprite','skillId','updateStateSpriteBattleCore','Sprite_Enemy_update','XVyyF','finalizeScale','updateFrame','processDefeat','performActionStart','18lxecEB','speed','clone','CriticalHitRate','BattleEndEvent','performTpbActiveCheckSwitch','zoomDuration','moveToStartPosition','Game_Battler_regenerateAll','BattleLog','_shake','clearHorrorEffects','process_VisuMZ_BattleCore_PreBattleCommonEvent','delay','MAXMP','performActionEnd','displayFailure','nMbJy','JtmpK','PostStartBattleJS','COMBAT\x20LOG','match','performAction','isBattleRefreshRequested','isSkillItemWindowsMiddle','updateBattlebackBitmap1','updateRefresh','lThpZ','prototype','actions','GTtzM','HelpAutoBattle','kZGBQ','_battleCoreAddedElements','priority','equips','vwuXE','TWOiT','stateMotionIndex','ForceExploited','isClicked','CuQay','isFloating','ActSeq_Projectile_Icon','createBattleFieldContainer','DamageStyles','BattleDefeatJS','isATB','battler','hUjWi','PrioritySortActive','STRUCT','text\x20target','BattleManager_initMembers','Sprite_Battler_updateMain','iByTs','setWaitMode','list','NameAlwaysSelectOnly','commandAutoBattle','isAnyoneGrowing','extraPositionX','RwYrA','isBattleSys','BravePoints','isForAll','ActSeq_Mechanics_BoostPointsChange','startBattle','return\x200','CoreEngine','isGrowing','+%1','Angle','updateActors','IlsRe','lPErR','updatePhase','YmAZZ','_offsetY','Mechanics','close','addAutoBattleCommand','makeActionOrders','Window_BattleLog_displayMpDamage','preparePartyRefresh','ActSeq_Mechanics_BreakShieldReset','battleCoreTpbMainPhase','alive\x20actors\x20not\x20target','_damages','resetFontSettings','deathStateId','battleProjectiles','bmbwB','buffAdd','EscapeFail','VzTKT','addChild','isFrameVisible','Game_Troop_setup','refreshRequest','dimColor2','ActSeq_Element_ForceElements','BattleManager_processDefeat','Scene_Battle_startActorSelection','dataId','MAXHP','fSnpM','isDisplayEmergedEnemies','xsldA','mttlN','AS\x20USER','XHuuc','PtThS','isAnyoneSpinning','createBorderStylePortraitSprite','WaitForProjectile','regionId','startActorSelection','setCursorRect','NOTYZ','GTIwa','applyFreezeMotionFrames','casting','shift','command283','Point','ntfAQ','canUse','NHWRD','createAllWindows','KjJze','StyleName','NHxGA','clear','makeDamageValue','isIncludedInEnemyWindow','yXOlK','actorCommandCancelTPB','battleSys','2BDDUNq','wholeActionSet','yoTbt','SYkBE','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','WaitForJump','Game_Interpreter_command301','EbSpa','_commandNameWindow','itemRect','WaitForNewLine','Setting','_padding','ActSeq_DB_DragonbonesTimeScale','isChangingOpacity','placeTimeGauge','JS\x20BATTLE\x20VICTORY','updateAttachmentSprites','miZPx','setBattlerBattleCore','findTargetSprite','expTotal','windowAreaHeight','SvBattlerSolo-%1-%2','ymuPi','EasingType','AtVDe','addChildToBack','selectNextActor','startTpbTurn','_updateFilterArea','linkSprite','HalfActions','%1EndActionJS','animationBaseDelay','isBattleFlipped','makeActions','aaRpL','udUix','CommandWidth','_attackAnimationId','makeCommandList','BreakShields','HJoXS','mrRgE','placeActorName','ActionEffect','removedStateObjects','hpMEl','fJfIL','cameraDuration','statusTextAutoBattleStyle','JzqdM','lwTyR','Window_BattleLog_performAction','setupBattlebackBattleCore','_growY','ActSeq_Movement_HomeReset','VisuMZ_4_BreakShields','getBattlePortraitOffsetY','epxVi','reduce','process_VisuMZ_BattleCore_BaseTroops','PrknP','POST-','CZLGG','createCommandVisibleJS','dying','damageRate','SvWeaponMass-%1-%2','drawEnemyName','message2','forceMotion','wvtkh','ActSeq_Impact_ShockwaveEachTargets','BeUAO','JS\x20%1START\x20BATTLE','statusWindowRectXPStyle','CZrne','makeEscapeRatio','VisuMZ_2_BattleSystemETB','velmU','HpGaugeOffsetX','resizeWindowXPStyle','DualWield','ZEVKx','Height','statusText','BMghc','performMiss','JDMkn','pointX','_distortionSprite','QoKKc','setHue','xObHa','createString','createDistortionSprite','displayEvasion','tpbCommandFight','oQcbd','snapForBackground','updateShadowPosition','callNextMethod','spriteId','deadMembers','Sprite_Battler_isMoving','createStateSprite','ApplyImmortal','changeWeather','PyIYH','drawText','setHandler','AnchorY','isSelected','Formula','addBuff','Dmriy','StatusWindowSelectableBackHide','oIauj','EcKfU','_createCursorSprite','kDupa','createInnerPortrait','gradientFillRect','VisuMZ_4_CombatLog','BattleLayout','ArnFj','TP_Rate','helpAreaBottom','JcNfg','substitute','Game_Troop_expTotal','setBattleCameraTargets','LkXuZ','ActSeq_Set_TargetActionSet','performJump','applyTargetFilters','startMotion','GbtQB','displayAction','StepDistanceX','rmJZd','NewPopupBottom','HrHIO','STYPES','ShowActorGauge','commandOptions','_actions','iRBLZ','isMagicSkill','sliceMax','createBattleUIOffsetX','itemCri','WZnhv','createDigits','transform','QBmXF','BattleManager_startInput','isTurnBased','removeHorrorEffect','tXCdm','ShowCritical','cBctW','Window_ActorCommand_setup','applyEasing','moveToStartPositionBattleCore','round','isAtbCastingState','ActSeq_Mechanics_Multipliers','Spriteset_Battle_createBattleField','skillItemWindowRectBorderStyle','lBFam','BOCoV','ActSeq_BattleLog_PushBaseLine','scuEE','Zzbcs','resize','ESCAPE','dyrWY','partyCommandWindowRectBorderStyle','wait','oqeVc','applyGlobalCommonEventNotetags','MfjCA','Iworp','FollowTurn','Immortal','victory','FocusY','toLowerCase','DEF','VvNDH','AOEBz','gainCurrentActionsETB','MpGaugeOffsetX','Enemy-%1-%2','ActSeq_Mechanics_StbExtraAction','ActSeq_Mechanics_BoostPointsStoreData','repeats','_wtypeIDs','_actionInputIndex','setHorrorEffectSettings','setupIconTextPopup','PopupShiftY','ext','commandNameWindowDrawBackground','PostApply%1JS','cancel','hvbKV','updateHpGaugePosition','XDUUV','alterActionCostPTB','AutoBattleMsg','checkShowHideBattleNotetags','Sprite_Actor_setBattler','_preBattleCommonEvent','AqHTd','iMpEg','getFullActionsPTB','mmp','DistanceX','_actorWindow','dULMi','clearResult','ueyqF','opacity','max','drawItemBackground','Text','1425641nHgBQN','drawTextEx','BaseTroopIDs','visible','stypeId','CaRuA','AbQen','Victory','animationWait','recoverAll','ShuffleArray','MotionFrameWait','center','updateSpin','targetObjects','children','setupRgbSplitImpactFilter','ZANar','getAttackMotionSlot','createEnemies','_lastPluginCommandInterpreter','ShowCounter','Window_BattleLog_displayTpDamage','_growDuration','createEnemyNameContainer','ChantStyle','startFloat','fight','Game_Action_itemEffectAddAttackState','mDDpY','addSkillCommands','extraPositionScaledY','chantStyle','swapEnemyIDs','Game_Action_isForRandom','xKtMw','_currentActor','right','_battleCoreForcedElements','clearActiveWeaponSlot','ScaleToFit','bvRAt','ActSeq_Movement_MoveToPoint','zQxRk','SkillsStatesCore','enemy','VCcDT','iWlSn','repositionEnemiesByResolution','PopupDuration','BattleManager_startTurn','createLowerLayer','filterArea','process_VisuMZ_BattleCore_jsFunctions','Scene_Map_initializeAfter','initVisibility','isAffectedByBreakShield','_motionSpeed','ShowHpDmg','FJzkE','createCommandNameWindow','_stateIconSprite','opacityStart','OffsetX','MOTIONS','registerCommand','bitmapWidth','setBattleAngle','windowskin','helpAreaHeight','QPpzO','makeAutoBattleActions','GNiRW','xlmAO','createEmptyBitmap','wIbfv','_armorPenetration','_opacityEasing','isAttack','isQueueOptionsMenu','animationId','isPhysical','attack','cancelActorInput','SkillItemStandardCols','ufjgn','skewDuration','ZGRRy','_statusWindow','ActSeq_Mechanics_PtbAlterCost','updateWeather','updateHelp','jmuDX','updateBattlebackBitmap','VisuMZ_3_ActSeqCamera','displayReflectionPlayBack','forceEscapeSprite','requestMotion','StepDistanceY','BuiCh','performRecovery','setEventCallback','Debuffs','battleAnimation','NameAlwaysHidden','BattleManager_startBattle','XLXIn','autoBattleWindowRect','Game_Interpreter_PluginCommand','skewBattler','_active','DTB','WeaponTypeID','removeAnimationFromContainer','isPreviousScene','waitForAnimation','createDamageContainer','_lastAction','StateIconOffsetX','equipSlots','MP_Flat','skillWindowRect','createActors','isAlwaysVisible','addDamageSprite','requestAnimation','ActSeq_Movement_WaitForMovement','ConfigManager_makeData','cameraClamp','initBattlePortrait','_multipliers','jahAF','_isBattlerFlipped','updateMain','displaySubstitute','applyBattleCoreJS','yqewI','onDisabledPartyCommandSelection','action','tYHif','checkAutoCustomActionSequenceNotetagEffect','createWeather','walk','performMoveToTargets','Game_Interpreter_command283','effects','turnOrderChangeOTB','JS\x20%1END\x20BATTLE','setHalfActionsPTB','Buffs','VisuMZ_2_BattleSystemOTB','LJBwI','Game_Map_battleback2Name','_growWholeDuration','makeSpeed','initMembersBattleCore','ActSeq_Mechanics_AddBuffDebuff','FlinchDuration','BattleManager_endAction','contentsOpacity','border','npKud','Spriteset_Battle_update','iterateBattler','ZXoWk','FdUEy','#%1','GZCvx','Game_Battler_performEvasion','Interrupt','inputting','faceWidth','processEscape','AutoBattleBgType','clamp','ActSeq_Impact_MotionTrailCreate','attachSpritesToDistortionSprite','Kcanb','ActSeq_Element_Clear','_waitMode','randomTargets','_angleRevertOnFinish','chant','NOrQi','ActionSequence','Game_Interpreter_terminate','MotionIdle','PreApplyAsTargetJS','SGEhz','addWeaponSwapCommand','setupTextPopup','SakUK','updateBossCollapse','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','switchToWeaponType','traitObjects','isSpinning','zqmJw','fWkyl','IconStypeMagic','isDebuffAffected','woRFi','fdeHp','KgkdG','BattleManager_onEscapeFailure','TpbGaugeOffsetX','ActSeq_Motion_RefreshMotion','battlerSprites','oFOny','startSpin','Scene_Battle_startEnemySelection','actorCommandAutoBattle','isBusy','sfCTS','Window_BattleStatus_initialize','dead','rowSpacing','_angleEasing','ParseClassNotetags','notFocusValid','ActSeq_Mechanics_SwapWeapon','hvKoA','maxCommands','_hpGaugeSprite','getAttackMotion','wcYiF','isMoving','Duration','DamageType%1','isDamagePopupRequested','battleback1Name','targetActionSet','Slot','dLurs','MkIUB','ReflectPlayback','NUM','battleCommandIcon','OrhNj','_commonEventKey','LiLJS','_list','REZhj','unchanged','lCvda','sort','_targetFloatHeight','createHelpWindowBattleCore','extraHeight','ZCVuG','MBcxm','CriticalDmgRate','Scene_Battle_partyCommandWindowRect','battleJump','ShowHide','Game_Battler_onTurnEnd','canInput','eFcnA','checkShowHideSkillNotetags','_damageContainer','%1Apply%2JS','_visualHpGauge_JustDied','performAttackSlot','seEcc','pydVh','drawActorFace','Sprite_Animation_targetSpritePosition','icon','canGuardBattleCore','Window_ItemList_maxCols','MAT','boxWidth','STR','attackStates','process_VisuMZ_BattleCore_CreateRegExp','isSTB','_animation','inBattle','displayTpDamage','setBattlePortrait','fgkRj','setupActionSet','checkTpbInputOpen','isPartyCommandWindowDisabled','useDigitGrouping','_defeatedEnemies','VisuMZ_2_HorrorEffects','battlerShadowScaleY','commandFight','canMove','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','QoL','ZIAZR','updateBorderStyle','maxItems','WaitCount2','playEnemyAttack','setHome','isBattlerFlipped','compareBattlerSprites','ActSeq_Animation_AttackAnimation2','ActSeq_Set_WholeActionSet','ActSeq_Mechanics_PtbFullHalfAction','MjVKT','critical','isSideButtonLayout','BSDjA','PreEndBattleJS','ePpiu','_immortal','isFTB','createStateIconSprite','_scene','isSideView','getNextDamagePopup','waitCount','addedBuffs','kyrhn','Sprite_Enemy_setBattler','_baseLineStack','updateVisibility','UnuFC','ZjtiZ','attackMotions','ReflectAnimation','Game_Map_setupBattleback','ZMtic','evSBn','TextAlign','applyImmortal','scope','addAnimationSpriteToContainer','HP_Rate','PreStartActionJS','_enemyID','HvFNx','MpGaugeOffsetY','eLFnq','isAlive','_subject','performSTBExploiter','addSkillTypeCommand','origin','drawItemStatus','_floatEasing','createAttachedSprites','EkdGK','_target','_enemySprites','weaponTypes','mgaxo','ShowAddedBuff','ActSeq_BattleLog_PopBaseLine','CoGQQ','isForRandom','process_VisuMZ_BattleCore_CommonEventKeys','isHiddenSkill','wGdLh','floatBattler','_currentAngle','guard','concat','EBKFw','setCustomDamageFormula','startInput','PostApplyAsTargetJS','item','VisuMZ_3_BoostAction','Udsvu','ZLWAb','WaitCount1','uiInputPosition','_motionType','SGdPq','ParseEnemyNotetags','Game_Actor_equips','VisuMZ_2_BattleSystemATB','alive\x20battlers\x20not\x20target','_baseX','loadWindowskin','helpWindowRect','whBGN','Scene_Battle_itemWindowRect','lxJbK','addLoadListener','Window_BattleLog_performMiss','physical','loadSvActor','aQttE','ActionAnimation','#ffffff','_callSceneOptions','windowPadding','filters','_createDamageContainer','JmLsY','isAnimationShownOnBattlePortrait','dragonbonesData','_autoBattle','_phase','autoSelect','waitForEffect','updateWaitMode','prepareCustomActionSequence','ActSeq_Impact_ZoomBlurPoint','ufOAw','parseForcedGameTroopSettingsBattleCore','alive\x20actors','launchBattle','_motionCount','canEscape','cVECh','isForFriend','commandName','collapse','_regionBattleback2','HelpFight','freezeMotion','Sprite_Enemy_updateBossCollapse','ActionSkillMsg1','_enemies','Spriteset_Battle_createLowerLayer','Game_Action_itemEffectAddNormalState','mpDamage','svBattlerAnchorY','resetResultSwitches','battleCoreResumeLaunchBattle','isActing','rbJHf','_battler','ActSeq_Mechanics_AnalyzeWeakness','displayBuffs','addCommand','timeScale','Spriteset_Battle_updateActors','clearBattlerMotionTrailData','battleback2Name','addChildAt','createActorCommandWindow','ActSeq_Animation_CastAnimation','iconWidth','VisuMZ_3_ActSeqImpact','SvMotionIdleMass-%1-%2','_escapeRatio','JumpToLabel','commandNameWindowCenter','skill','Game_Interpreter_updateWaitMode','lZvbL','bind','applyResultSwitches','isBattlerGrounded','woZKM','MVjnS','criticalDmgRate','anLKG','WZSWN','cPmEu','adjustFlippedBattlefield','onBattleStartBattleCore','pUEWC','AttachStateOffsetY','BattleLogRectJS','Scene_Map_initialize','updateOpacity','Window_BattleLog_performDamage','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ShowFailure','DnOkI','getWtypeIdWithName','pushBaseLine','JS\x20%1START\x20ACTION','isCustomActionSequence','_itemWindow','sdLYO','getBattlePortraitOffsetX','%1EndBattleJS','EFVXz','ActSeq_BattleLog_AddText','_updateCursorArea','drawLineText','isFastForward','AGI','alive\x20enemies','VaqsJ','Scene_Battle_startActorCommandSelection','onEncounter','AllowCollapse','allowCollapse','ActSeq_Movement_Float','_opacityDuration','AnimationID','isAlwaysHidden','sortEnemies','_windowLayer','NzdIE','placeStateIcon','svBattlerName','CJLFa','addGeneralOptions','commandStyle','isForOpponentBattleCore','isDead','AkXST','VisuMZ_2_BattleSystemBTB','pages','WEAPON\x20SWAP','initMembers','StartTurnWait','setupShockwaveImpactFilter','isTpb','Window_BattleLog_performActionStart','hdmzI','IGWeF','oYNsQ','uhPGD','isRightInputMode','CNjkK','_growEasing','kLhyn','FdzIb','ActSeq_Motion_ClearFreezeFrame','_battleCoreBattleResumeAfter','repeatTargets','_partyCommandWindow','bossCollapse','yMmWA','playCancel','Scene_Battle_selectPreviousCommand','StyleOFF','aKjuJ','isDuringNonLoopingMotion','addState','_methods','CriticalHitMultiplier','6912235HOVfqn','autoMeleeSingleTargetActionSet','battleMembers','HpGauge','_actionBattlers','updateShadow','putActiveBattlerOnTop','forceWeaponAnimation','displayCurrentState','tpbActorSwitchConditionsMet','DefaultSoftCap','_floatWholeDuration','push','createShadowSprite','drawItemImageXPStyle','loadSystem','process_VisuMZ_BattleCore_TraitObject_Notetags','trim','lineHeight','JS\x20%1END\x20ACTION','gainHalfActionsPTB','setActorHome','string','performReflection','processVictory','changeCtbChargeTime','ZPJwV','displayMiss','actorCommandWindowRect','ActionStart','_flashDuration','damage','Style','APWHU','startGrow','unshift','addPartyCommand','CriticalDuration','xmzWz','helpWindowRectBorderStyle','XRDNq','_targetIndex','random','addActor','CriticalHitFlat','_battleField','CastAnimation','BattleManager_endBattle','VatWR','CommandVisible','HelpEscape','isForOpponent','SvWeaponSolo-%1-%2','Targets','validTargets','ParseArmorNotetags','Civjd','traitSet','mBiLB','ActSeq_Weapon_SetActiveWeapon','nameY','start','isAutoBattleCommandAdded','TPB','MessageWait','ZbtiD','StatusWindowAttachmentFrontOffsetY','KLzGl','Scene_Map_updateCallMenu','TextColor','zBjdj','createBattleFieldBattleCore','ActSeq_Movement_WaitForJump','itemWindowRect','heLPu','TISSE','updateCollapse','_enemyId','_updateClientArea','createMiss','SmoothImage','PreStartBattleJS','onSkewEnd','power','_skillIDs','HP_Flat','DhvJo','CriticalColor','onBattleStart','AutoMeleeAoE','UmXhX','ActSeq_Movement_FacePoint','UyDLN','flashColor','ActSeq_Impact_MotionBlurTarget','YHTaT','NNSkt','includes','jXvcD','drawSkillCost','displayCounter','lUTKV','processRandomizedData','WOJGA','playReflection','_targetSkewX','dead\x20battlers','_effectType','addSingleSkillCommands','ActSeq_Mechanics_FtbAction','isBTB','PreApplyAsUserJS','ShowMissEvasion','nHnFm','DOWPV','CjBIO','toUseBoostPoints','voKXr','CriticalDmgFlat','lineRect','bitmap','setBattleZoom','Qfluk','arRedRate','6456406ihrhMX','alterChange','expRate','PreEndTurnJS','isOnCurrentMap','NcJJZ','currentSymbol','gBUkk','iconHeight','ipvUX','drawItemStyleIconText','Window_BattleLog_clear','_helpWindow','softDamageCap','gainBravePoints','Scene_Battle_terminate','randomInt','battleStatusWindowAnimationContainer','_animationCount'];_0x2fb2=function(){return _0x29174e;};return _0x2fb2();}function _0x5cc5(_0x590bee,_0x4ec9c3){const _0x2fb24c=_0x2fb2();return _0x5cc5=function(_0x5cc554,_0x35226b){_0x5cc554=_0x5cc554-0x160;let _0x5bcac9=_0x2fb24c[_0x5cc554];return _0x5bcac9;},_0x5cc5(_0x590bee,_0x4ec9c3);}(function(_0x74000f,_0x5d2f66){const _0x1fee15=_0x5cc5,_0x5a887b=_0x74000f();while(!![]){try{const _0x1de3cd=-parseInt(_0x1fee15(0x7aa))/0x1*(parseInt(_0x1fee15(0x6c4))/0x2)+parseInt(_0x1fee15(0xadd))/0x3+-parseInt(_0x1fee15(0x59b))/0x4*(-parseInt(_0x1fee15(0x9c1))/0x5)+parseInt(_0x1fee15(0x3eb))/0x6+-parseInt(_0x1fee15(0x2d4))/0x7*(parseInt(_0x1fee15(0xb73))/0x8)+-parseInt(_0x1fee15(0x639))/0x9*(-parseInt(_0x1fee15(0x1d3))/0xa)+parseInt(_0x1fee15(0xa3d))/0xb*(parseInt(_0x1fee15(0x527))/0xc);if(_0x1de3cd===_0x5d2f66)break;else _0x5a887b['push'](_0x5a887b['shift']());}catch(_0x30a558){_0x5a887b['push'](_0x5a887b['shift']());}}}(_0x2fb2,0xda5fd));var label=_0x3df63e(0xa69),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x55805a){const _0x5ec8cb=_0x3df63e;return _0x55805a[_0x5ec8cb(0xb8f)]&&_0x55805a[_0x5ec8cb(0x29e)][_0x5ec8cb(0xa22)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label]['Settings']||{},VisuMZ[_0x3df63e(0x368)]=function(_0x4e53a4,_0x3244f4){const _0x2df323=_0x3df63e;for(const _0x2de7e5 in _0x3244f4){if(_0x2df323(0x192)===_0x2df323(0x5b8))return _0x4df7f8[_0x2df323(0xae2)];else{if(_0x2de7e5[_0x2df323(0x64e)](/(.*):(.*)/i)){const _0x4c59d3=String(RegExp['$1']),_0x56791c=String(RegExp['$2'])[_0x2df323(0x17c)]()['trim']();let _0xcdd723,_0xc6500a,_0x36ad15;switch(_0x56791c){case _0x2df323(0x896):_0xcdd723=_0x3244f4[_0x2de7e5]!==''?Number(_0x3244f4[_0x2de7e5]):0x0;break;case _0x2df323(0x55f):_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a['map'](_0xd4dde4=>Number(_0xd4dde4));break;case _0x2df323(0x203):_0xcdd723=_0x3244f4[_0x2de7e5]!==''?eval(_0x3244f4[_0x2de7e5]):null;break;case'ARRAYEVAL':_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a[_0x2df323(0x3a8)](_0x5373d2=>eval(_0x5373d2));break;case _0x2df323(0x556):_0xcdd723=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):'';break;case'ARRAYJSON':_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a[_0x2df323(0x3a8)](_0x4cc28f=>JSON[_0x2df323(0x577)](_0x4cc28f));break;case _0x2df323(0xa87):_0xcdd723=_0x3244f4[_0x2de7e5]!==''?new Function(JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5])):new Function(_0x2df323(0x67d));break;case _0x2df323(0xae6):_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a[_0x2df323(0x3a8)](_0x16d12b=>new Function(JSON['parse'](_0x16d12b)));break;case _0x2df323(0x8ba):_0xcdd723=_0x3244f4[_0x2de7e5]!==''?String(_0x3244f4[_0x2de7e5]):'';break;case _0x2df323(0x40e):_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a[_0x2df323(0x3a8)](_0x1d6f44=>String(_0x1d6f44));break;case _0x2df323(0x66c):_0x36ad15=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):{},_0x4e53a4[_0x4c59d3]={},VisuMZ[_0x2df323(0x368)](_0x4e53a4[_0x4c59d3],_0x36ad15);continue;case _0x2df323(0x376):_0xc6500a=_0x3244f4[_0x2de7e5]!==''?JSON[_0x2df323(0x577)](_0x3244f4[_0x2de7e5]):[],_0xcdd723=_0xc6500a[_0x2df323(0x3a8)](_0x5c394c=>VisuMZ[_0x2df323(0x368)]({},JSON[_0x2df323(0x577)](_0x5c394c)));break;default:continue;}_0x4e53a4[_0x4c59d3]=_0xcdd723;}}}return _0x4e53a4;},(_0x5d048f=>{const _0x429b6e=_0x3df63e,_0x5dad72=_0x5d048f[_0x429b6e(0xae2)];for(const _0x23c5f0 of dependencies){if(!Imported[_0x23c5f0]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x429b6e(0x4f8)](_0x5dad72,_0x23c5f0)),SceneManager[_0x429b6e(0x566)]();break;}}const _0x509013=_0x5d048f[_0x429b6e(0x29e)];if(_0x509013[_0x429b6e(0x64e)](/\[Version[ ](.*?)\]/i)){if('rtLcj'===_0x429b6e(0x6a3)){if(!_0x583a53['isSceneBattle']())return;_0x35d027[_0x429b6e(0x368)](_0x6c0660,_0x46107a);const _0x28a994=_0x582c75[_0x429b6e(0x5d6)](),_0x12cd2c=_0x3a0b41[_0x429b6e(0x383)](_0x2d861c[_0x429b6e(0x9f6)]),_0x1d2376=_0x11a222[_0x429b6e(0x995)],_0x370498=_0x15246b[_0x429b6e(0x5fa)];if(!_0x28a994)return;_0x520be5[_0x429b6e(0x827)](_0x12cd2c,_0x1d2376,_0x370498);if(_0x4006d3[_0x429b6e(0x52d)])_0x28a994[_0x429b6e(0x671)](_0x429b6e(0x811));}else{const _0x43564a=Number(RegExp['$1']);if(_0x43564a!==VisuMZ[label][_0x429b6e(0xb4c)]){if('kLgmI'!==_0x429b6e(0x2b2)){const _0x5d2bff=_0x3ccebd[_0x429b6e(0x577)]('['+_0x25a8dc['$1'][_0x429b6e(0x64e)](/\d+/g)+']');for(const _0x116f34 of _0x5d2bff){if(!_0x28bc78[_0x429b6e(0xa53)](_0x116f34))return![];}return!![];}else alert(_0x429b6e(0x86b)[_0x429b6e(0x4f8)](_0x5dad72,_0x43564a)),SceneManager['exit']();}}}if(_0x509013[_0x429b6e(0x64e)](/\[Tier[ ](\d+)\]/i)){const _0x41a837=Number(RegExp['$1']);_0x41a837<tier?(alert(_0x429b6e(0x6c8)[_0x429b6e(0x4f8)](_0x5dad72,_0x41a837,tier)),SceneManager[_0x429b6e(0x566)]()):tier=Math[_0x429b6e(0x7a7)](_0x41a837,tier);}VisuMZ[_0x429b6e(0x368)](VisuMZ[label]['Settings'],_0x5d048f[_0x429b6e(0x547)]);})(pluginData),VisuMZ[_0x3df63e(0x383)]=function(_0x1a26d3){const _0x539d2e=_0x3df63e;let _0x379f9e=[];for(const _0x1c3c35 of _0x1a26d3){_0x379f9e=_0x379f9e[_0x539d2e(0x913)](VisuMZ[_0x539d2e(0x177)](_0x1c3c35));}return _0x379f9e[_0x539d2e(0xaaa)](_0x4c65fd=>_0x4c65fd);},VisuMZ[_0x3df63e(0x177)]=function(_0x2cd9ea){const _0x3c18e2=_0x3df63e,_0x3eb90f=BattleManager[_0x3c18e2(0x3c0)]()[_0x3c18e2(0xaaa)](_0x469a06=>_0x469a06&&_0x469a06[_0x3c18e2(0xaa1)]()),_0x25401d=BattleManager['_subject'],_0x477db6=BattleManager[_0x3c18e2(0x905)],_0x20641c=BattleManager[_0x3c18e2(0xa84)]?BattleManager[_0x3c18e2(0xa84)][_0x3c18e2(0x3f6)](0x0):_0x3eb90f;_0x2cd9ea=_0x2cd9ea['toLowerCase']()['trim']();if(_0x2cd9ea===_0x3c18e2(0x5d7)){if(_0x3c18e2(0x9aa)===_0x3c18e2(0xacc))_0x499ca7=_0x5a741f>=_0x1c9d74?_0xdfd4fb:_0xd024cf;else return[_0x25401d];}else{if(_0x2cd9ea===_0x3c18e2(0x2c8))return[_0x477db6];else{if(_0x2cd9ea===_0x3c18e2(0x2e9)){if(_0x3c18e2(0x70f)===_0x3c18e2(0x542)){if(_0x38634f['match'](/(.*):[ ](\d+)/i)){const _0x3eb56f=_0xebaaba(_0x30a305['$1'])[_0x3c18e2(0x9d2)](),_0x180d3b=_0x4b547b(_0xeb13cb['$2']);_0x1497e2[_0x3eb56f]=_0x180d3b,_0x33233c+=_0x180d3b;}else{if(_0xb3f75a[_0x3c18e2(0x64e)](/(.*):[ ](\d+\.?\d+)/i)){const _0x13acad=_0x2b17b8(_0x5113f4['$1'])[_0x3c18e2(0x9d2)](),_0x386668=_0x4bbc9f(_0x279ce4['$2']);_0xca0fa0[_0x13acad]=_0x386668,_0x4c0bdd+=_0x386668;}else _0x48ffa8!==''&&(_0x36ce75[_0x63064e]=0x1,_0x19c7ae++);}}else{if(_0x477db6){const _0x2d02c4=_0x20641c[_0x3c18e2(0x246)](_0x477db6);return _0x2d02c4>=0x0?[_0x20641c[_0x2d02c4-0x1]||_0x477db6]:[_0x477db6];}}}else{if(_0x2cd9ea===_0x3c18e2(0x66d)){if(_0x3c18e2(0x287)!==_0x3c18e2(0x420)){if(_0x477db6){const _0x91ba6=_0x20641c[_0x3c18e2(0x246)](_0x477db6);return _0x91ba6>=0x0?[_0x20641c[_0x91ba6+0x1]||_0x477db6]:[_0x477db6];}}else this[_0x3c18e2(0x9cd)](_0x3c18e2(0x74c),[_0x5c6702],_0x5b7b2c,_0x7985d9),this[_0x3c18e2(0x9cd)](_0x3c18e2(0x839),_0x1ce929,_0x5cf97c,_0x3c18e2(0x4e3),_0xe334c6,!![],_0x3c18e2(0x25d),!![]),this['push'](_0x3c18e2(0x80b),[_0x34c586],'walk'),this[_0x3c18e2(0x9cd)](_0x3c18e2(0x516));}else{if(_0x2cd9ea==='all\x20targets'){if(_0x3c18e2(0x3e3)!==_0x3c18e2(0x9ad))return _0x20641c;else this['_floatHeight']=(this['_floatHeight']*(_0x216280-0x1)+this[_0x3c18e2(0x8a0)])/_0x6a1e21;}else{if(_0x2cd9ea===_0x3c18e2(0xbb1)){if(_0x3c18e2(0x34b)===_0x3c18e2(0x90b)){if(this[_0x3c18e2(0x5c0)]())return _0x606eb9;const _0x178e29=this[_0x3c18e2(0x473)](),_0x4beb97=_0x37e05e;let _0x3e9d21=[],_0x3d7583=[];_0x3e9d21[_0x3c18e2(0x9cd)](this[_0x3c18e2(0x7f6)][_0x3c18e2(0x230)],this[_0x3c18e2(0x7f6)][_0x3c18e2(0x238)]),_0x3d7583[_0x3c18e2(0x9cd)](this[_0x3c18e2(0x7f6)]['arPenRate'],this[_0x3c18e2(0x7f6)][_0x3c18e2(0xa3c)]);const _0x31c7c9=this[_0x3c18e2(0x7fb)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3e219b=this[_0x3c18e2(0x7fb)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x189a35=this[_0x3c18e2(0x7fb)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x547bc7=this[_0x3c18e2(0x7fb)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x3e9d21=_0x3e9d21[_0x3c18e2(0x913)](_0x4beb97['traitObjects']()[_0x3c18e2(0x3a8)](_0xa589f0=>_0xa589f0&&_0xa589f0[_0x3c18e2(0x45f)][_0x3c18e2(0x64e)](_0x31c7c9)?_0x2a3729(_0x72fda7['$1']):0x0)),_0x3d7583=_0x3d7583['concat'](_0x4beb97['traitObjects']()[_0x3c18e2(0x3a8)](_0x2c7a4c=>_0x2c7a4c&&_0x2c7a4c[_0x3c18e2(0x45f)]['match'](_0x3e219b)?_0x3ee823(_0x430379['$1'])/0x64:0x0)),_0x3e9d21=_0x3e9d21[_0x3c18e2(0x913)](_0x178e29['traitObjects']()[_0x3c18e2(0x3a8)](_0x4e8d5e=>_0x4e8d5e&&_0x4e8d5e['note'][_0x3c18e2(0x64e)](_0x189a35)?_0x56eb62(_0x55554d['$1']):0x0)),_0x3d7583=_0x3d7583[_0x3c18e2(0x913)](_0x178e29[_0x3c18e2(0x86d)]()['map'](_0x5b1516=>_0x5b1516&&_0x5b1516[_0x3c18e2(0x45f)][_0x3c18e2(0x64e)](_0x547bc7)?_0x22044d(_0x391914['$1'])/0x64:0x0)),this[_0x3c18e2(0x918)]()[_0x3c18e2(0x45f)][_0x3c18e2(0x64e)](_0x189a35)&&_0x3e9d21[_0x3c18e2(0x9cd)](_0x12d76d(_0x51f2e9['$1'])),this[_0x3c18e2(0x918)]()[_0x3c18e2(0x45f)][_0x3c18e2(0x64e)](_0x547bc7)&&_0x3d7583['push'](_0x587cb0(_0x5722ff['$1'])),_0x1c963e=_0x3e9d21[_0x3c18e2(0x701)]((_0x142ef0,_0x3cd9e6)=>_0x142ef0-_0x3cd9e6,_0x45b7c5),_0x1a0a5c>0x0&&(_0x111891=_0x3d7583['reduce']((_0x4f7429,_0x3f0cb9)=>_0x4f7429*(0x1-_0x3f0cb9),_0x420a26)),_0x587a40;}else return[_0x25401d]['concat'](_0x20641c);}else{if(_0x2cd9ea===_0x3c18e2(0x523))return _0x3eb90f[_0x3c18e2(0xaaa)](_0x5af145=>_0x5af145!==_0x25401d&&!_0x20641c[_0x3c18e2(0xa22)](_0x5af145)&&_0x5af145[_0x3c18e2(0x885)]());}}}}}}if(_0x25401d){if(_0x3c18e2(0xa28)==='WOJGA'){if(_0x2cd9ea==='alive\x20friends')return _0x25401d[_0x3c18e2(0x5b6)]()[_0x3c18e2(0x529)]();else{if(_0x2cd9ea===_0x3c18e2(0xa75))return _0x25401d['friendsUnit']()['aliveMembers']()[_0x3c18e2(0xaaa)](_0x327da0=>_0x327da0!==_0x25401d);else{if(_0x2cd9ea==='alive\x20friends\x20not\x20target')return _0x25401d[_0x3c18e2(0x5b6)]()[_0x3c18e2(0x529)]()[_0x3c18e2(0xaaa)](_0x1d09ba=>_0x1d09ba!==_0x477db6);else{if(_0x2cd9ea==='dead\x20friends')return _0x25401d['friendsUnit']()[_0x3c18e2(0x72d)]();else{if(_0x2cd9ea[_0x3c18e2(0x64e)](/FRIEND INDEX (\d+)/i)){const _0x3c8788=Number(RegExp['$1']);return[_0x25401d[_0x3c18e2(0x5b6)]()[_0x3c18e2(0x38a)]()[_0x3c8788]];}}}}}if(_0x2cd9ea===_0x3c18e2(0x602))return _0x25401d[_0x3c18e2(0x40f)]()[_0x3c18e2(0x529)]();else{if(_0x2cd9ea===_0x3c18e2(0x260))return _0x25401d[_0x3c18e2(0x40f)]()['aliveMembers']()[_0x3c18e2(0xaaa)](_0x51cb5d=>_0x51cb5d!==_0x477db6);else{if(_0x2cd9ea===_0x3c18e2(0xb16))return _0x25401d[_0x3c18e2(0x40f)]()[_0x3c18e2(0x72d)]();else{if(_0x2cd9ea['match'](/OPPONENT INDEX (\d+)/i)){const _0x1fbc5f=Number(RegExp['$1']);return[_0x25401d[_0x3c18e2(0x40f)]()[_0x3c18e2(0x38a)]()[_0x1fbc5f]];}}}}}else{if(!_0x1a69ae['isSceneBattle']())return;const _0x24bc77=_0x28ac66[_0x3c18e2(0x5d6)]();if(!_0x24bc77)return;_0x24bc77['setWaitMode']('battleSpriteSkew');}}if(_0x2cd9ea===_0x3c18e2(0x941)){if(_0x3c18e2(0x971)===_0x3c18e2(0x971))return $gameParty[_0x3c18e2(0x529)]();else this[_0x3c18e2(0xaba)]('PreStartTurnJS'),_0x1a5086[_0x3c18e2(0xa69)][_0x3c18e2(0xb01)][_0x3c18e2(0x5d9)](this),this[_0x3c18e2(0xaba)](_0x3c18e2(0x2f1));}else{if(_0x2cd9ea===_0x3c18e2(0x2fc)){if(_0x3c18e2(0x9b1)!=='kLhyn'){_0x53e719[_0x3c18e2(0x655)]['activate']['call'](this);const _0x2ac133=this[_0x3c18e2(0xb6b)]();_0x2ac133===_0x3c18e2(0x84a)&&this[_0x3c18e2(0x3a2)]();}else return $gameParty[_0x3c18e2(0x529)]()[_0x3c18e2(0xaaa)](_0x4306a4=>_0x4306a4!==_0x25401d);}else{if(_0x2cd9ea===_0x3c18e2(0x690)){if(_0x3c18e2(0x773)===_0x3c18e2(0x719)){if(!_0x338f71[_0x3c18e2(0x2a9)]())return;if(!this[_0x3c18e2(0x669)]())return;if(_0xd3474d[_0x3c18e2(0xb02)]<=0x0)return;_0x57fb8a=_0x3f6810||{},_0x1bd6d4[_0x3c18e2(0xab4)]=_0x2a8e91['textColor']||_0x3c18e2(0x930),_0x44d526[_0x3c18e2(0xa1e)]=_0x3c4591[_0x3c18e2(0xa1e)]||[0x0,0x0,0x0,0x0],_0x2c82c2['flashDuration']=_0x2a985d[_0x3c18e2(0x2b1)]||0x0,this[_0x3c18e2(0x669)]()[_0x3c18e2(0x78f)](_0x1145d9,_0x26a1e1,_0x3d6593);}else return $gameParty[_0x3c18e2(0x529)]()['filter'](_0x5de14c=>_0x5de14c!==_0x477db6);}else{if(_0x2cd9ea===_0x3c18e2(0x58e))return $gameParty[_0x3c18e2(0x72d)]();else{if(_0x2cd9ea[_0x3c18e2(0x64e)](/ACTOR INDEX (\d+)/i)){const _0x4fccd7=Number(RegExp['$1']);return[$gameParty[_0x3c18e2(0x38a)]()[_0x4fccd7]];}else{if(_0x2cd9ea[_0x3c18e2(0x64e)](/ACTOR ID (\d+)/i)){if('PTYoJ'===_0x3c18e2(0x6e9)){const _0x12908d=_0x3b1ffb['result'](),_0x49ce9b=_0x12908d[_0x3c18e2(0xb3b)]();for(const _0x2e94ee of _0x49ce9b){const _0x40f970=_0xe220ec['isActor']()?_0x2e94ee[_0x3c18e2(0x201)]:_0x2e94ee[_0x3c18e2(0x70b)];_0x40f970&&_0x4daf8e[_0x3c18e2(0xa69)]['Settings']['BattleLog']['ShowAddedState']&&(this['push'](_0x3c18e2(0xba8)),this['push'](_0x3c18e2(0x980)),this['push'](_0x3c18e2(0xbbc),_0x40f970[_0x3c18e2(0x4f8)](_0x4a6409['name']())),this[_0x3c18e2(0x9cd)]('wait')),_0x2e94ee['id']===_0x5371ef[_0x3c18e2(0x693)]()&&this[_0x3c18e2(0x9cd)](_0x3c18e2(0x327),_0x292586);}}else{const _0x3b39d8=Number(RegExp['$1']);return[$gameActors[_0x3c18e2(0x355)](_0x3b39d8)];}}}}}}}if(_0x2cd9ea===_0x3c18e2(0x98d))return $gameTroop[_0x3c18e2(0x529)]();else{if(_0x2cd9ea===_0x3c18e2(0x4c0))return $gameTroop['aliveMembers']()[_0x3c18e2(0xaaa)](_0x26862e=>_0x26862e!==_0x25401d);else{if(_0x2cd9ea===_0x3c18e2(0x522)){if(_0x3c18e2(0x8ab)!==_0x3c18e2(0x8ab))this[_0x3c18e2(0x5c5)]()&&this[_0x3c18e2(0x431)][_0x3c18e2(0x35b)]();else return $gameTroop[_0x3c18e2(0x529)]()['filter'](_0x5d402c=>_0x5d402c!==_0x477db6);}else{if(_0x2cd9ea===_0x3c18e2(0x1a1)){if(_0x3c18e2(0x6cb)!=='vnncL')return $gameTroop['deadMembers']();else _0xd415d0['BattleCore'][_0x3c18e2(0x92b)][_0x3c18e2(0x5d9)](this,_0x1218bc),this[_0x3c18e2(0x72b)]();}else{if(_0x2cd9ea[_0x3c18e2(0x64e)](/ENEMY INDEX (\d+)/i)){if(_0x3c18e2(0x3ce)!=='eLSZv'){const _0x967460=Number(RegExp['$1']);return[$gameTroop[_0x3c18e2(0x38a)]()[_0x967460]];}else{if(_0x1d2b7f[_0x3c18e2(0x449)][_0x3c18e2(0x1af)]())return!![];this['_waitMode']='';}}else{if(_0x2cd9ea['match'](/ENEMY ID (\d+)/i)){if(_0x3c18e2(0xaac)===_0x3c18e2(0x52c))return _0xae26be[_0x3c18e2(0x669)]()[_0x3c18e2(0x924)]-_0x10e67c['battler']()[_0x3c18e2(0x924)];else{const _0x65efa6=Number(RegExp['$1']);return $gameTroop[_0x3c18e2(0x529)]()[_0x3c18e2(0xaaa)](_0x688e85=>_0x688e85['enemyId']()===_0x65efa6);}}}}}}}if(_0x2cd9ea===_0x3c18e2(0x3a3))return _0x3eb90f['filter'](_0x3f2393=>_0x3f2393[_0x3c18e2(0x8fc)]());else{if(_0x2cd9ea===_0x3c18e2(0x3df))return _0x3eb90f[_0x3c18e2(0xaaa)](_0x4155fc=>_0x4155fc[_0x3c18e2(0x8fc)]()&&_0x4155fc!==_0x25401d);else{if(_0x2cd9ea===_0x3c18e2(0x923)){if('xumIZ'!==_0x3c18e2(0xb86)){if(!_0x2e4573[_0x3c18e2(0x2a9)]())return;_0x58ea80[_0x3c18e2(0x368)](_0x2ee1e8,_0x4a46b9);const _0x402e21=_0x211860[_0x3c18e2(0xbae)];if(!_0x402e21)return;let _0x2548ab=_0x34a081[_0x3c18e2(0x737)];_0x402e21[_0x3c18e2(0x915)](_0x2548ab);}else return _0x3eb90f[_0x3c18e2(0xaaa)](_0x407df5=>_0x407df5[_0x3c18e2(0x8fc)]()&&_0x407df5!==_0x477db6);}else{if(_0x2cd9ea===_0x3c18e2(0xa2b)){if(_0x3c18e2(0x61c)!==_0x3c18e2(0x61c))_0x434f5c=this[_0x3c18e2(0x4a3)]()[_0x3c18e2(0x5a5)]||0x0;else return _0x3eb90f[_0x3c18e2(0xaaa)](_0x3e8e18=>_0x3e8e18[_0x3c18e2(0x9a0)]());}}}}return[];},PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x57e),_0x346de8=>{const _0x53448a=_0x3df63e;if(!SceneManager[_0x53448a(0x2a9)]())return;VisuMZ[_0x53448a(0x368)](_0x346de8,_0x346de8);const _0x3e00e5=$gameTemp[_0x53448a(0x5d6)](),_0x48bb5a=BattleManager[_0x53448a(0xbae)],_0x2ed1ed=BattleManager[_0x53448a(0x8fd)],_0x12d9ad=BattleManager[_0x53448a(0xa84)]?BattleManager[_0x53448a(0xa84)]['slice'](0x0):[],_0x36cbe2=BattleManager[_0x53448a(0x3fa)];if(!_0x3e00e5||!_0x48bb5a||!_0x2ed1ed)return;if(!_0x48bb5a[_0x53448a(0x918)]())return;if(_0x346de8[_0x53448a(0x38b)])_0x36cbe2[_0x53448a(0x750)](_0x2ed1ed,_0x48bb5a[_0x53448a(0x918)]());_0x346de8[_0x53448a(0x730)]&&_0x36cbe2[_0x53448a(0x9cd)](_0x53448a(0x8f3),_0x2ed1ed,_0x12d9ad,!![]);if(_0x346de8[_0x53448a(0x9de)])_0x36cbe2[_0x53448a(0x9cd)](_0x53448a(0x638),_0x2ed1ed,_0x48bb5a);if(_0x346de8['WaitForMovement'])_0x36cbe2['push']('waitForMovement');if(_0x346de8[_0x53448a(0x9ef)])_0x36cbe2['push'](_0x53448a(0x221),_0x2ed1ed,_0x48bb5a);if(_0x346de8[_0x53448a(0x52d)])_0x36cbe2['push'](_0x53448a(0x81d));_0x3e00e5[_0x53448a(0x671)](_0x53448a(0x379));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x8d7),_0x1d3bdc=>{const _0x295c72=_0x3df63e;if(!SceneManager[_0x295c72(0x2a9)]())return;VisuMZ['ConvertParams'](_0x1d3bdc,_0x1d3bdc);const _0x5525d8=$gameTemp[_0x295c72(0x5d6)](),_0x10921d=BattleManager[_0x295c72(0xbae)],_0x48234b=BattleManager[_0x295c72(0x8fd)],_0x15fb14=BattleManager[_0x295c72(0xa84)]?BattleManager[_0x295c72(0xa84)][_0x295c72(0x3f6)](0x0):[],_0x1c5abf=BattleManager[_0x295c72(0x3fa)],_0x4a1e89=_0x1d3bdc['DualWield']??![];if(!_0x5525d8||!_0x10921d||!_0x48234b)return;if(!_0x10921d[_0x295c72(0x918)]())return;let _0x1fcb97=_0x4a1e89?_0x1c5abf[_0x295c72(0xb75)](_0x48234b):0x1;for(let _0x4c70ca=0x0;_0x4c70ca<_0x1fcb97;_0x4c70ca++){_0x4a1e89&&_0x48234b[_0x295c72(0x5c6)]()&&_0x1c5abf['push'](_0x295c72(0xb22),_0x48234b,_0x4c70ca);if(_0x1d3bdc['PerformAction'])_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x64f),_0x48234b,_0x10921d);if(_0x1d3bdc['WaitCount']>0x0)_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x8e5),_0x1d3bdc['WaitCount']);if(_0x1d3bdc[_0x295c72(0x92f)])_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x605),_0x48234b,_0x15fb14,_0x10921d['item']()[_0x295c72(0x7fa)]);if(_0x1d3bdc[_0x295c72(0x52d)])_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x81d));for(const _0x4a6999 of _0x15fb14){if(!_0x4a6999)continue;if(_0x1d3bdc[_0x295c72(0x6f2)])_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x377),_0x48234b,_0x4a6999);}}_0x4a1e89&&_0x48234b[_0x295c72(0x5c6)]()&&_0x1c5abf[_0x295c72(0x9cd)]('clearActiveWeaponSet',_0x48234b);if(_0x1d3bdc['ApplyImmortal'])_0x1c5abf[_0x295c72(0x9cd)](_0x295c72(0x8f3),_0x48234b,_0x15fb14,![]);_0x5525d8[_0x295c72(0x671)](_0x295c72(0x379));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x74b),_0x2ede76=>{const _0x3be0c7=_0x3df63e;if(!SceneManager[_0x3be0c7(0x2a9)]())return;VisuMZ[_0x3be0c7(0x368)](_0x2ede76,_0x2ede76);const _0x15de14=$gameTemp[_0x3be0c7(0x5d6)](),_0x252283=BattleManager[_0x3be0c7(0xbae)],_0x28e74b=BattleManager[_0x3be0c7(0x8fd)],_0x174571=BattleManager[_0x3be0c7(0xa84)]?BattleManager[_0x3be0c7(0xa84)][_0x3be0c7(0x3f6)](0x0):[],_0x4679b4=BattleManager[_0x3be0c7(0x3fa)],_0x30a803=_0x2ede76[_0x3be0c7(0x718)]??![];if(!_0x15de14||!_0x252283||!_0x28e74b)return;if(!_0x252283[_0x3be0c7(0x918)]())return;let _0x5ae0a6=_0x30a803?_0x4679b4[_0x3be0c7(0xb75)](_0x28e74b):0x1;for(let _0x4dae99=0x0;_0x4dae99<_0x5ae0a6;_0x4dae99++){for(const _0x4a7a78 of _0x174571){if('TWIIH'===_0x3be0c7(0x433))this[_0x3be0c7(0xa9d)]();else{if(!_0x4a7a78)continue;if(_0x30a803&&_0x28e74b[_0x3be0c7(0x5c6)]()){if('oYNsQ'!==_0x3be0c7(0x9ac))return this[_0x3be0c7(0x331)]&&this['_actor'][_0x3be0c7(0x37a)]();else _0x4679b4['push'](_0x3be0c7(0xb22),_0x28e74b,_0x4dae99);}if(_0x2ede76[_0x3be0c7(0x23f)])_0x4679b4[_0x3be0c7(0x9cd)](_0x3be0c7(0x64f),_0x28e74b,_0x252283);if(_0x2ede76[_0x3be0c7(0x91c)]>0x0)_0x4679b4['push']('waitCount',_0x2ede76[_0x3be0c7(0x91c)]);if(_0x2ede76[_0x3be0c7(0x92f)])_0x4679b4[_0x3be0c7(0x9cd)](_0x3be0c7(0x605),_0x28e74b,[_0x4a7a78],_0x252283[_0x3be0c7(0x918)]()[_0x3be0c7(0x7fa)]);if(_0x2ede76[_0x3be0c7(0x8d1)]>0x0)_0x4679b4[_0x3be0c7(0x9cd)](_0x3be0c7(0x8e5),_0x2ede76[_0x3be0c7(0x8d1)]);if(_0x2ede76[_0x3be0c7(0x6f2)])_0x4679b4[_0x3be0c7(0x9cd)]('actionEffect',_0x28e74b,_0x4a7a78);}}}_0x30a803&&_0x28e74b['isActor']()&&_0x4679b4[_0x3be0c7(0x9cd)](_0x3be0c7(0x2ca),_0x28e74b);if(_0x2ede76[_0x3be0c7(0x730)])_0x4679b4[_0x3be0c7(0x9cd)]('applyImmortal',_0x28e74b,_0x174571,![]);_0x15de14['setWaitMode'](_0x3be0c7(0x379));}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x4fc),_0x4d0502=>{const _0x4b0a24=_0x3df63e;if(!SceneManager[_0x4b0a24(0x2a9)]())return;VisuMZ[_0x4b0a24(0x368)](_0x4d0502,_0x4d0502);const _0x395eab=$gameTemp[_0x4b0a24(0x5d6)](),_0x2f10dd=BattleManager['_action'],_0x21d565=BattleManager[_0x4b0a24(0x8fd)],_0x68636a=BattleManager[_0x4b0a24(0xa84)]?BattleManager[_0x4b0a24(0xa84)][_0x4b0a24(0x3f6)](0x0):[],_0x442e5c=BattleManager['_logWindow'];if(!_0x395eab||!_0x2f10dd||!_0x21d565)return;if(!_0x2f10dd['item']())return;if(_0x4d0502[_0x4b0a24(0x730)])_0x442e5c[_0x4b0a24(0x9cd)](_0x4b0a24(0x8f3),_0x21d565,_0x68636a,![]);if(_0x4d0502['WaitForNewLine'])_0x442e5c[_0x4b0a24(0x9cd)](_0x4b0a24(0x463));if(_0x4d0502[_0x4b0a24(0x3c9)])_0x442e5c[_0x4b0a24(0x9cd)](_0x4b0a24(0x93b));if(_0x4d0502[_0x4b0a24(0x380)])_0x442e5c['push']('clear');if(_0x4d0502[_0x4b0a24(0x3d2)])_0x442e5c['push']('performActionEnd',_0x21d565);if(_0x4d0502['WaitForMovement'])_0x442e5c[_0x4b0a24(0x9cd)](_0x4b0a24(0x516));_0x395eab[_0x4b0a24(0x671)](_0x4b0a24(0x379));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x17a),_0x8cee1a=>{const _0x1a1948=_0x3df63e;if(!SceneManager[_0x1a1948(0x2a9)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a1948(0x368)](_0x8cee1a,_0x8cee1a);const _0x3be6f3=$gameTemp['getLastPluginCommandInterpreter'](),_0x492f8c=_0x8cee1a[_0x1a1948(0x21c)];if(!_0x3be6f3)return;$gameScreen[_0x1a1948(0x7ed)](_0x8cee1a[_0x1a1948(0x681)],_0x8cee1a[_0x1a1948(0x88d)],_0x8cee1a[_0x1a1948(0x6dd)]);if(_0x492f8c)_0x3be6f3[_0x1a1948(0x671)](_0x1a1948(0x3b8));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xbcb),_0x3227de=>{const _0x437698=_0x3df63e;if(!SceneManager[_0x437698(0x2a9)]())return;if(!Imported[_0x437698(0x808)])return;VisuMZ[_0x437698(0x368)](_0x3227de,_0x3227de);const _0x4d8e14=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a9cd3=_0x3227de[_0x437698(0x21c)];if(!_0x4d8e14)return;$gameScreen[_0x437698(0x7ed)](0x0,_0x3227de[_0x437698(0x88d)],_0x3227de[_0x437698(0x6dd)]);if(_0x1a9cd3)_0x4d8e14['setWaitMode'](_0x437698(0x3b8));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4da),_0x2e1013=>{const _0x5b8317=_0x3df63e;if(!SceneManager[_0x5b8317(0x2a9)]())return;if(!Imported[_0x5b8317(0x808)])return;const _0x3302e4=$gameTemp[_0x5b8317(0x5d6)]();if(!_0x3302e4)return;_0x3302e4[_0x5b8317(0x671)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Animation_ActionAnimation',_0x45ae89=>{const _0x30ce3c=_0x3df63e;if(!SceneManager[_0x30ce3c(0x2a9)]())return;VisuMZ[_0x30ce3c(0x368)](_0x45ae89,_0x45ae89);const _0x54526f=$gameTemp['getLastPluginCommandInterpreter'](),_0x118219=BattleManager['_action'],_0x2fc5de=BattleManager[_0x30ce3c(0x8fd)],_0x55efc2=VisuMZ[_0x30ce3c(0x383)](_0x45ae89[_0x30ce3c(0x9f6)]),_0xd4de38=_0x45ae89[_0x30ce3c(0x5fa)],_0x50f7f2=BattleManager['_logWindow'];if(!_0x54526f||!_0x118219||!_0x2fc5de)return;if(!_0x118219[_0x30ce3c(0x918)]())return;let _0x50185b=_0x118219[_0x30ce3c(0x918)]()[_0x30ce3c(0x7fa)];if(_0x50185b<0x0)_0x50185b=_0x2fc5de[_0x30ce3c(0xa93)]();$gameTemp['requestAnimation'](_0x55efc2,_0x50185b,_0xd4de38);if(_0x45ae89['WaitForAnimation']){if(_0x30ce3c(0x55e)===_0x30ce3c(0x55e))_0x54526f['setWaitMode'](_0x30ce3c(0x811));else{if(!_0x856adf[_0x30ce3c(0x2a9)]())return;const _0x3c8ace=_0x18f76c[_0x30ce3c(0x5d6)]();_0x3c8ace[_0x30ce3c(0x671)]('battlelog');}}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x255),_0x2a27be=>{const _0x1d121a=_0x3df63e;if(!SceneManager[_0x1d121a(0x2a9)]())return;VisuMZ[_0x1d121a(0x368)](_0x2a27be,_0x2a27be);const _0x3fe603=$gameTemp[_0x1d121a(0x5d6)](),_0x5079f7=BattleManager[_0x1d121a(0x8fd)],_0x166287=VisuMZ[_0x1d121a(0x383)](_0x2a27be[_0x1d121a(0x9f6)]),_0x55732b=_0x2a27be[_0x1d121a(0x5fa)],_0x65218d=BattleManager[_0x1d121a(0x3fa)];if(!_0x3fe603||!_0x5079f7)return;const _0x2f4daf=_0x5079f7[_0x1d121a(0xa93)]();$gameTemp[_0x1d121a(0x827)](_0x166287,_0x2f4daf,_0x55732b);if(_0x2a27be[_0x1d121a(0x52d)]){if('HvFNx'===_0x1d121a(0x8f9))_0x3fe603[_0x1d121a(0x671)](_0x1d121a(0x811));else{if(this[_0x1d121a(0xb8d)][_0x1d121a(0x19c)])this[_0x1d121a(0xaa7)]=(this[_0x1d121a(0xaa7)]+0x1)%0x4;else this[_0x1d121a(0xaa7)]<0x2?this[_0x1d121a(0xaa7)]++:this['refreshMotion']();this[_0x1d121a(0x943)]=0x0;}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x8d6),_0x32dda2=>{const _0x457c3e=_0x3df63e;if(!SceneManager[_0x457c3e(0x2a9)]())return;VisuMZ[_0x457c3e(0x368)](_0x32dda2,_0x32dda2);const _0x2d8da9=_0x296b8b[_0x457c3e(0x2ae)](_0x32dda2[_0x457c3e(0x892)]);if(_0x2d8da9<=0x0)return;const _0x37ee4c=$gameTemp[_0x457c3e(0x5d6)](),_0x296b8b=BattleManager[_0x457c3e(0x8fd)],_0x2e8416=VisuMZ[_0x457c3e(0x383)](_0x32dda2[_0x457c3e(0x9f6)]),_0x24fff7=_0x32dda2[_0x457c3e(0x5fa)],_0x42945c=BattleManager[_0x457c3e(0x3fa)];if(!_0x37ee4c||!_0x296b8b)return;$gameTemp[_0x457c3e(0x827)](_0x2e8416,_0x2d8da9,_0x24fff7),_0x32dda2[_0x457c3e(0x52d)]&&_0x37ee4c['setWaitMode'](_0x457c3e(0x811));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x961),_0x2e3744=>{const _0x7fa5a5=_0x3df63e;if(!SceneManager[_0x7fa5a5(0x2a9)]())return;VisuMZ['ConvertParams'](_0x2e3744,_0x2e3744);const _0x84e6e2=$gameTemp['getLastPluginCommandInterpreter'](),_0x2fc866=BattleManager[_0x7fa5a5(0xbae)],_0x213ce4=_0x2e3744[_0x7fa5a5(0x5fa)],_0x56171c=VisuMZ['CreateActionSequenceTargets'](_0x2e3744['Targets']);if(!_0x84e6e2||!_0x2fc866)return;if(!_0x2fc866[_0x7fa5a5(0x918)]())return;for(const _0x64a6e5 of _0x56171c){if(!_0x64a6e5)continue;_0x64a6e5[_0x7fa5a5(0x221)](_0x2fc866,_0x213ce4);}if(_0x2e3744[_0x7fa5a5(0x52d)])_0x84e6e2['setWaitMode'](_0x7fa5a5(0x811));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Animation_ChangeBattlePortrait',_0x3175e2=>{const _0x1cfd88=_0x3df63e;VisuMZ[_0x1cfd88(0x368)](_0x3175e2,_0x3175e2);const _0x2b3a96=$gameTemp['getLastPluginCommandInterpreter'](),_0x74eaa3=VisuMZ['CreateActionSequenceTargets'](_0x3175e2['Targets']),_0x466228=_0x3175e2['Filename'];if(!_0x466228)return;for(const _0x25b13c of _0x74eaa3){if(!_0x25b13c)continue;if(!_0x25b13c[_0x1cfd88(0x5c6)]())continue;_0x25b13c[_0x1cfd88(0x8c1)](_0x466228);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x371),_0x11e43c=>{const _0x5a40c5=_0x3df63e;if(!SceneManager[_0x5a40c5(0x8e2)])return;if(!SceneManager['_scene'][_0x5a40c5(0x449)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x5a40c5(0x368)](_0x11e43c,_0x11e43c);const _0xd85121=$gameTemp[_0x5a40c5(0x5d6)](),_0x497968=Math[_0x5a40c5(0x76b)](_0x11e43c[_0x5a40c5(0x71f)]),_0x34bff4=Math[_0x5a40c5(0x76b)](_0x11e43c[_0x5a40c5(0x1b7)]);$gameTemp[_0x5a40c5(0x2a6)](_0x497968,_0x34bff4,_0x11e43c[_0x5a40c5(0x995)],_0x11e43c[_0x5a40c5(0x5fa)],_0x11e43c[_0x5a40c5(0x469)]);if(_0x11e43c[_0x5a40c5(0x175)]&&_0xd85121){if(_0x5a40c5(0x1df)!==_0x5a40c5(0x1df))return _0x50bfd6(_0x5ec754['$1']);else SceneManager[_0x5a40c5(0x8e2)]['_spriteset'][_0x5a40c5(0x217)](),_0xd85121[_0x5a40c5(0x671)]('battleAnimation');}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x24b),_0x470801=>{const _0x1acb20=_0x3df63e;if(!SceneManager[_0x1acb20(0x2a9)]())return;VisuMZ[_0x1acb20(0x368)](_0x470801,_0x470801);const _0x45b668=$gameTemp[_0x1acb20(0x5d6)](),_0x278e6e=VisuMZ['CreateActionSequenceTargets'](_0x470801['Targets']),_0x4e1eca=_0x470801[_0x1acb20(0x995)],_0x1528ce=_0x470801[_0x1acb20(0x5fa)];if(!_0x45b668)return;$gameTemp[_0x1acb20(0x827)](_0x278e6e,_0x4e1eca,_0x1528ce);if(_0x470801[_0x1acb20(0x52d)])_0x45b668[_0x1acb20(0x671)](_0x1acb20(0x811));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x2b5),_0x3bfae7=>{const _0x367fce=_0x3df63e;if(!SceneManager[_0x367fce(0x2a9)]())return;const _0x58b18a=$gameTemp[_0x367fce(0x5d6)]();if(!_0x58b18a)return;_0x58b18a[_0x367fce(0x671)]('battleAnimation');}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x988),_0x44f09f=>{const _0x2a156d=_0x3df63e;if(!SceneManager[_0x2a156d(0x2a9)]())return;VisuMZ[_0x2a156d(0x368)](_0x44f09f,_0x44f09f);const _0x1de176=BattleManager[_0x2a156d(0x3fa)],_0x1e1122=_0x44f09f[_0x2a156d(0x42c)]&&Imported[_0x2a156d(0x741)];_0x1de176[_0x2a156d(0xbbc)](_0x44f09f[_0x2a156d(0x7a9)]),_0x1e1122&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x2a156d(0x216)](_0x44f09f[_0x2a156d(0x7a9)]||'',_0x44f09f['CombatLogIcon']||0x0);}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x3fd),_0x19d3eb=>{const _0x51918b=_0x3df63e;if(!SceneManager[_0x51918b(0x2a9)]())return;const _0x5cb208=BattleManager[_0x51918b(0x3fa)];_0x5cb208[_0x51918b(0x6be)]();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_BattleLog_DisplayAction',_0x5b4e2f=>{const _0x588d10=_0x3df63e;if(!SceneManager[_0x588d10(0x2a9)]())return;const _0x230e56=$gameTemp['getLastPluginCommandInterpreter'](),_0x109ef5=BattleManager[_0x588d10(0xbae)],_0x157dc3=BattleManager[_0x588d10(0x8fd)],_0x11d55c=BattleManager[_0x588d10(0x3fa)];if(!_0x230e56||!_0x109ef5||!_0x157dc3)return;if(!_0x109ef5[_0x588d10(0x918)]())return;_0x11d55c[_0x588d10(0x750)](_0x157dc3,_0x109ef5[_0x588d10(0x918)]()),_0x230e56[_0x588d10(0x671)](_0x588d10(0x379));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x90a),_0x286602=>{const _0x253e69=_0x3df63e;if(!SceneManager[_0x253e69(0x2a9)]())return;const _0x5aacb7=BattleManager[_0x253e69(0x3fa)];_0x5aacb7[_0x253e69(0xba8)]();}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x772),_0x27e2d2=>{const _0x16e9f0=_0x3df63e;if(!SceneManager[_0x16e9f0(0x2a9)]())return;const _0x57ca28=BattleManager['_logWindow'];_0x57ca28[_0x16e9f0(0x980)]();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x424),_0x5c85f6=>{const _0x8912c8=_0x3df63e;if(!SceneManager[_0x8912c8(0x2a9)]())return;const _0x104a8c=BattleManager[_0x8912c8(0x3fa)];_0x104a8c[_0x8912c8(0xbcf)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_UI',_0x2337ef=>{const _0x1a4e04=_0x3df63e;if(!SceneManager[_0x1a4e04(0x2a9)]())return;VisuMZ[_0x1a4e04(0x368)](_0x2337ef,_0x2337ef),SceneManager[_0x1a4e04(0x8e2)][_0x1a4e04(0x45c)](_0x2337ef[_0x1a4e04(0x8a8)]);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x553),_0x164128=>{const _0x1e1170=_0x3df63e;if(!SceneManager['isSceneBattle']())return;const _0x2519c6=$gameTemp[_0x1e1170(0x5d6)]();_0x2519c6[_0x1e1170(0x671)](_0x1e1170(0x379));}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x2ab),_0x4439ab=>{const _0x3408d4=_0x3df63e;if(!SceneManager[_0x3408d4(0x2a9)]())return;const _0x11e2c4=$gameTemp[_0x3408d4(0x5d6)](),_0x4c64a0=BattleManager[_0x3408d4(0x3fa)];_0x4c64a0[_0x3408d4(0x463)](),_0x11e2c4['setWaitMode'](_0x3408d4(0x379));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x2b8),_0x533509=>{const _0x4a6016=_0x3df63e;if(!SceneManager[_0x4a6016(0x2a9)]())return;if(!Imported[_0x4a6016(0x808)])return;VisuMZ[_0x4a6016(0x368)](_0x533509,_0x533509);const _0x56e453=$gameScreen[_0x4a6016(0x2e1)]();_0x56e453[_0x4a6016(0x82a)]=_0x533509[_0x4a6016(0x6cf)];}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x47f),_0x93a87f=>{const _0x20c88a=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x20c88a(0x368)](_0x93a87f,_0x93a87f);const _0x440860=$gameTemp[_0x20c88a(0x5d6)](),_0x51a221=_0x93a87f['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x93a87f['FocusX'],_0x93a87f[_0x20c88a(0x781)],_0x93a87f['Duration'],_0x93a87f[_0x20c88a(0x6dd)]);if(_0x51a221)_0x440860['setWaitMode'](_0x20c88a(0x189));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Camera_FocusTarget',_0x39ddf1=>{const _0x45ae3a=_0x3df63e;if(!SceneManager[_0x45ae3a(0x2a9)]())return;if(!Imported[_0x45ae3a(0x808)])return;VisuMZ[_0x45ae3a(0x368)](_0x39ddf1,_0x39ddf1);const _0x316242=$gameTemp[_0x45ae3a(0x5d6)](),_0x47a19a=VisuMZ[_0x45ae3a(0x383)](_0x39ddf1['Targets']),_0x283dee=_0x39ddf1[_0x45ae3a(0x482)];$gameScreen[_0x45ae3a(0x749)](_0x47a19a,_0x39ddf1[_0x45ae3a(0x88d)],_0x39ddf1[_0x45ae3a(0x6dd)]);if(_0x283dee)_0x316242[_0x45ae3a(0x671)](_0x45ae3a(0x189));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Camera_Offset',_0x14bca5=>{const _0x2d0f66=_0x3df63e;if(!SceneManager[_0x2d0f66(0x2a9)]())return;if(!Imported[_0x2d0f66(0x808)])return;VisuMZ[_0x2d0f66(0x368)](_0x14bca5,_0x14bca5);const _0x4524bc=$gameTemp[_0x2d0f66(0x5d6)](),_0x32ce50=_0x14bca5[_0x2d0f66(0x482)];$gameScreen[_0x2d0f66(0x31b)](_0x14bca5[_0x2d0f66(0x7e9)],_0x14bca5[_0x2d0f66(0x3b3)],_0x14bca5[_0x2d0f66(0x88d)],_0x14bca5[_0x2d0f66(0x6dd)]);if(_0x32ce50)_0x4524bc[_0x2d0f66(0x671)](_0x2d0f66(0x189));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Camera_Reset',_0x2c54eb=>{const _0x561119=_0x3df63e;if(!SceneManager[_0x561119(0x2a9)]())return;if(!Imported[_0x561119(0x808)])return;VisuMZ[_0x561119(0x368)](_0x2c54eb,_0x2c54eb);const _0x36178f=$gameTemp[_0x561119(0x5d6)](),_0x461ecb=_0x2c54eb[_0x561119(0x3f9)],_0x5a89d2=_0x2c54eb[_0x561119(0x4fe)],_0x3517d8=_0x2c54eb[_0x561119(0x482)];if(_0x461ecb){const _0x25db41=Math[_0x561119(0x76b)](Graphics[_0x561119(0x366)]/0x2),_0x55028b=Math[_0x561119(0x76b)](Graphics[_0x561119(0xb78)]/0x2);$gameScreen['setBattleCameraPoint'](_0x25db41,_0x55028b,_0x2c54eb['Duration'],_0x2c54eb[_0x561119(0x6dd)]);}if(_0x5a89d2){if(_0x561119(0x461)!==_0x561119(0x96e))$gameScreen[_0x561119(0x31b)](0x0,0x0,_0x2c54eb[_0x561119(0x88d)],_0x2c54eb[_0x561119(0x6dd)]);else return this[_0x561119(0xadf)]()&&!this['isCustomBattleScope']()?this['needsSelectionBattleCore']():_0x112249[_0x561119(0xa69)][_0x561119(0x506)]['call'](this);}if(_0x3517d8)_0x36178f['setWaitMode'](_0x561119(0x189));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Camera_WaitForCamera',_0x276fec=>{const _0x12b188=_0x3df63e;if(!SceneManager[_0x12b188(0x2a9)]())return;if(!Imported[_0x12b188(0x808)])return;const _0x52966d=$gameTemp[_0x12b188(0x5d6)]();if(!_0x52966d)return;_0x52966d[_0x12b188(0x671)]('battleCamera');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_DB_DragonbonesMotionAni',_0x43c631=>{const _0x170122=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x170122(0x368)](_0x43c631,_0x43c631);const _0x33057e=VisuMZ['CreateActionSequenceTargets'](_0x43c631['Targets']),_0x2d2bf6=_0x43c631['MotionAni'][_0x170122(0x782)]()[_0x170122(0x9d2)]();for(const _0x13cc56 of _0x33057e){if(!_0x13cc56)continue;_0x13cc56[_0x170122(0x493)](_0x2d2bf6);}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x6d1),_0x32382a=>{const _0x1d9330=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d9330(0x219)])return;VisuMZ['ConvertParams'](_0x32382a,_0x32382a);const _0x5d27b9=VisuMZ[_0x1d9330(0x383)](_0x32382a['Targets']),_0x5e831f=_0x32382a['TimeScale'];for(const _0x4c743c of _0x5d27b9){if(_0x1d9330(0x244)===_0x1d9330(0x65e))_0x1a4cc1('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0xdaf4b9,_0x4157b7,_0x109d7d)),_0x4b8e11['exit']();else{if(!_0x4c743c)continue;_0x4c743c[_0x1d9330(0x937)]()[_0x1d9330(0x95b)]=_0x5e831f;}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x2b7),_0x162720=>{const _0x26a294=_0x3df63e;if(!SceneManager[_0x26a294(0x2a9)]())return;if(!Imported[_0x26a294(0x44e)])return;VisuMZ['ConvertParams'](_0x162720,_0x162720);const _0x5dcf78=BattleManager[_0x26a294(0xbae)],_0x6e3aaf=_0x162720['Elements'];if(!_0x5dcf78)return;_0x5dcf78['_battleCoreAddedElements']=_0x6e3aaf;}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x85c),_0x21ebdd=>{const _0x4b5dee=_0x3df63e;if(!SceneManager[_0x4b5dee(0x2a9)]())return;if(!Imported[_0x4b5dee(0x44e)])return;const _0x141a5b=BattleManager[_0x4b5dee(0xbae)];if(!_0x141a5b)return;_0x141a5b[_0x4b5dee(0xaca)]();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x69e),_0x5761e0=>{const _0x479a14=_0x3df63e;if(!SceneManager[_0x479a14(0x2a9)]())return;if(!Imported[_0x479a14(0x44e)])return;VisuMZ[_0x479a14(0x368)](_0x5761e0,_0x5761e0);const _0x52ff07=BattleManager[_0x479a14(0xbae)],_0x3439de=_0x5761e0['Elements'];if(!_0x52ff07)return;_0x52ff07[_0x479a14(0x7d0)]=_0x3439de;}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Element_NullElements',_0x2b6980=>{const _0x80be86=_0x3df63e;if(!SceneManager[_0x80be86(0x2a9)]())return;if(!Imported[_0x80be86(0x44e)])return;const _0x2a8e90=BattleManager[_0x80be86(0xbae)];if(!_0x2a8e90)return;_0x2a8e90[_0x80be86(0x3d4)]=!![];}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_Clear',_0x1149a9=>{const _0x8f3089=_0x3df63e;if(!Imported[_0x8f3089(0x8c8)])return;if(!SceneManager[_0x8f3089(0x2a9)]())return;VisuMZ[_0x8f3089(0x368)](_0x1149a9,_0x1149a9);const _0x566524=VisuMZ['CreateActionSequenceTargets'](_0x1149a9[_0x8f3089(0x9f6)]);for(const _0x49228e of _0x566524){if('VXASJ'===_0x8f3089(0x507))return _0x155f82[_0x8f3089(0x529)]()['filter'](_0x23c423=>_0x23c423!==_0x477b0c);else{if(!_0x49228e)continue;_0x49228e[_0x8f3089(0x764)](_0x8f3089(0x282)),_0x49228e[_0x8f3089(0x764)]('glitch'),_0x49228e[_0x8f3089(0x764)]('tv'),_0x49228e[_0x8f3089(0x644)]();}}$gamePlayer[_0x8f3089(0xbcf)]();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x191),_0x57bed4=>{const _0x190eaf=_0x3df63e;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x190eaf(0x368)](_0x57bed4,_0x57bed4);const _0xa99e9d=VisuMZ[_0x190eaf(0x383)](_0x57bed4[_0x190eaf(0x9f6)]),_0x2c14ab=_0x190eaf(0x3b1);_0x57bed4[_0x190eaf(0xac8)]=Math[_0x190eaf(0x3dd)](_0x57bed4[_0x190eaf(0x3ab)]/0x2),_0x57bed4[_0x190eaf(0x75b)]=_0x57bed4[_0x190eaf(0x3ab)],_0x57bed4[_0x190eaf(0x69c)]=!![];for(const _0x1a71e2 of _0xa99e9d){if(!_0x1a71e2)continue;_0x1a71e2[_0x190eaf(0x78e)](_0x2c14ab,_0x57bed4);}$gamePlayer['refresh']();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Horror_GlitchRemove',_0x1a77c8=>{const _0x353d1c=_0x3df63e;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x353d1c(0x2a9)]())return;VisuMZ[_0x353d1c(0x368)](_0x1a77c8,_0x1a77c8);const _0x5e2fe0=VisuMZ['CreateActionSequenceTargets'](_0x1a77c8[_0x353d1c(0x9f6)]);for(const _0x5b6fc7 of _0x5e2fe0){if(!_0x5b6fc7)continue;_0x5b6fc7[_0x353d1c(0x764)]('glitch');}$gamePlayer[_0x353d1c(0xbcf)]();}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x491),_0x3d28d7=>{const _0x594d9f=_0x3df63e;if(!Imported[_0x594d9f(0x8c8)])return;if(!SceneManager[_0x594d9f(0x2a9)]())return;VisuMZ['ConvertParams'](_0x3d28d7,_0x3d28d7);const _0x58fb57=VisuMZ[_0x594d9f(0x383)](_0x3d28d7[_0x594d9f(0x9f6)]),_0x3f54ef='noise';for(const _0x22a0dd of _0x58fb57){if('veaKi'!==_0x594d9f(0x945)){if(!_0x22a0dd)continue;_0x22a0dd['setHorrorEffectSettings'](_0x3f54ef,_0x3d28d7);}else _0x3174a1['BattleCore'][_0x594d9f(0xaf3)][_0x594d9f(0x5d9)](this,_0x3b3c57);}$gamePlayer['refresh']();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xad9),_0x5aa8c7=>{const _0x18bbfd=_0x3df63e;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x18bbfd(0x2a9)]())return;VisuMZ[_0x18bbfd(0x368)](_0x5aa8c7,_0x5aa8c7);const _0x2eed92=VisuMZ['CreateActionSequenceTargets'](_0x5aa8c7[_0x18bbfd(0x9f6)]);for(const _0x52d0bc of _0x2eed92){if(!_0x52d0bc)continue;_0x52d0bc[_0x18bbfd(0x764)]('noise');}$gamePlayer[_0x18bbfd(0xbcf)]();}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Horror_TVCreate',_0x3aa762=>{const _0x1f945e=_0x3df63e;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3aa762,_0x3aa762);const _0x457828=VisuMZ[_0x1f945e(0x383)](_0x3aa762[_0x1f945e(0x9f6)]),_0x1cad0e='tv';for(const _0x14a7dc of _0x457828){if(_0x1f945e(0xb5f)===_0x1f945e(0xbad))_0x1477a9=_0x1f945e(0x7b6);else{if(!_0x14a7dc)continue;_0x14a7dc['setHorrorEffectSettings'](_0x1cad0e,_0x3aa762);}}$gamePlayer[_0x1f945e(0xbcf)]();}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x536),_0x8c8f8f=>{const _0x39c45a=_0x3df63e;if(!Imported[_0x39c45a(0x8c8)])return;if(!SceneManager[_0x39c45a(0x2a9)]())return;VisuMZ['ConvertParams'](_0x8c8f8f,_0x8c8f8f);const _0x2850fe=VisuMZ['CreateActionSequenceTargets'](_0x8c8f8f[_0x39c45a(0x9f6)]);for(const _0x4dab10 of _0x2850fe){if(_0x39c45a(0xa98)===_0x39c45a(0x73c))this['_actorCommandWindow'][_0x39c45a(0xb51)]();else{if(!_0x4dab10)continue;_0x4dab10['removeHorrorEffect']('tv');}}$gamePlayer['refresh']();}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4ce),_0x945353=>{const _0x429f98=_0x3df63e;if(!SceneManager[_0x429f98(0x2a9)]())return;if(!Imported[_0x429f98(0x963)])return;const _0x585bff=SceneManager[_0x429f98(0x8e2)][_0x429f98(0x449)];if(!_0x585bff)return;VisuMZ['ConvertParams'](_0x945353,_0x945353);const _0x3057a4=_0x945353[_0x429f98(0xb04)]||0x1,_0x492d43=_0x945353[_0x429f98(0x88d)]||0x1,_0x11382e=_0x945353[_0x429f98(0x6dd)]||_0x429f98(0x25d);_0x585bff[_0x429f98(0x7ba)](_0x3057a4,_0x492d43,_0x11382e);}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Impact_MotionBlurScreen',_0x2dca80=>{const _0x1cbab9=_0x3df63e;if(!SceneManager[_0x1cbab9(0x2a9)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x205edd=SceneManager[_0x1cbab9(0x8e2)][_0x1cbab9(0x449)];if(!_0x205edd)return;VisuMZ[_0x1cbab9(0x368)](_0x2dca80,_0x2dca80);const _0x5378db=Number(_0x2dca80[_0x1cbab9(0x681)])||0x0,_0x56f64b=Number(_0x2dca80[_0x1cbab9(0xb0b)]),_0x518a12=_0x2dca80['Duration']||0x1,_0x426df9=_0x2dca80[_0x1cbab9(0x6dd)]||_0x1cbab9(0x25d);_0x205edd[_0x1cbab9(0x58b)](_0x5378db,_0x56f64b,_0x518a12,_0x426df9);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xa1f),_0x48d77d=>{const _0x233442=_0x3df63e;if(!SceneManager[_0x233442(0x2a9)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1a6bd4=SceneManager['_scene']['_spriteset'];if(!_0x1a6bd4)return;VisuMZ[_0x233442(0x368)](_0x48d77d,_0x48d77d);const _0x5d4fe4=Number(_0x48d77d['Angle'])||0x0,_0x2e350e=Number(_0x48d77d[_0x233442(0xb0b)]),_0x53f126=_0x48d77d[_0x233442(0x88d)]||0x1,_0xad372a=_0x48d77d[_0x233442(0x6dd)]||_0x233442(0x25d),_0x4084ea=VisuMZ[_0x233442(0x383)](_0x48d77d[_0x233442(0x9f6)]);for(const _0x543aca of _0x4084ea){if(_0x233442(0xa59)!==_0x233442(0x362)){if(!_0x543aca)continue;if(!_0x543aca[_0x233442(0x669)]())continue;_0x543aca[_0x233442(0x669)]()[_0x233442(0x58b)](_0x5d4fe4,_0x2e350e,_0x53f126,_0xad372a);}else _0x52d17c['bitmap']=_0x20b848[_0x233442(0x5e5)](_0x5f5b22);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x859),_0x3a607f=>{const _0x5b0935=_0x3df63e;if(!SceneManager[_0x5b0935(0x2a9)]())return;if(!Imported[_0x5b0935(0x963)])return;VisuMZ[_0x5b0935(0x368)](_0x3a607f,_0x3a607f);const _0x1ad849={'delay':_0x3a607f[_0x5b0935(0x646)],'duration':_0x3a607f['duration'],'hue':_0x3a607f['hue'],'opacityStart':_0x3a607f[_0x5b0935(0x7e8)],'tone':_0x3a607f['tone'],'visible':!![]},_0x45eec1=VisuMZ[_0x5b0935(0x383)](_0x3a607f[_0x5b0935(0x9f6)]);for(const _0x53ecf6 of _0x45eec1){if(_0x5b0935(0x84f)!=='zcaKw'){if(!_0x53ecf6)continue;_0x53ecf6[_0x5b0935(0x434)](_0x1ad849);}else return _0x2dfb0a[_0x5b0935(0x529)]()[_0x5b0935(0xaaa)](_0x15e22f=>_0x15e22f!==_0x269328);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Impact_MotionTrailRemove',_0x1775bc=>{const _0x5f4a2=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x5f4a2(0x368)](_0x1775bc,_0x1775bc);const _0x1017d1=VisuMZ[_0x5f4a2(0x383)](_0x1775bc['Targets']);for(const _0x19c558 of _0x1017d1){if('NHWRD'!==_0x5f4a2(0x6b9))this[_0x5f4a2(0x74e)](_0x5f4a2(0x838));else{if(!_0x19c558)continue;_0x19c558[_0x5f4a2(0x95d)]();}}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb50),_0x40c232=>{const _0x3a3893=_0x3df63e;if(!Imported[_0x3a3893(0x963)])return;const _0x5deb33=SceneManager[_0x3a3893(0x8e2)][_0x3a3893(0x449)];if(!_0x5deb33)return;VisuMZ[_0x3a3893(0x368)](_0x40c232,_0x40c232);const _0x113529=_0x40c232['X']||0x0,_0x184f22=_0x40c232['Y']||0x0,_0xd57fb2=_0x40c232[_0x3a3893(0xa5b)]||0x0,_0x340a1c=_0x40c232[_0x3a3893(0xaf2)]||0x0,_0x5302d0=_0x40c232['Duration']||0x1;_0x5deb33['setupShockwaveImpactFilter'](_0x113529,_0x184f22,_0xd57fb2,_0x340a1c,_0x5302d0);}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x70e),_0x20899e=>{const _0xb98713=_0x3df63e;if(!SceneManager[_0xb98713(0x2a9)]())return;if(!Imported[_0xb98713(0x963)])return;const _0x5be24e=SceneManager[_0xb98713(0x8e2)][_0xb98713(0x449)];if(!_0x5be24e)return;VisuMZ[_0xb98713(0x368)](_0x20899e,_0x20899e);const _0x2394ba=VisuMZ[_0xb98713(0x383)](_0x20899e['Targets']),_0x34be18=_0x20899e[_0xb98713(0x1f3)],_0x1fd688=_0x20899e['OffsetX']||0x0,_0xde374c=_0x20899e[_0xb98713(0x3b3)]||0x0,_0x565071=_0x20899e[_0xb98713(0xa5b)]||0x0,_0xf27118=_0x20899e[_0xb98713(0xaf2)]||0x0,_0x4b5ce0=_0x20899e['Duration']||0x1;for(const _0x1affff of _0x2394ba){if(_0xb98713(0xae1)===_0xb98713(0xae1)){if(!_0x1affff)continue;if(!_0x1affff[_0xb98713(0x669)]())continue;const _0x34d666=_0x1affff[_0xb98713(0x669)]();let _0x26ac3a=_0x34d666['_baseX'],_0x3bc431=_0x34d666['_baseY'];_0x26ac3a+=(Graphics[_0xb98713(0x366)]-Graphics[_0xb98713(0x8b9)])/0x2,_0x3bc431+=(Graphics[_0xb98713(0xb78)]-Graphics[_0xb98713(0x3ed)])/0x2;if(_0x34be18['match'](/front/i))_0x26ac3a+=(_0x1affff['isEnemy']()?0x1:-0x1)*_0x34d666[_0xb98713(0xaa0)]()/0x2;else _0x34be18[_0xb98713(0x64e)](/back/i)&&(_0x26ac3a+=(_0x1affff[_0xb98713(0xaad)]()?-0x1:0x1)*_0x34d666['mainSpriteWidth']()/0x2);if(_0x34be18['match'](/head/i)){if(_0xb98713(0x84b)===_0xb98713(0x84b))_0x3bc431-=_0x34d666['mainSpriteHeight']();else{if(_0x103a80===_0x19b03e['deathStateId']()){let _0xcd111b=_0x8c1b2c[_0xb98713(0xa62)];_0xcd111b*=_0x4b0a58[_0xb98713(0x4ab)](_0x4c2752),_0xcd111b*=this['subject']()['attackStatesRate'](_0x11fb1a),_0xcd111b*=this[_0xb98713(0x56b)](_0x3472c6),_0x5e16fc[_0xb98713(0x9eb)]()<_0xcd111b&&(_0x4ddf2c['_deathStateApplied']=!![],this[_0xb98713(0x332)](_0x11d027));}}}else _0x34be18[_0xb98713(0x64e)](/center/i)&&(_0x3bc431-=_0x34d666[_0xb98713(0x1cf)]()/0x2);_0x26ac3a+=_0x1fd688,_0x3bc431+=_0xde374c,_0x5be24e['setupShockwaveImpactFilter'](_0x26ac3a,_0x3bc431,_0x565071,_0xf27118,_0x4b5ce0);}else return[_0x1d1b31];}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x178),_0x1cea2e=>{const _0x184d9f=_0x3df63e;if(!SceneManager[_0x184d9f(0x2a9)]())return;if(!Imported[_0x184d9f(0x963)])return;const _0x5d57e2=SceneManager[_0x184d9f(0x8e2)]['_spriteset'];if(!_0x5d57e2)return;VisuMZ[_0x184d9f(0x368)](_0x1cea2e,_0x1cea2e);const _0x51f7ce=VisuMZ[_0x184d9f(0x383)](_0x1cea2e['Targets']),_0x17c1bb=_0x1cea2e[_0x184d9f(0x1f3)],_0x9f786b=_0x1cea2e['OffsetX']||0x0,_0x567dd0=_0x1cea2e[_0x184d9f(0x3b3)]||0x0,_0x427cd1=_0x1cea2e[_0x184d9f(0xa5b)]||0x0,_0x1c750f=_0x1cea2e[_0x184d9f(0xaf2)]||0x0,_0x5620d6=_0x1cea2e[_0x184d9f(0x88d)]||0x1,_0x3afd68=Math[_0x184d9f(0x46d)](..._0x51f7ce[_0x184d9f(0x3a8)](_0x47c1ae=>_0x47c1ae[_0x184d9f(0x669)]()[_0x184d9f(0x924)]-_0x47c1ae[_0x184d9f(0x669)]()[_0x184d9f(0xaa0)]()/0x2)),_0x28debe=Math[_0x184d9f(0x7a7)](..._0x51f7ce['map'](_0x17f9f9=>_0x17f9f9[_0x184d9f(0x669)]()['_baseX']+_0x17f9f9[_0x184d9f(0x669)]()['mainSpriteWidth']()/0x2)),_0x46787=Math['min'](..._0x51f7ce[_0x184d9f(0x3a8)](_0x327703=>_0x327703[_0x184d9f(0x669)]()[_0x184d9f(0x560)]-_0x327703[_0x184d9f(0x669)]()['mainSpriteHeight']())),_0x3d741f=Math[_0x184d9f(0x7a7)](..._0x51f7ce[_0x184d9f(0x3a8)](_0xda1597=>_0xda1597['battler']()[_0x184d9f(0x560)])),_0x28b4d4=_0x51f7ce[_0x184d9f(0xaaa)](_0x491bfb=>_0x491bfb[_0x184d9f(0x5c6)]())[_0x184d9f(0xb02)],_0x4653e1=_0x51f7ce[_0x184d9f(0xaaa)](_0x3fecb7=>_0x3fecb7['isEnemy']())[_0x184d9f(0xb02)];let _0x19c686=0x0,_0x42d7e0=0x0;if(_0x17c1bb[_0x184d9f(0x64e)](/front/i))_0x19c686=_0x28b4d4>=_0x4653e1?_0x3afd68:_0x28debe;else{if(_0x17c1bb[_0x184d9f(0x64e)](/middle/i)){if(_0x184d9f(0x573)!==_0x184d9f(0x573)){const _0x4e5a6f=_0x70b0e9[_0x184d9f(0x76b)](_0x3cae15[_0x184d9f(0x366)]/0x2),_0x4224f0=_0x34dd3a[_0x184d9f(0x76b)](_0xaafdb8['height']/0x2);_0x129215[_0x184d9f(0xa54)](_0x4e5a6f,_0x4224f0,_0x3edfd4[_0x184d9f(0x88d)],_0x55babe['EasingType']);}else _0x19c686=(_0x3afd68+_0x28debe)/0x2,melee=-0x1;}else _0x17c1bb[_0x184d9f(0x64e)](/back/i)&&(_0x19c686=_0x28b4d4>=_0x4653e1?_0x28debe:_0x3afd68);}if(_0x17c1bb[_0x184d9f(0x64e)](/head/i))_0x42d7e0=_0x46787;else{if(_0x17c1bb[_0x184d9f(0x64e)](/center/i)){if(_0x184d9f(0x24a)!==_0x184d9f(0xad1))_0x42d7e0=(_0x46787+_0x3d741f)/0x2;else{if(!_0x2c5e0f['_scene'])return;if(!_0x383d1c[_0x184d9f(0x8e2)][_0x184d9f(0x449)])return;if(!_0x3d8f83[_0x184d9f(0x1ec)])return;_0x1ab833[_0x184d9f(0x368)](_0x5d2414,_0x447610);const _0x1163ae=_0x35b42d['getLastPluginCommandInterpreter'](),_0x15d628=_0x295f71[_0x184d9f(0x76b)](_0x37a254[_0x184d9f(0x71f)]),_0x2d7471=_0x4f1aa9[_0x184d9f(0x76b)](_0x2cf8b7[_0x184d9f(0x1b7)]);_0x175fa1[_0x184d9f(0x2a6)](_0x15d628,_0x2d7471,_0x259309[_0x184d9f(0x995)],_0x260391[_0x184d9f(0x5fa)],_0x161093[_0x184d9f(0x469)]),_0x398522[_0x184d9f(0x175)]&&_0x1163ae&&(_0x1d14f7[_0x184d9f(0x8e2)][_0x184d9f(0x449)][_0x184d9f(0x217)](),_0x1163ae[_0x184d9f(0x671)](_0x184d9f(0x811)));}}else _0x17c1bb[_0x184d9f(0x64e)](/base/i)&&('YaWQw'===_0x184d9f(0x359)?_0x50a2d0[_0x184d9f(0x8e2)]['_statusWindow'][_0x184d9f(0x393)](_0x2aca20):_0x42d7e0=_0x3d741f);}_0x19c686+=(Graphics[_0x184d9f(0x366)]-Graphics['boxWidth'])/0x2,_0x42d7e0+=(Graphics[_0x184d9f(0xb78)]-Graphics[_0x184d9f(0x3ed)])/0x2,_0x19c686+=_0x9f786b,_0x42d7e0+=_0x567dd0,_0x5d57e2['setupShockwaveImpactFilter'](_0x19c686,_0x42d7e0,_0x427cd1,_0x1c750f,_0x5620d6);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x93e),_0x523c81=>{const _0x3f1c19=_0x3df63e;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3c5eee=SceneManager[_0x3f1c19(0x8e2)]['_spriteset'];if(!_0x3c5eee)return;VisuMZ[_0x3f1c19(0x368)](_0x523c81,_0x523c81);const _0xbf774e=_0x523c81['X']||0x0,_0x461089=_0x523c81['Y']||0x0,_0x6a784b=_0x523c81[_0x3f1c19(0x49c)]||0x0,_0x136e34=_0x523c81[_0x3f1c19(0xacd)]||0x0,_0x599f4a=_0x523c81[_0x3f1c19(0x88d)]||0x1,_0x19e6e9=_0x523c81[_0x3f1c19(0x6dd)]||'Linear';_0x3c5eee[_0x3f1c19(0x484)](_0x6a784b,_0xbf774e,_0x461089,_0x136e34,_0x599f4a,_0x19e6e9);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x2fe),_0x5b9e0f=>{const _0x44e901=_0x3df63e;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3215f3=SceneManager[_0x44e901(0x8e2)]['_spriteset'];if(!_0x3215f3)return;VisuMZ[_0x44e901(0x368)](_0x5b9e0f,_0x5b9e0f);const _0x1bfeaa=VisuMZ[_0x44e901(0x383)](_0x5b9e0f[_0x44e901(0x9f6)]),_0xa39d4d=_0x5b9e0f[_0x44e901(0x1f3)],_0x55b333=_0x5b9e0f[_0x44e901(0x7e9)]||0x0,_0xc405ec=_0x5b9e0f[_0x44e901(0x3b3)]||0x0,_0x58df92=_0x5b9e0f[_0x44e901(0x49c)]||0x0,_0x364abe=_0x5b9e0f[_0x44e901(0xacd)]||0x0,_0x385f39=_0x5b9e0f[_0x44e901(0x88d)]||0x1,_0x30587e=_0x5b9e0f['EasingType']||_0x44e901(0x25d),_0x3807a1=Math[_0x44e901(0x46d)](..._0x1bfeaa[_0x44e901(0x3a8)](_0x4941d0=>_0x4941d0[_0x44e901(0x669)]()[_0x44e901(0x924)]-_0x4941d0[_0x44e901(0x669)]()[_0x44e901(0xaa0)]()/0x2)),_0x3faf90=Math[_0x44e901(0x7a7)](..._0x1bfeaa[_0x44e901(0x3a8)](_0xedf098=>_0xedf098['battler']()[_0x44e901(0x924)]+_0xedf098[_0x44e901(0x669)]()['mainSpriteWidth']()/0x2)),_0x19ad3a=Math[_0x44e901(0x46d)](..._0x1bfeaa[_0x44e901(0x3a8)](_0x434554=>_0x434554[_0x44e901(0x669)]()['_baseY']-_0x434554[_0x44e901(0x669)]()[_0x44e901(0x1cf)]())),_0x48a687=Math['max'](..._0x1bfeaa[_0x44e901(0x3a8)](_0x5db258=>_0x5db258[_0x44e901(0x669)]()[_0x44e901(0x560)])),_0x4111d0=_0x1bfeaa[_0x44e901(0xaaa)](_0x1921bb=>_0x1921bb[_0x44e901(0x5c6)]())['length'],_0x2d0744=_0x1bfeaa['filter'](_0x1b2a48=>_0x1b2a48[_0x44e901(0xaad)]())[_0x44e901(0xb02)];let _0xabf8df=0x0,_0x415201=0x0;if(_0xa39d4d[_0x44e901(0x64e)](/front/i))_0xabf8df=_0x4111d0>=_0x2d0744?_0x3807a1:_0x3faf90;else{if(_0xa39d4d[_0x44e901(0x64e)](/middle/i))_0xabf8df=(_0x3807a1+_0x3faf90)/0x2,melee=-0x1;else _0xa39d4d[_0x44e901(0x64e)](/back/i)&&('iyRRd'!==_0x44e901(0x89a)?_0xabf8df=_0x4111d0>=_0x2d0744?_0x3faf90:_0x3807a1:(this[_0x44e901(0xb0a)](),this[_0x44e901(0xbcc)](),_0x1c3a05[_0x44e901(0x655)]['_createClientArea'][_0x44e901(0x5d9)](this),this[_0x44e901(0x934)]()));}if(_0xa39d4d['match'](/head/i))_0x415201=_0x19ad3a;else{if(_0xa39d4d[_0x44e901(0x64e)](/center/i))_0x415201=(_0x19ad3a+_0x48a687)/0x2;else _0xa39d4d[_0x44e901(0x64e)](/base/i)&&(_0x44e901(0x166)===_0x44e901(0x3be)?(_0x24eb1c[_0x44e901(0xa69)][_0x44e901(0x884)]&&_0x2eb919['BattleCore'][_0x44e901(0x884)][_0x44e901(0x5d9)](this,_0x1a29f7),_0x59bdc1[_0x44e901(0xa69)]['Parse_Notetags_TraitObjects'](_0x1c20c1)):_0x415201=_0x48a687);}_0xabf8df+=(Graphics[_0x44e901(0x366)]-Graphics[_0x44e901(0x8b9)])/0x2,_0x415201+=(Graphics['height']-Graphics[_0x44e901(0x3ed)])/0x2,_0xabf8df+=_0x55b333,_0x415201+=_0xc405ec,_0x3215f3[_0x44e901(0x484)](_0x58df92,_0xabf8df,_0x415201,_0x364abe,_0x385f39,_0x30587e);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x5b9),_0x1a8e7a=>{const _0x24203d=_0x3df63e;if(!SceneManager[_0x24203d(0x2a9)]())return;VisuMZ[_0x24203d(0x368)](_0x1a8e7a,_0x1a8e7a);const _0x4dcaec=$gameTemp['getLastPluginCommandInterpreter'](),_0x100efd=BattleManager[_0x24203d(0xbae)],_0x50d536=BattleManager[_0x24203d(0x8fd)],_0x3e66d8=BattleManager['_logWindow'];if(!_0x4dcaec||!_0x100efd||!_0x50d536)return;if(!_0x100efd[_0x24203d(0x918)]())return;const _0x33e9d4=VisuMZ[_0x24203d(0x383)](_0x1a8e7a[_0x24203d(0x9f6)]);for(const _0x4ace5e of _0x33e9d4){if(!_0x4ace5e)continue;_0x3e66d8[_0x24203d(0x9cd)]('actionEffect',_0x50d536,_0x4ace5e);}_0x4dcaec['setWaitMode']('battlelog');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x846),_0x13a554=>{const _0x3d31c1=_0x3df63e;if(!SceneManager[_0x3d31c1(0x2a9)]())return;VisuMZ[_0x3d31c1(0x368)](_0x13a554,_0x13a554);const _0x1a9b6e=['MAXHP',_0x3d31c1(0x647),_0x3d31c1(0x1a0),_0x3d31c1(0x783),_0x3d31c1(0x8b8),_0x3d31c1(0x40c),'AGI','LUK'],_0x1e144a=_0x13a554[_0x3d31c1(0x83f)],_0x2231ea=_0x13a554[_0x3d31c1(0x810)],_0x364076=_0x13a554[_0x3d31c1(0x2cb)],_0x8fbbdc=VisuMZ['CreateActionSequenceTargets'](_0x13a554['Targets']);for(const _0x5de94e of _0x8fbbdc){if(!_0x5de94e)continue;for(const _0x18b080 of _0x1e144a){const _0x8d3a3e=_0x1a9b6e[_0x3d31c1(0x246)](_0x18b080[_0x3d31c1(0x17c)]()[_0x3d31c1(0x9d2)]());if(_0x8d3a3e>=0x0&&_0x8d3a3e<=0x7){if(_0x3d31c1(0x1fb)!==_0x3d31c1(0x426))_0x5de94e[_0x3d31c1(0x738)](_0x8d3a3e,_0x364076);else{const _0x4e592c=_0x1fc099['isActor']()?_0x383686[_0x3d31c1(0x201)]:_0xd32e1d['message2'];_0x4e592c&&_0x5464e2[_0x3d31c1(0xa69)][_0x3d31c1(0x5eb)][_0x3d31c1(0x642)][_0x3d31c1(0x381)]&&(this[_0x3d31c1(0x9cd)](_0x3d31c1(0xba8)),this[_0x3d31c1(0x9cd)]('pushBaseLine'),this['push']('addText',_0x4e592c[_0x3d31c1(0x4f8)](_0xbd71ac[_0x3d31c1(0xae2)]())),this[_0x3d31c1(0x9cd)](_0x3d31c1(0x779))),_0x2a3d46['id']===_0xeb9a9e[_0x3d31c1(0x693)]()&&this[_0x3d31c1(0x9cd)](_0x3d31c1(0x327),_0x19788b);}}}for(const _0x9b5d5a of _0x2231ea){if(_0x3d31c1(0x6b7)!==_0x3d31c1(0x1b9)){const _0x2012ff=_0x1a9b6e['indexOf'](_0x9b5d5a[_0x3d31c1(0x17c)]()[_0x3d31c1(0x9d2)]());_0x2012ff>=0x0&&_0x2012ff<=0x7&&_0x5de94e['addDebuff'](_0x2012ff,_0x364076);}else{_0x557153[_0x3d31c1(0x655)][_0x3d31c1(0x1d7)][_0x3d31c1(0x5d9)](this);if(!_0x52b90f[_0x3d31c1(0x8e3)]())this[_0x3d31c1(0xbcf)]();}}}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x4ed),_0x29071e=>{const _0x2f2dc3=_0x3df63e;if(!SceneManager[_0x2f2dc3(0x2a9)]())return;VisuMZ['ConvertParams'](_0x29071e,_0x29071e);const _0x59d23d=_0x29071e[_0x2f2dc3(0x30c)],_0x4f9aa3=VisuMZ[_0x2f2dc3(0x383)](_0x29071e['Targets']);for(const _0x371169 of _0x4f9aa3){if(!_0x371169)continue;for(const _0x35c35a of _0x59d23d){_0x2f2dc3(0x767)!=='cBctW'?this[_0x2f2dc3(0x9bf)][_0x2f2dc3(0x9cd)](_0x3faf89):_0x371169[_0x2f2dc3(0x9be)](_0x35c35a);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x5af4a9=>{const _0x344fb0=_0x3df63e;if(!SceneManager[_0x344fb0(0x2a9)]())return;VisuMZ[_0x344fb0(0x368)](_0x5af4a9,_0x5af4a9);const _0x124187=BattleManager['_action'],_0x9f0f4f={'arPenRate':_0x5af4a9[_0x344fb0(0x1ba)],'arPenFlat':_0x5af4a9[_0x344fb0(0x2de)],'arRedRate':_0x5af4a9['ArRedRate'],'arRedFlat':_0x5af4a9[_0x344fb0(0xa95)]};_0x124187[_0x344fb0(0x7f6)]=_0x9f0f4f;}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x958),_0x3a04ef=>{const _0x47b92b=_0x3df63e;if(!SceneManager[_0x47b92b(0x2a9)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x3a04ef,_0x3a04ef);const _0x2714db=VisuMZ[_0x47b92b(0x383)](_0x3a04ef['Targets']),_0x6ab545=_0x3a04ef['Reveal']||0x1;for(const _0x499654 of _0x2714db){if(!_0x499654)continue;if(!_0x499654['isEnemy']())continue;_0x499654['revealNewWeaknesses'](_0x6ab545);}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Mechanics_AtbGauge',_0x4d1cca=>{const _0x23fa04=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x23fa04(0x922)])return;if(!BattleManager[_0x23fa04(0x668)]())return;VisuMZ[_0x23fa04(0x368)](_0x4d1cca,_0x4d1cca);const _0x3cb339=VisuMZ[_0x23fa04(0x383)](_0x4d1cca[_0x23fa04(0x9f6)]),_0x144dcf=_0x4d1cca[_0x23fa04(0x2a2)],_0x27724f=_0x4d1cca['ChargeRate'],_0x376ee3=_0x4d1cca[_0x23fa04(0x853)];for(const _0x13cd06 of _0x3cb339){if(!_0x13cd06)continue;if(_0x13cd06['isAtbChargingState']())_0x23fa04(0x7ff)===_0x23fa04(0x956)?(_0x354485[_0x23fa04(0x655)]['start'][_0x23fa04(0x5d9)](this),this['_spriteset']&&this['_spriteset'][_0x23fa04(0x54e)](),_0x20b7a2['_tpbSceneChangeCacheActor']&&_0xacb4e1['revertTpbCachedActor']()):_0x13cd06[_0x23fa04(0x5ab)](_0x144dcf);else{if(_0x13cd06[_0x23fa04(0x76c)]()){if(_0x23fa04(0xb7a)===_0x23fa04(0x1bd))this['_damageContainer']=new _0x24bc75(),this[_0x23fa04(0x8ad)]['x']=this[_0x23fa04(0x9ee)]['x'],this[_0x23fa04(0x8ad)]['y']=this[_0x23fa04(0x9ee)]['y'],this[_0x23fa04(0x699)](this[_0x23fa04(0x8ad)]);else{_0x13cd06[_0x23fa04(0xb9d)](_0x27724f);if(_0x376ee3)_0x13cd06[_0x23fa04(0x1ff)]();}}}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x67b),_0x5aceac=>{const _0x3c9c37=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3c9c37(0x919)])return;VisuMZ['ConvertParams'](_0x5aceac,_0x5aceac);const _0x3d1e00=VisuMZ['CreateActionSequenceTargets'](_0x5aceac[_0x3c9c37(0x9f6)]),_0x101e87=_0x5aceac[_0x3c9c37(0x23c)];for(const _0x1ab4de of _0x3d1e00){if(_0x3c9c37(0x1c9)==='brxSU')return _0x1d3ef8['VisuMZ_0_CoreEngine']?_0x14a2b8[_0x3c9c37(0x624)]('cancel'):_0x4ff651[_0x3c9c37(0xa69)]['Settings']['AutoBattle'][_0x3c9c37(0x33e)];else{if(!_0x1ab4de)continue;_0x1ab4de['gainStoredBoostPoints'](_0x101e87);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x78a),_0x1af5b4=>{const _0x2e1615=_0x3df63e;if(!SceneManager[_0x2e1615(0x2a9)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x2e1615(0x8fd)])return;VisuMZ[_0x2e1615(0x368)](_0x1af5b4,_0x1af5b4);const _0x2787fb=_0x1af5b4[_0x2e1615(0x4d5)];$gameVariables[_0x2e1615(0x3a0)](_0x2787fb,BattleManager[_0x2e1615(0x8fd)][_0x2e1615(0xa35)]());}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x545474=>{const _0xb38377=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb38377(0x6fe)])return;VisuMZ[_0xb38377(0x368)](_0x545474,_0x545474);const _0x460038=VisuMZ[_0xb38377(0x383)](_0x545474['Targets']),_0x4409dc=_0x545474[_0xb38377(0x6ee)];for(const _0x5b25d1 of _0x460038){if(_0xb38377(0x42b)==='iBGzX')return this['battlerSprites']()[_0xb38377(0x25c)](_0x55de10=>_0x55de10[_0xb38377(0x6d2)]());else{if(!_0x5b25d1)continue;if(_0x5b25d1[_0xb38377(0xb6d)]())continue;if(!_0x5b25d1['isAffectedByBreakShield']())continue;_0x5b25d1['alterBreakShield'](_0x4409dc);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x68e),_0x525164=>{const _0x17f162=_0x3df63e;if(!SceneManager[_0x17f162(0x2a9)]())return;if(!Imported[_0x17f162(0x6fe)])return;VisuMZ[_0x17f162(0x368)](_0x525164,_0x525164);const _0x52bfad=VisuMZ[_0x17f162(0x383)](_0x525164[_0x17f162(0x9f6)]);for(const _0xee47ef of _0x52bfad){if(!_0xee47ef)continue;if(_0xee47ef[_0x17f162(0xb6d)]())continue;if(!_0xee47ef[_0x17f162(0x7e2)]())continue;_0xee47ef[_0x17f162(0x1fd)]();}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb17),_0x587201=>{const _0x515449=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x515449(0x9a2)])return;if(!BattleManager[_0x515449(0xa2f)]())return;VisuMZ[_0x515449(0x368)](_0x587201,_0x587201);const _0x3dd60e=VisuMZ[_0x515449(0x383)](_0x587201[_0x515449(0x9f6)]),_0x9f031d=_0x587201[_0x515449(0x679)];for(const _0x3f95ab of _0x3dd60e){if('nXzWz'!=='nXzWz'){_0x2fef9b['prototype'][_0x515449(0x5ea)][_0x515449(0x5d9)](this);const _0x33d9f8=this[_0x515449(0x331)][_0x515449(0x99b)]();this['_battlerName']!==_0x33d9f8&&(this['_battlerName']=_0x33d9f8,this[_0x515449(0x620)]['bitmap']=_0x337f8b[_0x515449(0x92d)](_0x33d9f8)),this[_0x515449(0x620)]&&this[_0x515449(0x620)][_0x515449(0xa39)]&&this['_battler']&&(this[_0x515449(0x620)]['bitmap']['smooth']!==this[_0x515449(0x957)][_0x515449(0x5d4)]()&&(this['_mainSprite'][_0x515449(0xa39)][_0x515449(0x4f6)]=this[_0x515449(0x957)]['battlerSmoothImage']()));}else{if(!_0x3f95ab)continue;_0x3f95ab[_0x515449(0xa4b)](_0x9f031d);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x241),_0x1ace54=>{const _0x57fbc1=_0x3df63e;if(!SceneManager[_0x57fbc1(0x2a9)]())return;VisuMZ[_0x57fbc1(0x368)](_0x1ace54,_0x1ace54);const _0x48d84f=$gameTemp[_0x57fbc1(0x5d6)](),_0x159070=BattleManager[_0x57fbc1(0xbae)],_0x4606eb=BattleManager[_0x57fbc1(0x8fd)];if(!_0x48d84f||!_0x159070||!_0x4606eb)return;if(!_0x159070[_0x57fbc1(0x918)]())return;const _0x36bb78=VisuMZ[_0x57fbc1(0x383)](_0x1ace54[_0x57fbc1(0x9f6)]);for(const _0x1b0a94 of _0x36bb78){if(!_0x1b0a94)continue;_0x1ace54[_0x57fbc1(0x1b0)]&&(_0x1b0a94[_0x57fbc1(0xbd1)](),_0x1b0a94['addState'](_0x1b0a94[_0x57fbc1(0x693)]())),_0x1b0a94[_0x57fbc1(0x412)]()&&('aIOvW'===_0x57fbc1(0x91a)?this[_0x57fbc1(0x299)]():_0x1b0a94['performCollapse']());}_0x48d84f[_0x57fbc1(0x671)](_0x57fbc1(0xba2));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4aa),_0x4b11d1=>{const _0x3b9188=_0x3df63e;if(!SceneManager[_0x3b9188(0x2a9)]())return;if(!Imported[_0x3b9188(0x627)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x3b9188(0x368)](_0x4b11d1,_0x4b11d1);const _0x116ea1=VisuMZ[_0x3b9188(0x383)](_0x4b11d1[_0x3b9188(0x9f6)]),_0x57a5fd=_0x4b11d1[_0x3b9188(0xae9)];for(const _0x405fcd of _0x116ea1){if('SARdF'===_0x3b9188(0x1fc)){if(!_0x405fcd)continue;_0x405fcd['changeTurnOrderByCTB'](_0x57a5fd);}else this[_0x3b9188(0x7ab)](_0x5abce1,_0x94cbff['x'],_0x15aaa6['y'],_0x45eb74);}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x621),_0x581cc2=>{const _0x347537=_0x3df63e;if(!SceneManager[_0x347537(0x2a9)]())return;if(!Imported[_0x347537(0x627)])return;if(!BattleManager[_0x347537(0xb4a)]())return;VisuMZ['ConvertParams'](_0x581cc2,_0x581cc2);const _0x15cc3a=VisuMZ[_0x347537(0x383)](_0x581cc2[_0x347537(0x9f6)]),_0x83c3ac=_0x581cc2['ChargeRate'],_0xff9442=_0x581cc2[_0x347537(0x2a2)];for(const _0x23fd3c of _0x15cc3a){if(_0x347537(0x438)===_0x347537(0x438)){if(!_0x23fd3c)continue;if(_0x23fd3c[_0x347537(0x5c2)]==='charging')_0x23fd3c[_0x347537(0x9da)](_0x83c3ac);else _0x23fd3c[_0x347537(0x5c2)]===_0x347537(0x6b3)&&_0x23fd3c[_0x347537(0x27d)](_0xff9442);}else return _0x274636[_0x347537(0xaaa)](_0xbbf14c=>_0xbbf14c['isAlive']());}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x446),_0x105388=>{const _0x51a786=_0x3df63e;if(!SceneManager[_0x51a786(0x2a9)]())return;VisuMZ['ConvertParams'](_0x105388,_0x105388);const _0x460314=BattleManager[_0x51a786(0xbae)];if(!_0x460314)return;let _0x54ed5c=_0x105388['Formula'];_0x460314['setCustomDamageFormula'](_0x54ed5c);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x2e6),_0x486928=>{const _0x327802=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x327802(0x368)](_0x486928,_0x486928);const _0x1b633f=VisuMZ[_0x327802(0x383)](_0x486928[_0x327802(0x9f6)]);for(const _0x4ec76d of _0x1b633f){if(_0x327802(0xa1b)==='UmXhX'){if(!_0x4ec76d)continue;if(_0x4ec76d[_0x327802(0x30a)]())_0x4ec76d[_0x327802(0xb9a)]();}else _0x13ffb8[_0x327802(0xa69)]['ParseSkillNotetags']['call'](this,_0x3adf76);}}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x1e2),_0x388813=>{const _0x355b51=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x355b51(0x368)](_0x388813,_0x388813);const _0x5c50e7=$gameTemp[_0x355b51(0x5d6)](),_0x11a0f7=BattleManager[_0x355b51(0x8fd)],_0xb70fed=_0x388813[_0x355b51(0x966)];if(!_0x5c50e7)return;if(!_0x11a0f7)return;_0x11a0f7&&_0x11a0f7[_0x355b51(0x9a0)]()&&_0xb70fed[_0x355b51(0x17c)]()[_0x355b51(0x9d2)]()!==_0x355b51(0x59e)&&_0x5c50e7[_0x355b51(0x2f3)]([_0xb70fed]);}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x1e6),_0x42da94=>{const _0x5c0d9a=_0x3df63e;if(!SceneManager[_0x5c0d9a(0x2a9)]())return;VisuMZ[_0x5c0d9a(0x368)](_0x42da94,_0x42da94);const _0x34d874=VisuMZ['CreateActionSequenceTargets'](_0x42da94['Targets']);for(const _0x1f0fc5 of _0x34d874){if(!_0x1f0fc5)continue;if(!_0x1f0fc5[_0x5c0d9a(0xaad)]())continue;_0x1f0fc5[_0x5c0d9a(0xada)]();}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Mechanics_EtbAction',_0x4f0188=>{const _0x129f32=_0x3df63e;if(!SceneManager[_0x129f32(0x2a9)]())return;if(!Imported[_0x129f32(0x714)])return;if(!BattleManager[_0x129f32(0xa9b)]())return;VisuMZ['ConvertParams'](_0x4f0188,_0x4f0188);const _0x4bbb20=_0x4f0188[_0x129f32(0x257)];if(BattleManager[_0x129f32(0x8fd)]){if('ueGRT'!=='CBwAI')BattleManager[_0x129f32(0x8fd)][_0x129f32(0x5b6)]()[_0x129f32(0x786)](_0x4bbb20);else{const _0x13d2fe=this[_0x129f32(0x918)]()[_0x129f32(0x8f4)];return _0x13d2fe['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xa2e),_0x367e99=>{const _0x29c6ec=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29c6ec(0x5e2)])return;if(!BattleManager[_0x29c6ec(0x8e0)]())return;VisuMZ[_0x29c6ec(0x368)](_0x367e99,_0x367e99);const _0x481dcb=_0x367e99[_0x29c6ec(0x257)];if(BattleManager['_subject']){if(_0x29c6ec(0x2f8)===_0x29c6ec(0x2f8))BattleManager['_subject']['friendsUnit']()[_0x29c6ec(0x407)](_0x481dcb);else{if(!_0xf5611d[_0x29c6ec(0x8e3)]()&&this[_0x29c6ec(0x1da)]===_0x42dffb){const _0x27d87c=_0x2b3562[_0x29c6ec(0x655)]['battleLayoutStyle']();[_0x29c6ec(0xbb7),'list',_0x29c6ec(0xbc2),'border'][_0x29c6ec(0xa22)](_0x27d87c)&&(this[_0x29c6ec(0x7a6)]=0x0);}}}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xacf),_0xcb709b=>{const _0x2a3b9e=_0x3df63e;if(!SceneManager[_0x2a3b9e(0x2a9)]())return;VisuMZ[_0x2a3b9e(0x368)](_0xcb709b,_0xcb709b);const _0x4d8b98=VisuMZ[_0x2a3b9e(0x383)](_0xcb709b[_0x2a3b9e(0x9f6)]),_0x4dbb52=_0xcb709b[_0x2a3b9e(0x8f6)],_0x54edd8=_0xcb709b[_0x2a3b9e(0xa16)],_0x1adf78=_0xcb709b[_0x2a3b9e(0xb1a)],_0x36d96b=_0xcb709b[_0x2a3b9e(0x822)],_0x329c59=_0xcb709b[_0x2a3b9e(0x744)],_0x4af380=_0xcb709b['TP_Flat'],_0x3efd43=_0xcb709b[_0x2a3b9e(0x2db)];for(const _0xa29776 of _0x4d8b98){if(_0x2a3b9e(0x5fe)!==_0x2a3b9e(0x6a6)){if(!_0xa29776)continue;const _0x3ef20b=_0xa29776[_0x2a3b9e(0x8fc)](),_0x1e8449=Math[_0x2a3b9e(0x76b)](_0x4dbb52*_0xa29776[_0x2a3b9e(0x4b0)]+_0x54edd8),_0x2a858e=Math[_0x2a3b9e(0x76b)](_0x1adf78*_0xa29776[_0x2a3b9e(0x7a0)]+_0x36d96b),_0x399f1b=Math[_0x2a3b9e(0x76b)](_0x329c59*_0xa29776[_0x2a3b9e(0xbb4)]()+_0x4af380);if(_0x1e8449!==0x0)_0xa29776['gainHp'](_0x1e8449);if(_0x2a858e!==0x0)_0xa29776[_0x2a3b9e(0x39c)](_0x2a858e);if(_0x399f1b!==0x0)_0xa29776[_0x2a3b9e(0x572)](_0x399f1b);if(_0x3efd43)_0xa29776['startDamagePopup']();_0x3ef20b&&_0xa29776[_0x2a3b9e(0x9a0)]()&&_0xa29776[_0x2a3b9e(0x327)]();}else return _0x1c785a['BattleCore']['Scene_Battle_skillWindowRect'][_0x2a3b9e(0x5d9)](this);}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4c4),_0x38b407=>{const _0x4e5556=_0x3df63e;if(!SceneManager[_0x4e5556(0x2a9)]())return;VisuMZ[_0x4e5556(0x368)](_0x38b407,_0x38b407);const _0x3f068d=VisuMZ[_0x4e5556(0x383)](_0x38b407[_0x4e5556(0x9f6)]);for(const _0x5905b5 of _0x3f068d){if(!_0x5905b5)continue;_0x5905b5[_0x4e5556(0x21b)](_0x38b407[_0x4e5556(0x77f)]);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x76d),_0x3bc8a4=>{const _0x36c0a2=_0x3df63e;if(!SceneManager[_0x36c0a2(0x2a9)]())return;VisuMZ[_0x36c0a2(0x368)](_0x3bc8a4,_0x3bc8a4);const _0x5e8123=BattleManager[_0x36c0a2(0xbae)],_0x518075={'criticalHitRate':_0x3bc8a4[_0x36c0a2(0x63c)],'criticalHitFlat':_0x3bc8a4['CriticalHitFlat'],'criticalDmgRate':_0x3bc8a4[_0x36c0a2(0x8a5)],'criticalDmgFlat':_0x3bc8a4[_0x36c0a2(0xa37)],'damageRate':_0x3bc8a4[_0x36c0a2(0x373)],'damageFlat':_0x3bc8a4[_0x36c0a2(0xab6)],'hitRate':_0x3bc8a4['HitRate'],'hitFlat':_0x3bc8a4[_0x36c0a2(0x5e6)]};_0x5e8123[_0x36c0a2(0x82c)]=_0x518075;}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Mechanics_OtbOrder',_0x131c49=>{const _0x204d0e=_0x3df63e;if(!SceneManager[_0x204d0e(0x2a9)]())return;if(!Imported[_0x204d0e(0x840)])return;if(!BattleManager[_0x204d0e(0x57d)]())return;VisuMZ[_0x204d0e(0x368)](_0x131c49,_0x131c49);const _0x366f79=VisuMZ[_0x204d0e(0x383)](_0x131c49[_0x204d0e(0x9f6)]);for(const _0x1948ed of _0x366f79){if(!_0x1948ed)continue;let _0x43475b=_0x131c49[_0x204d0e(0x62e)],_0x479942=_0x131c49[_0x204d0e(0x263)],_0x4bd140=_0x131c49[_0x204d0e(0x77e)];BattleManager[_0x204d0e(0x9c5)][_0x204d0e(0xa22)](_0x1948ed)?_0x43475b+=_0x4bd140:_0x479942+=_0x4bd140,BattleManager[_0x204d0e(0x83c)](_0x1948ed,-_0x43475b,![]),BattleManager[_0x204d0e(0x83c)](_0x1948ed,-_0x479942,!![]);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x803),_0x6cb386=>{const _0x5bcda2=_0x3df63e;if(!SceneManager[_0x5bcda2(0x2a9)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5bcda2(0x543)]())return;VisuMZ[_0x5bcda2(0x368)](_0x6cb386,_0x6cb386);const _0x440e88=BattleManager[_0x5bcda2(0x8fd)]['friendsUnit'](),_0x3bc5c3=_0x6cb386[_0x5bcda2(0xbd7)],_0xfadf23=_0x6cb386[_0x5bcda2(0xa3e)]||_0x5bcda2(0x89d),_0x4c779c=_0x6cb386[_0x5bcda2(0x391)]||'unchanged',_0x47290a=_0x6cb386[_0x5bcda2(0x53f)]||0x0,_0x23e263=_0x6cb386[_0x5bcda2(0xa5a)]||0x0;(_0x440e88[_0x5bcda2(0x346)]()||_0x3bc5c3)&&(_0x5bcda2(0x570)!==_0x5bcda2(0x570)?(_0x3c0e4c['BattleCore']['Settings']['HpGauge'][_0x5bcda2(0x176)]&&this[_0x5bcda2(0x471)](),_0x1a4f7f['BattleCore'][_0x5bcda2(0xb7f)][_0x5bcda2(0x5d9)](this)):(_0x3bc5c3&&(_0x440e88[_0x5bcda2(0x58a)]=_0x440e88['_ptbActionCost']||{},_0x440e88[_0x5bcda2(0x58a)][_0x5bcda2(0x65b)]=0x0),_0x440e88[_0x5bcda2(0x798)](_0xfadf23,_0x4c779c,_0x47290a,_0x23e263)));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x5bb),_0x2b9d5c=>{const _0x4e88f4=_0x3df63e;if(!SceneManager[_0x4e88f4(0x2a9)]())return;if(!Imported[_0x4e88f4(0xb0f)])return;if(!BattleManager[_0x4e88f4(0x543)]())return;VisuMZ[_0x4e88f4(0x368)](_0x2b9d5c,_0x2b9d5c);const _0x139e56=BattleManager[_0x4e88f4(0x8fd)][_0x4e88f4(0x5b6)]();let _0x29743d=Math['max'](_0x2b9d5c[_0x4e88f4(0xa55)],0x0),_0x3d2250=_0x139e56[_0x4e88f4(0x79f)](),_0x50714c=_0x139e56['getHalfActionsPTB']();while(_0x29743d--){if(_0x3d2250<=0x0&&_0x50714c<=0x0)break;else _0x3d2250>0x0?(_0x3d2250--,_0x50714c++):'cUsGW'===_0x4e88f4(0x2d1)?this[_0x4e88f4(0x2ce)][_0x4e88f4(0x1d7)]():_0x50714c--;}_0x139e56['setFullActionsPTB'](_0x3d2250),_0x139e56[_0x4e88f4(0x83e)](_0x50714c);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x8d8),_0x185bce=>{const _0x47ed4e=_0x3df63e;if(!SceneManager[_0x47ed4e(0x2a9)]())return;if(!Imported[_0x47ed4e(0xb0f)])return;if(!BattleManager[_0x47ed4e(0x543)]())return;VisuMZ['ConvertParams'](_0x185bce,_0x185bce);const _0x2608e7=BattleManager[_0x47ed4e(0x8fd)][_0x47ed4e(0x5b6)]();let _0x4c8467=_0x185bce[_0x47ed4e(0x33b)],_0x129eec=_0x185bce[_0x47ed4e(0x6e4)];_0x2608e7[_0x47ed4e(0x392)](_0x4c8467),_0x2608e7[_0x47ed4e(0x9d5)](_0x129eec);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb25),_0x1c508e=>{const _0x4ef8e4=_0x3df63e;if(!SceneManager[_0x4ef8e4(0x2a9)]())return;VisuMZ[_0x4ef8e4(0x368)](_0x1c508e,_0x1c508e);const _0x182436=[_0x4ef8e4(0x6a2),_0x4ef8e4(0x647),_0x4ef8e4(0x1a0),_0x4ef8e4(0x783),_0x4ef8e4(0x8b8),_0x4ef8e4(0x40c),_0x4ef8e4(0x98c),_0x4ef8e4(0xb53)],_0x54f446=_0x1c508e[_0x4ef8e4(0x83f)],_0x3948bb=_0x1c508e[_0x4ef8e4(0x810)],_0x4c2b8e=VisuMZ[_0x4ef8e4(0x383)](_0x1c508e[_0x4ef8e4(0x9f6)]);for(const _0x186170 of _0x4c2b8e){if(!_0x186170)continue;for(const _0x25aea7 of _0x54f446){if(_0x4ef8e4(0x29d)!==_0x4ef8e4(0x29d))this['setBattlerFlip'](![]);else{const _0x278e31=_0x182436[_0x4ef8e4(0x246)](_0x25aea7[_0x4ef8e4(0x17c)]()[_0x4ef8e4(0x9d2)]());_0x278e31>=0x0&&_0x278e31<=0x7&&_0x186170[_0x4ef8e4(0x29f)](_0x278e31)&&_0x186170[_0x4ef8e4(0x1ab)](_0x278e31);}}for(const _0x9e2713 of _0x3948bb){const _0x5bf802=_0x182436[_0x4ef8e4(0x246)](_0x9e2713['toUpperCase']()['trim']());_0x5bf802>=0x0&&_0x5bf802<=0x7&&_0x186170[_0x4ef8e4(0x872)](_0x5bf802)&&(_0x4ef8e4(0x232)==='FMOkM'?_0x186170['removeBuff'](_0x5bf802):_0xf9f83b=_0x2cea40>=_0x14d8a5?_0x541dde:_0x49cf5a);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xbbd),_0xda189b=>{const _0x388da5=_0x3df63e;if(!SceneManager[_0x388da5(0x2a9)]())return;VisuMZ[_0x388da5(0x368)](_0xda189b,_0xda189b);const _0x5aaa8f=_0xda189b[_0x388da5(0x30c)],_0x36378c=VisuMZ[_0x388da5(0x383)](_0xda189b[_0x388da5(0x9f6)]);for(const _0x1c1afa of _0x36378c){if(!_0x1c1afa)continue;for(const _0x4b1680 of _0x5aaa8f){_0x1c1afa['removeState'](_0x4b1680);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Mechanics_StbExploit',_0x26ad80=>{const _0x339985=_0x3df63e;if(!SceneManager[_0x339985(0x2a9)]())return;if(!Imported[_0x339985(0x300)])return;if(!BattleManager[_0x339985(0x8bd)]())return;VisuMZ['ConvertParams'](_0x26ad80,_0x26ad80);const _0x29eb64=_0x26ad80[_0x339985(0xb90)],_0x300908=VisuMZ[_0x339985(0x383)](_0x26ad80[_0x339985(0x9f6)]),_0x647c08=_0x26ad80[_0x339985(0x660)],_0x262031=_0x26ad80[_0x339985(0x39e)],_0x2489e2=_0x26ad80[_0x339985(0x5af)],_0x4142c8=BattleManager['_action'];if(_0x29eb64)for(const _0x5a3491 of _0x300908){if(!_0x5a3491)continue;if(_0x5a3491===user)continue;if(_0x647c08)_0x5a3491['setSTBExploited'](![]);_0x5a3491[_0x339985(0xa79)](BattleManager['_subject'],_0x4142c8);}if(_0x262031&&BattleManager['_subject']){if(_0x339985(0xb76)!=='njsiq'){if(_0x2489e2)BattleManager['_subject'][_0x339985(0xb3e)](![]);const _0x300a1a=_0x300908[0x0];BattleManager[_0x339985(0x8fe)](_0x300a1a,_0x4142c8);}else{const _0x4e824f=this['battleLayoutStyle']();if(_0x6cf872&&['xp','portrait'][_0x339985(0xa22)](_0x4e824f))this[_0x339985(0x717)](_0x4a9e03);else _0x90ff35&&[_0x339985(0x84a)][_0x339985(0xa22)](_0x4e824f)&&(this[_0x339985(0x197)](_0x1d9f85),this['showHelpWindow']());_0x2350ad['BattleCore'][_0x339985(0x768)][_0x339985(0x5d9)](this,_0x32ff78),_0x17b9b7&&_0x4ba844[_0x339985(0x529)]()[_0x339985(0xb02)]>0x0&&_0x54d836[_0x339985(0x669)]()&&_0x154b68[_0x339985(0x669)]()['stepForward']();}}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x789),_0x20999f=>{const _0x24ba8c=_0x3df63e;if(!SceneManager[_0x24ba8c(0x2a9)]())return;if(!Imported[_0x24ba8c(0x300)])return;if(!BattleManager[_0x24ba8c(0x8bd)]())return;VisuMZ[_0x24ba8c(0x368)](_0x20999f,_0x20999f);const _0x2c6b01=_0x20999f[_0x24ba8c(0x425)];BattleManager['_subject']&&BattleManager[_0x24ba8c(0x8fd)][_0x24ba8c(0xb1e)](_0x2c6b01);}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x2a61d0=>{const _0x2e7d2b=_0x3df63e;if(!SceneManager[_0x2e7d2b(0x2a9)]())return;if(!Imported[_0x2e7d2b(0x300)])return;if(!BattleManager[_0x2e7d2b(0x8bd)]())return;VisuMZ['ConvertParams'](_0x2a61d0,_0x2a61d0);let _0x546399=_0x2a61d0[_0x2e7d2b(0x425)];if(BattleManager[_0x2e7d2b(0x8fd)]){BattleManager[_0x2e7d2b(0x8fd)][_0x2e7d2b(0x758)]=BattleManager['_subject']['_actions']||[];while(_0x546399--){if(BattleManager[_0x2e7d2b(0x8fd)]['_actions'][_0x2e7d2b(0xb02)]<=0x0)break;BattleManager[_0x2e7d2b(0x8fd)][_0x2e7d2b(0x758)][_0x2e7d2b(0x6b4)]();}}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x886),_0x2ccf4a=>{const _0x3bf414=_0x3df63e;if(!SceneManager[_0x3bf414(0x2a9)]())return;if(!Imported[_0x3bf414(0x60f)])return;VisuMZ[_0x3bf414(0x368)](_0x2ccf4a,_0x2ccf4a);const _0x55d441=VisuMZ[_0x3bf414(0x383)](_0x2ccf4a[_0x3bf414(0x9f6)]),_0x100575=_0x2ccf4a[_0x3bf414(0x81a)];for(const _0x4d6e97 of _0x55d441){if(_0x3bf414(0x70d)!==_0x3bf414(0x87a)){if(!_0x4d6e97)continue;if(!_0x4d6e97[_0x3bf414(0x5c6)]())continue;_0x4d6e97[_0x3bf414(0x86c)](_0x100575);}else _0x55bc89+=_0x232f89,_0x3e4b32+=_0x3ba02a;}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb77),_0x4815ae=>{const _0xcdc56d=_0x3df63e;if(!SceneManager[_0xcdc56d(0x2a9)]())return;VisuMZ['ConvertParams'](_0x4815ae,_0x4815ae);const _0x296dfd=VisuMZ[_0xcdc56d(0x383)](_0x4815ae[_0xcdc56d(0x9f6)]),_0x626810=_0x4815ae[_0xcdc56d(0x7a9)],_0x1eb2a3={'textColor':ColorManager[_0xcdc56d(0x34c)](_0x4815ae[_0xcdc56d(0xa06)]),'flashColor':_0x4815ae['FlashColor'],'flashDuration':_0x4815ae['FlashDuration']};for(const _0xc2ba21 of _0x296dfd){if(!_0xc2ba21)continue;_0xc2ba21[_0xcdc56d(0x868)](_0x626810,_0x1eb2a3);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4f1),_0x5a7a40=>{const _0x3c20e5=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3c20e5(0x368)](_0x5a7a40,_0x5a7a40);const _0x52b1bb=VisuMZ[_0x3c20e5(0x383)](_0x5a7a40['Targets']);let _0xe9bcb4=$gameVariables[_0x3c20e5(0xa53)](_0x5a7a40[_0x3c20e5(0x5da)]);if(Imported[_0x3c20e5(0x1ec)]&&_0x5a7a40[_0x3c20e5(0x59c)]){if(_0x3c20e5(0x914)!=='EBKFw'){const _0x518532=_0x336d75['BattleCore'][_0x3c20e5(0x5eb)][_0x3c20e5(0x580)];this[_0x3c20e5(0x6ec)]=_0x518532['AttackAnimation'],this[_0x3c20e5(0x204)]={};}else _0xe9bcb4=VisuMZ['GroupDigits'](_0xe9bcb4);}const _0x53c933=String(_0xe9bcb4),_0x4eff0a={'textColor':ColorManager['getColor'](_0x5a7a40[_0x3c20e5(0xa06)]),'flashColor':_0x5a7a40['FlashColor'],'flashDuration':_0x5a7a40[_0x3c20e5(0x2ff)]};for(const _0x2187ca of _0x52b1bb){if('qkelj'===_0x3c20e5(0x8c2))_0x5348d3=[_0x3c20e5(0xb45),_0x3c20e5(0x628),_0x3c20e5(0x576)][_0x25df45[_0x3c20e5(0x3ad)]]||_0x3c20e5(0x628);else{if(!_0x2187ca)continue;_0x2187ca[_0x3c20e5(0x868)](_0x53c933,_0x4eff0a);}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x584),_0x1da612=>{const _0xbc5a28=_0x3df63e;if(!SceneManager[_0xbc5a28(0x2a9)]())return;const _0x3a18e5=$gameTemp[_0xbc5a28(0x5d6)]();if(!_0x3a18e5)return;_0x3a18e5[_0xbc5a28(0x671)](_0xbc5a28(0xba2));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x9b3),_0x58ba37=>{const _0x220ba9=_0x3df63e;if(!SceneManager[_0x220ba9(0x2a9)]())return;VisuMZ['ConvertParams'](_0x58ba37,_0x58ba37);const _0x24b3f5=VisuMZ[_0x220ba9(0x383)](_0x58ba37[_0x220ba9(0x9f6)]);for(const _0x447acb of _0x24b3f5){if('LkXuZ'!==_0x220ba9(0x74a))_0x31499d[_0x220ba9(0xa69)][_0x220ba9(0x9f8)][_0x220ba9(0x5d9)](this,_0x220a14);else{if(!_0x447acb)continue;_0x447acb[_0x220ba9(0xb11)]();}}}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Motion_FreezeMotionFrame',_0x1e3c24=>{const _0x155a35=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x155a35(0x368)](_0x1e3c24,_0x1e3c24);const _0x31c04b=VisuMZ[_0x155a35(0x383)](_0x1e3c24[_0x155a35(0x9f6)]),_0x39cd6c=_0x1e3c24[_0x155a35(0x5f8)][_0x155a35(0x782)]()[_0x155a35(0x9d2)](),_0x4c074f=_0x1e3c24[_0x155a35(0xaf4)],_0x372e28=_0x1e3c24['Frame'];for(const _0x165b45 of _0x31c04b){if(!_0x165b45)continue;_0x165b45['freezeMotion'](_0x39cd6c,_0x4c074f,_0x372e28);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4c3),_0x477dfa=>{const _0xa19b24=_0x3df63e;if(!SceneManager[_0xa19b24(0x2a9)]())return;VisuMZ[_0xa19b24(0x368)](_0x477dfa,_0x477dfa);const _0x18cbb0=VisuMZ[_0xa19b24(0x383)](_0x477dfa[_0xa19b24(0x9f6)]),_0x299bc4=_0x477dfa[_0xa19b24(0x5f8)][_0xa19b24(0x782)]()['trim'](),_0x82440=_0x477dfa[_0xa19b24(0xaf4)];for(const _0x2acaf5 of _0x18cbb0){if(!_0x2acaf5)continue;if(_0x299bc4[_0xa19b24(0x64e)](/ATTACK[ ](\d+)/i))_0x2acaf5['performAttackSlot'](Number(RegExp['$1']));else _0x299bc4===_0xa19b24(0x7fc)?_0x2acaf5[_0xa19b24(0xb49)]():_0x2acaf5[_0xa19b24(0x80b)](_0x299bc4);if(!_0x82440)'zmbOH'!==_0xa19b24(0x7a3)?_0x2acaf5[_0xa19b24(0x23b)](0x0):(_0x576c9a(_0xa19b24(0x86b)[_0xa19b24(0x4f8)](_0x89f960,_0x3ff2bf)),_0x48cecb[_0xa19b24(0x566)]());else{if(_0x82440&&['thrust',_0xa19b24(0x628),_0xa19b24(0xb7d)][_0xa19b24(0xa22)](_0x299bc4)){}}}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x1d1),_0x12843d=>{const _0x5beecb=_0x3df63e;if(!SceneManager[_0x5beecb(0x2a9)]())return;VisuMZ['ConvertParams'](_0x12843d,_0x12843d);const _0x2a25a4=BattleManager[_0x5beecb(0xbae)];if(!_0x2a25a4)return;if(!_0x2a25a4[_0x5beecb(0x918)]())return;const _0x389cd9=VisuMZ['CreateActionSequenceTargets'](_0x12843d[_0x5beecb(0x9f6)]);for(const _0x35309a of _0x389cd9){if(!_0x35309a)continue;_0x35309a[_0x5beecb(0x64f)](_0x2a25a4);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x878),_0x185c88=>{const _0x278f12=_0x3df63e;if(!SceneManager[_0x278f12(0x2a9)]())return;VisuMZ['ConvertParams'](_0x185c88,_0x185c88);const _0x2d3bb3=VisuMZ[_0x278f12(0x383)](_0x185c88[_0x278f12(0x9f6)]);for(const _0x40e641 of _0x2d3bb3){if(!_0x40e641)continue;if(!_0x40e641[_0x278f12(0x669)]())continue;_0x40e641[_0x278f12(0x669)]()[_0x278f12(0x35b)]();}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x562),_0x3fba2d=>{const _0x5d7026=_0x3df63e;if(!SceneManager[_0x5d7026(0x2a9)]())return;VisuMZ[_0x5d7026(0x368)](_0x3fba2d,_0x3fba2d);const _0x4e4b5d=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ba1f1=_0x3fba2d[_0x5d7026(0x7b5)]*Sprite_Battler[_0x5d7026(0x7e3)];_0x4e4b5d['wait'](_0x3ba1f1);}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x61d),_0x57562f=>{const _0x191392=_0x3df63e;if(!SceneManager[_0x191392(0x2a9)]())return;VisuMZ[_0x191392(0x368)](_0x57562f,_0x57562f);const _0x25fefc=$gameTemp[_0x191392(0x5d6)](),_0x3425b8=BattleManager['_action'];if(!_0x25fefc||!_0x3425b8)return;if(!_0x3425b8[_0x191392(0x918)]())return;const _0x4d4aac=VisuMZ[_0x191392(0x383)](_0x57562f[_0x191392(0x9f6)]);for(const _0x23d803 of _0x4d4aac){if(_0x191392(0xaf9)!=='RCCEr'){if(!_0x23d803)continue;_0x23d803[_0x191392(0x638)](_0x3425b8);}else _0x5844e7[_0x191392(0x8e2)][_0x191392(0x449)][_0x191392(0x217)](),_0x5c261a['setWaitMode'](_0x191392(0x811));}if(_0x57562f[_0x191392(0x2e3)])_0x25fefc[_0x191392(0x671)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0x30f),_0x505bd0=>{const _0x48fd5b=_0x3df63e;if(!SceneManager[_0x48fd5b(0x2a9)]())return;if(!$gameSystem[_0x48fd5b(0x8e3)]())return;VisuMZ[_0x48fd5b(0x368)](_0x505bd0,_0x505bd0);const _0x4fa792=VisuMZ[_0x48fd5b(0x383)](_0x505bd0[_0x48fd5b(0x9f6)]);let _0x549805=_0x505bd0[_0x48fd5b(0x583)][_0x48fd5b(0x64e)](/back/i);for(const _0x1084a7 of _0x4fa792){if(_0x48fd5b(0xaa3)===_0x48fd5b(0xaa3)){if(!_0x1084a7)continue;if(_0x505bd0['Direction']['match'](/rand/i))_0x549805=Math[_0x48fd5b(0xa4d)](0x2);_0x1084a7[_0x48fd5b(0x390)](!!_0x549805);}else _0x5e0600=this['_baseLineStack'][this[_0x48fd5b(0x8e9)][_0x48fd5b(0xb02)]-0x1];}}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xa1c),_0x9441f=>{const _0x580543=_0x3df63e;if(!SceneManager[_0x580543(0x2a9)]())return;if(!$gameSystem[_0x580543(0x8e3)]())return;VisuMZ[_0x580543(0x368)](_0x9441f,_0x9441f);const _0xa85b1b=VisuMZ[_0x580543(0x383)](_0x9441f[_0x580543(0x9f6)]);let _0x3ebae0=_0x9441f[_0x580543(0x6b6)];const _0x4511de=_0x9441f[_0x580543(0x5b0)];for(const _0x3b84f5 of _0xa85b1b){if(!_0x3b84f5)continue;let _0x3954ab=_0x3b84f5[_0x580543(0x669)]()['_baseX'],_0x4feabb=_0x3b84f5[_0x580543(0x669)]()[_0x580543(0x560)];if(_0x3ebae0['match'](/home/i))_0x3954ab=_0x3b84f5[_0x580543(0x669)]()[_0x580543(0xa7d)],_0x4feabb=_0x3b84f5[_0x580543(0x669)]()[_0x580543(0x17f)];else{if(_0x3ebae0[_0x580543(0x64e)](/center/i)){if(_0x580543(0x48b)===_0x580543(0x48b))_0x3954ab=Graphics[_0x580543(0x8b9)]/0x2,_0x4feabb=Graphics['boxHeight']/0x2;else{const _0x25e5ea=_0x1d74dd[_0x580543(0x45f)];if(_0x25e5ea[_0x580543(0x64e)](_0x35d4de[_0x580543(0xa69)][_0x580543(0x45a)][_0x4c9202])){const _0x5efea0=_0x45171a['$1'],_0x4416c1=_0x580543(0x97c)['format'](_0x5efea0),_0x53fef1=_0x1f0c51[_0x580543(0xa69)][_0x580543(0x3c1)](_0x36784c,_0xae25fa);_0x134a83[_0x580543(0xa69)]['JS'][_0x53fef1]=new _0x23525e(_0x4416c1);}}}else _0x3ebae0[_0x580543(0x64e)](/point (\d+), (\d+)/i)&&(_0x3954ab=Number(RegExp['$1']),_0x4feabb=Number(RegExp['$2']));}_0x3b84f5[_0x580543(0xb6f)](Math[_0x580543(0x76b)](_0x3954ab),Math[_0x580543(0x76b)](_0x4feabb),!!_0x4511de);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4a8),_0x3969b3=>{const _0x213ace=_0x3df63e;if(!SceneManager[_0x213ace(0x2a9)]())return;if(!$gameSystem[_0x213ace(0x8e3)]())return;VisuMZ[_0x213ace(0x368)](_0x3969b3,_0x3969b3);const _0x463a4d=VisuMZ['CreateActionSequenceTargets'](_0x3969b3[_0x213ace(0xb9f)]),_0x1187e4=VisuMZ[_0x213ace(0x383)](_0x3969b3['Targets2']),_0x24b530=_0x1187e4[_0x213ace(0x3a8)](_0x1914fa=>_0x1914fa&&_0x1914fa[_0x213ace(0x669)]()?_0x1914fa[_0x213ace(0x669)]()[_0x213ace(0x924)]:0x0)/(_0x1187e4['length']||0x1),_0x41abdc=_0x1187e4['map'](_0x3ac4d2=>_0x3ac4d2&&_0x3ac4d2[_0x213ace(0x669)]()?_0x3ac4d2['battler']()[_0x213ace(0x560)]:0x0)/(_0x1187e4[_0x213ace(0xb02)]||0x1),_0x2695f5=_0x3969b3['FaceAway'];for(const _0x515094 of _0x463a4d){if(!_0x515094)continue;_0x515094[_0x213ace(0xb6f)](Math['round'](_0x24b530),Math[_0x213ace(0x76b)](_0x41abdc),!!_0x2695f5);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x993),_0x84867e=>{const _0x50b033=_0x3df63e;if(!SceneManager[_0x50b033(0x2a9)]())return;VisuMZ[_0x50b033(0x368)](_0x84867e,_0x84867e);const _0x15ab46=$gameTemp['getLastPluginCommandInterpreter'](),_0x207153=VisuMZ[_0x50b033(0x383)](_0x84867e[_0x50b033(0x9f6)]),_0x248694=_0x84867e[_0x50b033(0x71a)],_0x52a5e3=_0x84867e[_0x50b033(0x88d)],_0x3e59dd=_0x84867e[_0x50b033(0x6dd)],_0xb37af6=_0x84867e['WaitForFloat'];if(!_0x15ab46)return;for(const _0x10aa65 of _0x207153){if(_0x50b033(0x65d)!==_0x50b033(0x165)){if(!_0x10aa65)continue;_0x10aa65['floatBattler'](_0x248694,_0x52a5e3,_0x3e59dd);}else{const _0x127ecd=_0x3bdc88['prototype'][_0x50b033(0xa65)]()*0x2+0x4;let _0x135cec=_0x4be5b8[_0x50b033(0x8b9)]-_0x127ecd;_0x5a1573[_0x50b033(0x1ec)]&&_0x2233df['isSideButtonLayout']()&&(_0x135cec+=_0x127ecd);const _0x63046b=this[_0x50b033(0x745)](),_0x4b2bd5=_0x212ca0[_0x50b033(0x3ed)]-_0x63046b-this[_0x50b033(0x375)]()[_0x50b033(0xb78)]+_0x228d79[_0x50b033(0x655)][_0x50b033(0x8a2)](),_0x557162=0x0;return new _0x2a193c(_0x557162,_0x63046b,_0x135cec,_0x4b2bd5);}}if(_0xb37af6)_0x15ab46[_0x50b033(0x671)](_0x50b033(0x587));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x6fd),_0x4a5ee4=>{const _0x15e730=_0x3df63e;if(!SceneManager[_0x15e730(0x2a9)]())return;VisuMZ['ConvertParams'](_0x4a5ee4,_0x4a5ee4);const _0x3e510b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3e510b)return;const _0x27ce50=VisuMZ[_0x15e730(0x383)](_0x4a5ee4[_0x15e730(0x9f6)]);for(const _0x383528 of _0x27ce50){if(!_0x383528)continue;_0x383528[_0x15e730(0x369)]();}BattleManager['_subject']&&(_0x15e730(0xadc)===_0x15e730(0xadc)?BattleManager[_0x15e730(0x8fd)][_0x15e730(0x648)]():(_0x2702de[_0x15e730(0xa69)][_0x15e730(0x37f)][_0x15e730(0x5d9)](this),this[_0x15e730(0x53d)]=[]));if(_0x4a5ee4[_0x15e730(0x2e3)])_0x3e510b['setWaitMode']('battleMove');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x594),_0x3ea166=>{const _0xf79195=_0x3df63e;if(!SceneManager[_0xf79195(0x2a9)]())return;VisuMZ['ConvertParams'](_0x3ea166,_0x3ea166);const _0x1a9491=$gameTemp['getLastPluginCommandInterpreter'](),_0xcb1fec=VisuMZ['CreateActionSequenceTargets'](_0x3ea166[_0xf79195(0x9f6)]),_0x1363e9=_0x3ea166[_0xf79195(0x71a)],_0x30ee17=_0x3ea166[_0xf79195(0x88d)],_0x159ec6=_0x3ea166[_0xf79195(0x6c9)];if(!_0x1a9491)return;for(const _0x10cc8a of _0xcb1fec){if(!_0x10cc8a)continue;_0x10cc8a[_0xf79195(0xa71)](_0x1363e9,_0x30ee17);}if(_0x159ec6)_0x1a9491[_0xf79195(0x671)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb4b),_0x115644=>{const _0x183016=_0x3df63e;if(!SceneManager[_0x183016(0x2a9)]())return;if(!$gameSystem[_0x183016(0x8e3)]())return;VisuMZ[_0x183016(0x368)](_0x115644,_0x115644);const _0x467632=$gameTemp[_0x183016(0x5d6)](),_0x41f94f=VisuMZ[_0x183016(0x383)](_0x115644[_0x183016(0x9f6)]),_0x53e178=_0x115644['DistanceAdjust'],_0x14cb50=_0x115644[_0x183016(0x7a1)],_0x3cd3cb=_0x115644[_0x183016(0x5d3)],_0x5d95b1=_0x115644[_0x183016(0x88d)],_0x4ba5fc=_0x115644[_0x183016(0x1c1)],_0x4d2231=_0x115644['EasingType'],_0x11e3c8=_0x115644[_0x183016(0x5f8)],_0x5d281c=_0x115644[_0x183016(0x2e3)];if(!_0x467632)return;for(const _0x239c0d of _0x41f94f){if(!_0x239c0d)continue;let _0x48eeca=_0x14cb50,_0x5b7889=_0x3cd3cb;if(_0x53e178[_0x183016(0x64e)](/horz/i))_0x48eeca*=_0x239c0d[_0x183016(0x5c6)]()?-0x1:0x1;if(_0x53e178['match'](/vert/i))_0x5b7889*=_0x239c0d['isActor']()?-0x1:0x1;_0x239c0d[_0x183016(0x61a)](_0x48eeca,_0x5b7889,_0x5d95b1,_0x4ba5fc,_0x4d2231),_0x239c0d[_0x183016(0x80b)](_0x11e3c8);}if(_0x5d281c)_0x467632[_0x183016(0x671)]('battleMove');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x7d4),_0x3ddf89=>{const _0xcb849e=_0x3df63e;if(!SceneManager[_0xcb849e(0x2a9)]())return;if(!$gameSystem[_0xcb849e(0x8e3)]())return;VisuMZ[_0xcb849e(0x368)](_0x3ddf89,_0x3ddf89);const _0x433c69=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d50c9=VisuMZ[_0xcb849e(0x383)](_0x3ddf89[_0xcb849e(0x9f6)]),_0x56ccab=_0x3ddf89['Destination'],_0x4ae9d2=_0x3ddf89[_0xcb849e(0x476)],_0x4d9060=_0x3ddf89[_0xcb849e(0x7e9)],_0x2a9741=_0x3ddf89[_0xcb849e(0x3b3)],_0x51f788=_0x3ddf89[_0xcb849e(0x88d)],_0x25e39a=_0x3ddf89['FaceDirection'],_0x4599c7=_0x3ddf89['EasingType'],_0x13a09d=_0x3ddf89[_0xcb849e(0x5f8)],_0x490141=_0x3ddf89[_0xcb849e(0x2e3)];if(!_0x433c69)return;for(const _0x18c70e of _0x2d50c9){if('ftVUI'!==_0xcb849e(0xba1)){if(!_0x18c70e)continue;let _0x4a73b8=_0x18c70e['battler']()[_0xcb849e(0x924)],_0x1ea0da=_0x18c70e[_0xcb849e(0x669)]()['_baseY'];if(_0x56ccab['match'](/home/i))_0xcb849e(0xac6)!==_0xcb849e(0x4b8)?(_0x4a73b8=_0x18c70e[_0xcb849e(0x669)]()[_0xcb849e(0xa7d)],_0x1ea0da=_0x18c70e[_0xcb849e(0x669)]()[_0xcb849e(0x17f)]):this[_0xcb849e(0xb26)](...arguments);else{if(_0x56ccab[_0xcb849e(0x64e)](/center/i))_0xcb849e(0x3ae)!==_0xcb849e(0x545)?(_0x4a73b8=Graphics[_0xcb849e(0x8b9)]/0x2,_0x1ea0da=Graphics[_0xcb849e(0x3ed)]/0x2):_0x447671[_0xcb849e(0x8e2)][_0xcb849e(0x802)][_0xcb849e(0x826)](_0x564834,this[_0xcb849e(0x957)]);else _0x56ccab[_0xcb849e(0x64e)](/point (\d+), (\d+)/i)&&(_0x4a73b8=Number(RegExp['$1']),_0x1ea0da=Number(RegExp['$2']));}if(_0x4ae9d2[_0xcb849e(0x64e)](/none/i))_0x4a73b8+=_0x4d9060,_0x1ea0da+=_0x2a9741;else{if(_0x4ae9d2[_0xcb849e(0x64e)](/horz/i)&&_0x4ae9d2[_0xcb849e(0x64e)](/vert/i))_0x4a73b8+=_0x18c70e[_0xcb849e(0x5c6)]()?-_0x4d9060:_0x4d9060,_0x1ea0da+=_0x18c70e[_0xcb849e(0x5c6)]()?-_0x2a9741:_0x2a9741;else{if(_0x4ae9d2[_0xcb849e(0x64e)](/horz/i)){if(_0xcb849e(0x2ed)!=='wGEJh'){if(!_0x2fd5a8[_0xcb849e(0x655)]['checkShowHideBattleNotetags'][_0xcb849e(0x5d9)](this,_0xf69a6e))return!![];if(!_0x40e0d0[_0xcb849e(0x655)][_0xcb849e(0x1a7)][_0xcb849e(0x5d9)](this,_0x56f2e5))return!![];if(!_0x15943c[_0xcb849e(0x655)][_0xcb849e(0x8ac)][_0xcb849e(0x5d9)](this,_0x5a0a37))return!![];return![];}else _0x4a73b8+=_0x18c70e[_0xcb849e(0x5c6)]()?-_0x4d9060:_0x4d9060,_0x1ea0da+=_0x2a9741;}else _0x4ae9d2[_0xcb849e(0x64e)](/vert/i)&&(_0x4a73b8+=_0x4d9060,_0x1ea0da+=_0x18c70e['isActor']()?-_0x2a9741:_0x2a9741);}}_0x18c70e[_0xcb849e(0x3f1)](_0x4a73b8,_0x1ea0da,_0x51f788,_0x25e39a,_0x4599c7,-0x1),_0x18c70e[_0xcb849e(0x80b)](_0x13a09d);}else return this['hasSvBattler']()?this['_enemy'][_0xcb849e(0x992)]():!![];}if(_0x490141)_0x433c69[_0xcb849e(0x671)](_0xcb849e(0xa8c));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xa85),_0x2c2f0e=>{const _0xb3a7ab=_0x3df63e;if(!SceneManager[_0xb3a7ab(0x2a9)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0xb3a7ab(0x368)](_0x2c2f0e,_0x2c2f0e);const _0x1fb0fa=$gameTemp[_0xb3a7ab(0x5d6)](),_0x2a4905=VisuMZ['CreateActionSequenceTargets'](_0x2c2f0e['Targets1']),_0x21974b=VisuMZ[_0xb3a7ab(0x383)](_0x2c2f0e['Targets2']),_0x564e18=_0x2c2f0e[_0xb3a7ab(0x1f3)];let _0x30a42d=_0x2c2f0e[_0xb3a7ab(0x22b)];const _0x28a767=_0x2c2f0e[_0xb3a7ab(0x476)],_0x4a3dd1=_0x2c2f0e['OffsetX'],_0x2baa46=_0x2c2f0e[_0xb3a7ab(0x3b3)],_0x5cc9e7=_0x2c2f0e[_0xb3a7ab(0x88d)],_0x4f614d=_0x2c2f0e[_0xb3a7ab(0x1c1)],_0x57538d=_0x2c2f0e['EasingType'],_0xbba399=_0x2c2f0e['MotionType'],_0x2e375d=_0x2c2f0e['WaitForMovement'],_0x19b5b4=Math[_0xb3a7ab(0x46d)](..._0x21974b[_0xb3a7ab(0x3a8)](_0x35a0f0=>_0x35a0f0[_0xb3a7ab(0x669)]()['_baseX']-_0x35a0f0[_0xb3a7ab(0x669)]()['mainSpriteWidth']()/0x2)),_0x2e0f72=Math[_0xb3a7ab(0x7a7)](..._0x21974b[_0xb3a7ab(0x3a8)](_0x555d57=>_0x555d57[_0xb3a7ab(0x669)]()[_0xb3a7ab(0x924)]+_0x555d57[_0xb3a7ab(0x669)]()[_0xb3a7ab(0xaa0)]()/0x2)),_0x5469ca=Math[_0xb3a7ab(0x46d)](..._0x21974b[_0xb3a7ab(0x3a8)](_0x24d6ae=>_0x24d6ae['battler']()[_0xb3a7ab(0x560)]-_0x24d6ae[_0xb3a7ab(0x669)]()[_0xb3a7ab(0x1cf)]())),_0x22d34f=Math[_0xb3a7ab(0x7a7)](..._0x21974b['map'](_0x4d75e4=>_0x4d75e4[_0xb3a7ab(0x669)]()[_0xb3a7ab(0x560)])),_0x91d014=_0x21974b[_0xb3a7ab(0xaaa)](_0xdb2c64=>_0xdb2c64['isActor']())['length'],_0x335c4b=_0x21974b[_0xb3a7ab(0xaaa)](_0x430923=>_0x430923[_0xb3a7ab(0xaad)]())[_0xb3a7ab(0xb02)];let _0xe82883=0x0,_0x4bf7f1=0x0;if(_0x564e18[_0xb3a7ab(0x64e)](/front/i))_0xe82883=_0x91d014>=_0x335c4b?_0x19b5b4:_0x2e0f72;else{if(_0x564e18[_0xb3a7ab(0x64e)](/middle/i))'joEsa'===_0xb3a7ab(0x222)?(_0xe82883=(_0x19b5b4+_0x2e0f72)/0x2,_0x30a42d=-0x1):this[_0xb3a7ab(0x623)]();else{if(_0x564e18[_0xb3a7ab(0x64e)](/back/i)){if(_0xb3a7ab(0x503)==='xOzdh')_0xe82883=_0x91d014>=_0x335c4b?_0x2e0f72:_0x19b5b4;else{if(this[_0xb3a7ab(0xab0)]['svAnchorX']!==_0x134b52)return this[_0xb3a7ab(0xab0)][_0xb3a7ab(0x49e)];return this['actor']()[_0xb3a7ab(0x45f)][_0xb3a7ab(0x64e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=_0x3e9694(_0x4a3ad7['$1']),this[_0xb3a7ab(0xab0)][_0xb3a7ab(0x228)]=_0x1e02a6(_0x466145['$2'])):this[_0xb3a7ab(0xab0)][_0xb3a7ab(0x49e)]=_0x2493de[_0xb3a7ab(0x655)]['svBattlerAnchorX'][_0xb3a7ab(0x5d9)](this),this[_0xb3a7ab(0xab0)][_0xb3a7ab(0x49e)];}}}}if(_0x564e18['match'](/head/i))_0x4bf7f1=_0x5469ca;else{if(_0x564e18[_0xb3a7ab(0x64e)](/center/i))_0x4bf7f1=(_0x5469ca+_0x22d34f)/0x2;else{if(_0x564e18[_0xb3a7ab(0x64e)](/base/i)){if(_0xb3a7ab(0x732)!=='PyIYH'){if(!this[_0xb3a7ab(0x957)][_0xb3a7ab(0xb5c)]())return;const _0x1e7674=_0x34d0c2[_0xb3a7ab(0xa69)][_0xb3a7ab(0x5eb)][_0xb3a7ab(0x488)],_0x533de3=new _0x59ed08();_0x533de3[_0xb3a7ab(0x5a0)]=_0x1e7674['PopupDuration'],this[_0xb3a7ab(0xbc5)](_0x533de3),_0x533de3[_0xb3a7ab(0x78f)](_0x1bc79a,_0x309912,_0x43ff03),this['addDamageSprite'](_0x533de3);}else _0x4bf7f1=_0x22d34f;}}}if(!_0x1fb0fa)return;for(const _0x11234b of _0x2a4905){if(!_0x11234b)continue;let _0xbf2753=_0xe82883,_0x220179=_0x4bf7f1;if(_0x28a767['match'](/none/i))_0xb3a7ab(0x42a)!=='PKgrk'?_0x1e3a6b+=_0x43523e['width']-_0x575d47:(_0xbf2753+=_0x4a3dd1,_0x220179+=_0x2baa46);else{if(_0x28a767[_0xb3a7ab(0x64e)](/horz/i)&&_0x28a767['match'](/vert/i))_0xbf2753+=_0x11234b[_0xb3a7ab(0x5c6)]()?-_0x4a3dd1:_0x4a3dd1,_0x220179+=_0x11234b[_0xb3a7ab(0x5c6)]()?-_0x2baa46:_0x2baa46;else{if(_0x28a767[_0xb3a7ab(0x64e)](/horz/i))_0xbf2753+=_0x11234b[_0xb3a7ab(0x5c6)]()?-_0x4a3dd1:_0x4a3dd1,_0x220179+=_0x2baa46;else _0x28a767[_0xb3a7ab(0x64e)](/vert/i)&&(_0xbf2753+=_0x4a3dd1,_0x220179+=_0x11234b[_0xb3a7ab(0x5c6)]()?-_0x2baa46:_0x2baa46);}}_0x11234b[_0xb3a7ab(0x3f1)](_0xbf2753,_0x220179,_0x5cc9e7,_0x4f614d,_0x57538d,_0x30a42d),_0x11234b[_0xb3a7ab(0x80b)](_0xbba399);}if(_0x2e375d)_0x1fb0fa[_0xb3a7ab(0x671)](_0xb3a7ab(0xa8c));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Movement_Opacity',_0x8951be=>{const _0x11717d=_0x3df63e;if(!SceneManager[_0x11717d(0x2a9)]())return;VisuMZ[_0x11717d(0x368)](_0x8951be,_0x8951be);const _0x260b80=$gameTemp[_0x11717d(0x5d6)](),_0x4a22f5=VisuMZ[_0x11717d(0x383)](_0x8951be[_0x11717d(0x9f6)]),_0x26f6cc=_0x8951be[_0x11717d(0xae0)],_0x1e0806=_0x8951be[_0x11717d(0x88d)],_0x63620a=_0x8951be[_0x11717d(0x6dd)],_0xfec826=_0x8951be['WaitForOpacity'];if(!_0x260b80)return;for(const _0x331afe of _0x4a22f5){if(!_0x331afe)continue;_0x331afe[_0x11717d(0xaef)](_0x26f6cc,_0x1e0806,_0x63620a);}if(_0xfec826)_0x260b80[_0x11717d(0x671)](_0x11717d(0x1c0));}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0xa74),_0x5baf43=>{const _0x432e2b=_0x3df63e;if(!SceneManager[_0x432e2b(0x2a9)]())return;VisuMZ[_0x432e2b(0x368)](_0x5baf43,_0x5baf43);const _0x1403e4=$gameTemp[_0x432e2b(0x5d6)](),_0x2a0f27=VisuMZ[_0x432e2b(0x383)](_0x5baf43['Targets']),_0x4394c9=_0x5baf43[_0x432e2b(0x466)],_0x2ff631=_0x5baf43[_0x432e2b(0x50d)],_0x20a376=_0x5baf43[_0x432e2b(0x88d)],_0x2edc00=_0x5baf43[_0x432e2b(0x6dd)],_0x22fe89=_0x5baf43['WaitForScale'];if(!_0x1403e4)return;for(const _0x43bd1d of _0x2a0f27){if(_0x432e2b(0xb40)===_0x432e2b(0x4f2)){if(!_0x10ece7[_0x432e2b(0x2a9)]())return;_0x2ac203['ConvertParams'](_0x62a9a4,_0x4711b5);const _0x33900f=_0x11eaae[_0x432e2b(0x5d6)](),_0x22f818=_0x1a00bf[_0x432e2b(0xbae)],_0xc8a4e5=_0x284f78[_0x432e2b(0x8fd)],_0x57094d=_0x220d55[_0x432e2b(0xa84)]?_0x77e4d6[_0x432e2b(0xa84)][_0x432e2b(0x3f6)](0x0):[],_0x3999cb=_0x47304c[_0x432e2b(0x3fa)];if(!_0x33900f||!_0x22f818||!_0xc8a4e5)return;if(!_0x22f818['item']())return;if(_0x3fdc03['ApplyImmortal'])_0x3999cb[_0x432e2b(0x9cd)](_0x432e2b(0x8f3),_0xc8a4e5,_0x57094d,![]);if(_0x56e2a5[_0x432e2b(0x6ce)])_0x3999cb[_0x432e2b(0x9cd)](_0x432e2b(0x463));if(_0x4e3fb5[_0x432e2b(0x3c9)])_0x3999cb['push'](_0x432e2b(0x93b));if(_0x4015fd[_0x432e2b(0x380)])_0x3999cb['push']('clear');if(_0x520645['ActionEnd'])_0x3999cb['push'](_0x432e2b(0x648),_0xc8a4e5);if(_0x12f108['WaitForMovement'])_0x3999cb[_0x432e2b(0x9cd)]('waitForMovement');_0x33900f['setWaitMode'](_0x432e2b(0x379));}else{if(!_0x43bd1d)continue;_0x43bd1d[_0x432e2b(0x374)](_0x4394c9,_0x2ff631,_0x20a376,_0x2edc00);}}if(_0x22fe89)_0x1403e4[_0x432e2b(0x671)](_0x432e2b(0x1a9));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Movement_Skew',_0x5d7877=>{const _0x583ff1=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x583ff1(0x368)](_0x5d7877,_0x5d7877);const _0x15b10d=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d58e7=VisuMZ[_0x583ff1(0x383)](_0x5d7877[_0x583ff1(0x9f6)]),_0x3c8bec=_0x5d7877[_0x583ff1(0x185)],_0x50a8fb=_0x5d7877[_0x583ff1(0x174)],_0x47a228=_0x5d7877[_0x583ff1(0x88d)],_0x794588=_0x5d7877[_0x583ff1(0x6dd)],_0xd22dd8=_0x5d7877[_0x583ff1(0x21e)];if(!_0x15b10d)return;for(const _0x34308b of _0x2d58e7){if('SqLSB'===_0x583ff1(0x54a)){if(!_0x34308b)continue;_0x34308b[_0x583ff1(0x817)](_0x3c8bec,_0x50a8fb,_0x47a228,_0x794588);}else return 0x0;}if(_0xd22dd8)_0x15b10d[_0x583ff1(0x671)](_0x583ff1(0xb15));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Movement_Spin',_0x21f428=>{const _0x40bdb8=_0x3df63e;if(!SceneManager[_0x40bdb8(0x2a9)]())return;VisuMZ[_0x40bdb8(0x368)](_0x21f428,_0x21f428);const _0x49f37f=$gameTemp['getLastPluginCommandInterpreter'](),_0x8149b0=VisuMZ[_0x40bdb8(0x383)](_0x21f428[_0x40bdb8(0x9f6)]),_0x229b3a=_0x21f428[_0x40bdb8(0x681)],_0x20b203=_0x21f428[_0x40bdb8(0x88d)],_0x27c249=_0x21f428[_0x40bdb8(0x6dd)],_0x51bd05=_0x21f428['RevertAngle'],_0x5a5601=_0x21f428[_0x40bdb8(0x1db)];if(!_0x49f37f)return;for(const _0xc2433c of _0x8149b0){if(_0x40bdb8(0x251)===_0x40bdb8(0x251)){if(!_0xc2433c)continue;_0xc2433c[_0x40bdb8(0xb3d)](_0x229b3a,_0x20b203,_0x27c249,_0x51bd05);}else this['_waitCount']=_0x18a0fe;}if(_0x5a5601)_0x49f37f[_0x40bdb8(0x671)](_0x40bdb8(0x551));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xa63),_0x7f842=>{const _0x335b4d=_0x3df63e;if(!SceneManager[_0x335b4d(0x2a9)]())return;const _0x3eb85e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3eb85e)return;_0x3eb85e['setWaitMode'](_0x335b4d(0x587));}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0xa09),_0x4f502e=>{const _0xb09643=_0x3df63e;if(!SceneManager[_0xb09643(0x2a9)]())return;const _0x6b1bde=$gameTemp[_0xb09643(0x5d6)]();if(!_0x6b1bde)return;_0x6b1bde['setWaitMode'](_0xb09643(0x8a7));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x828),_0x5a61be=>{const _0x92ccfc=_0x3df63e;if(!SceneManager[_0x92ccfc(0x2a9)]())return;const _0x11de21=$gameTemp[_0x92ccfc(0x5d6)]();if(!_0x11de21)return;_0x11de21[_0x92ccfc(0x671)]('battleMove');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb6e),_0x1f0d1d=>{const _0x105e83=_0x3df63e;if(!SceneManager[_0x105e83(0x2a9)]())return;const _0x4aae26=$gameTemp[_0x105e83(0x5d6)]();if(!_0x4aae26)return;_0x4aae26[_0x105e83(0x671)]('battleOpacity');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xb47),_0x38ff66=>{const _0x40d5a2=_0x3df63e;if(!SceneManager[_0x40d5a2(0x2a9)]())return;const _0x3d10a8=$gameTemp[_0x40d5a2(0x5d6)]();if(!_0x3d10a8)return;_0x3d10a8[_0x40d5a2(0x671)](_0x40d5a2(0x1a9));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4d9),_0x2f1c63=>{const _0x389b7a=_0x3df63e;if(!SceneManager[_0x389b7a(0x2a9)]())return;const _0x304207=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x304207)return;_0x304207[_0x389b7a(0x671)](_0x389b7a(0xb15));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x169),_0x5371a3=>{const _0x804cf6=_0x3df63e;if(!SceneManager[_0x804cf6(0x2a9)]())return;const _0x499267=$gameTemp[_0x804cf6(0x5d6)]();if(!_0x499267)return;_0x499267['setWaitMode'](_0x804cf6(0x551));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Projectile_Animation',_0x23ae6a=>{const _0x363ac6=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x363ac6(0x305)])return;VisuMZ[_0x363ac6(0x368)](_0x23ae6a,_0x23ae6a);const _0x131171=$gameTemp[_0x363ac6(0x5d6)](),_0xc922d7=_0x23ae6a[_0x363ac6(0x6ac)];if(!_0x131171)return;const _0x955512=BattleManager[_0x363ac6(0x449)];if(!_0x955512)return;_0x955512[_0x363ac6(0x410)](_0x23ae6a);if(_0xc922d7)_0x131171[_0x363ac6(0x671)](_0x363ac6(0x694));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x664),_0x2baac=>{const _0x19d17d=_0x3df63e;if(!SceneManager[_0x19d17d(0x2a9)]())return;if(!Imported[_0x19d17d(0x305)])return;VisuMZ[_0x19d17d(0x368)](_0x2baac,_0x2baac);const _0x28895b=$gameTemp[_0x19d17d(0x5d6)](),_0x11149f=_0x2baac[_0x19d17d(0x6ac)];if(!_0x28895b)return;const _0x41068c=BattleManager[_0x19d17d(0x449)];if(!_0x41068c)return;_0x41068c[_0x19d17d(0x410)](_0x2baac);if(_0x11149f)_0x28895b[_0x19d17d(0x671)](_0x19d17d(0x694));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Projectile_Picture',_0x2310dc=>{const _0xaeaaf9=_0x3df63e;if(!SceneManager[_0xaeaaf9(0x2a9)]())return;if(!Imported[_0xaeaaf9(0x305)])return;VisuMZ[_0xaeaaf9(0x368)](_0x2310dc,_0x2310dc);const _0x11a34b=$gameTemp['getLastPluginCommandInterpreter'](),_0x46fbf7=_0x2310dc[_0xaeaaf9(0x6ac)];if(!_0x11a34b)return;const _0x4a9f84=BattleManager[_0xaeaaf9(0x449)];if(!_0x4a9f84)return;_0x4a9f84[_0xaeaaf9(0x410)](_0x2310dc);if(_0x46fbf7)_0x11a34b[_0xaeaaf9(0x671)](_0xaeaaf9(0x694));}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x43b),_0x5e3a11=>{const _0x3a8c3d=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3a8c3d(0x808)])return;VisuMZ[_0x3a8c3d(0x368)](_0x5e3a11,_0x5e3a11);const _0xe91186=$gameTemp[_0x3a8c3d(0x5d6)](),_0x20c73a=_0x5e3a11[_0x3a8c3d(0x21e)];if(!_0xe91186)return;$gameScreen[_0x3a8c3d(0x316)](_0x5e3a11[_0x3a8c3d(0x185)],_0x5e3a11[_0x3a8c3d(0x174)],_0x5e3a11[_0x3a8c3d(0x88d)],_0x5e3a11[_0x3a8c3d(0x6dd)]);if(_0x20c73a)_0xe91186[_0x3a8c3d(0x671)](_0x3a8c3d(0x564));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Skew_Reset',_0x3ba7f3=>{const _0x2626fa=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2626fa(0x808)])return;VisuMZ[_0x2626fa(0x368)](_0x3ba7f3,_0x3ba7f3);const _0x22a5fa=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a2f2=_0x3ba7f3[_0x2626fa(0x21e)];if(!_0x22a5fa)return;$gameScreen[_0x2626fa(0x316)](0x0,0x0,_0x3ba7f3[_0x2626fa(0x88d)],_0x3ba7f3[_0x2626fa(0x6dd)]);if(_0x4a2f2)_0x22a5fa[_0x2626fa(0x671)]('battleSkew');}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x400),_0xb6e47b=>{const _0x203509=_0x3df63e;if(!SceneManager[_0x203509(0x2a9)]())return;if(!Imported[_0x203509(0x808)])return;const _0x329374=$gameTemp[_0x203509(0x5d6)]();if(!_0x329374)return;_0x329374['setWaitMode'](_0x203509(0x564));}),PluginManager['registerCommand'](pluginData['name'],_0x3df63e(0xbd8),_0x3417bf=>{const _0x4da48f=_0x3df63e;if(!SceneManager[_0x4da48f(0x2a9)]())return;VisuMZ[_0x4da48f(0x368)](_0x3417bf,_0x3417bf);const _0x472cf=$gameTemp[_0x4da48f(0x5d6)](),_0x47d3cb=_0x3417bf[_0x4da48f(0xa64)],_0x147ef3=_0x3417bf['JumpToLabel'];if(!_0x472cf)return;BattleManager[_0x4da48f(0x9ea)]=_0x47d3cb,BattleManager['_target']=BattleManager[_0x4da48f(0xa84)]?BattleManager[_0x4da48f(0xa84)][BattleManager[_0x4da48f(0x9ea)]]||null:null,BattleManager[_0x4da48f(0x905)]&&_0x147ef3[_0x4da48f(0x17c)]()[_0x4da48f(0x9d2)]()!==_0x4da48f(0x59e)&&_0x472cf[_0x4da48f(0x2f3)]([_0x147ef3]);}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Target_NextTarget',_0x5b18ba=>{const _0x1fb58d=_0x3df63e;if(!SceneManager[_0x1fb58d(0x2a9)]())return;VisuMZ['ConvertParams'](_0x5b18ba,_0x5b18ba);const _0x45d7ab=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c3caf=_0x5b18ba['JumpToLabel'];if(!_0x45d7ab)return;BattleManager['_targetIndex']++,BattleManager['_target']=BattleManager[_0x1fb58d(0xa84)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x5c3caf[_0x1fb58d(0x17c)]()[_0x1fb58d(0x9d2)]()!==_0x1fb58d(0x59e)&&('LmMce'===_0x1fb58d(0x759)?this['updateCustomActionSequence']():_0x45d7ab[_0x1fb58d(0x2f3)]([_0x5c3caf]));}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xaae),_0x4eee6f=>{const _0x100798=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4eee6f,_0x4eee6f);const _0x3c5a10=$gameTemp[_0x100798(0x5d6)](),_0x2c2a94=_0x4eee6f['JumpToLabel'];if(!_0x3c5a10)return;BattleManager[_0x100798(0x9ea)]--,BattleManager[_0x100798(0x905)]=BattleManager[_0x100798(0xa84)][BattleManager[_0x100798(0x9ea)]]||null,BattleManager[_0x100798(0x905)]&&_0x2c2a94[_0x100798(0x17c)]()[_0x100798(0x9d2)]()!==_0x100798(0x59e)&&_0x3c5a10[_0x100798(0x2f3)]([_0x2c2a94]);}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0xae3),_0x245963=>{const _0x4e8101=_0x3df63e;if(!SceneManager[_0x4e8101(0x2a9)]())return;VisuMZ[_0x4e8101(0x368)](_0x245963,_0x245963);const _0x404d31=$gameTemp[_0x4e8101(0x5d6)](),_0x56c137=_0x245963[_0x4e8101(0xb36)],_0x1a54a4=_0x245963['JumpToLabel'];if(!_0x404d31)return;const _0x592ec0=BattleManager[_0x4e8101(0x9ea)];for(;;){BattleManager[_0x4e8101(0x9ea)]=Math[_0x4e8101(0xa4d)](BattleManager[_0x4e8101(0xa84)][_0x4e8101(0xb02)]);if(!_0x56c137)break;if(BattleManager[_0x4e8101(0x9ea)]!==_0x592ec0)break;if(BattleManager[_0x4e8101(0xa84)][_0x4e8101(0xb02)]<=0x1){BattleManager[_0x4e8101(0x9ea)]=0x0;break;}}BattleManager[_0x4e8101(0x905)]=BattleManager[_0x4e8101(0xa84)][BattleManager['_targetIndex']]||null,BattleManager[_0x4e8101(0x905)]&&_0x1a54a4[_0x4e8101(0x17c)]()[_0x4e8101(0x9d2)]()!==_0x4e8101(0x59e)&&_0x404d31[_0x4e8101(0x2f3)]([_0x1a54a4]);}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x40bb73=>{const _0x82442e=_0x3df63e;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x82442e(0x368)](_0x40bb73,_0x40bb73);const _0x118451=VisuMZ[_0x82442e(0x383)](_0x40bb73[_0x82442e(0x9f6)]);for(const _0x52c4aa of _0x118451){if(!_0x52c4aa)continue;if(!_0x52c4aa[_0x82442e(0x5c6)]())continue;_0x52c4aa[_0x82442e(0x7d1)]();}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],'ActSeq_Weapon_NextActiveWeapon',_0xc706ce=>{const _0x269c34=_0x3df63e;if(!SceneManager[_0x269c34(0x2a9)]())return;VisuMZ[_0x269c34(0x368)](_0xc706ce,_0xc706ce);const _0x5e7f0f=$gameTemp[_0x269c34(0x5d6)]();let _0x5c2dd8=![];const _0x2c8561=_0xc706ce[_0x269c34(0x966)],_0x4a05b4=VisuMZ['CreateActionSequenceTargets'](_0xc706ce['Targets']);for(const _0x161074 of _0x4a05b4){if(!_0x161074)continue;if(!_0x161074['isActor']())continue;_0x161074[_0x269c34(0x4d7)](),_0x161074['weapons']()[_0x269c34(0xb02)]>0x0?'Hzjok'!==_0x269c34(0xa80)?_0x5c2dd8=!![]:this['opacity']=0x0:_0x161074[_0x269c34(0x7d1)]();}_0x5c2dd8&&_0x2c8561[_0x269c34(0x17c)]()['trim']()!==_0x269c34(0x59e)&&_0x5e7f0f[_0x269c34(0x2f3)]([_0x2c8561]);}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x9fc),_0x2a99a8=>{const _0x3db3f3=_0x3df63e;if(!SceneManager[_0x3db3f3(0x2a9)]())return;VisuMZ[_0x3db3f3(0x368)](_0x2a99a8,_0x2a99a8);let _0x4e1bb5=_0x2a99a8[_0x3db3f3(0x4ff)];_0x4e1bb5--,_0x4e1bb5=Math[_0x3db3f3(0x7a7)](_0x4e1bb5,0x0);const _0xa87d5f=VisuMZ[_0x3db3f3(0x383)](_0x2a99a8['Targets']);for(const _0x3fcbb2 of _0xa87d5f){if(!_0x3fcbb2)continue;if(!_0x3fcbb2[_0x3db3f3(0x5c6)]())continue;_0x3fcbb2[_0x3db3f3(0x348)](_0x4e1bb5);}}),PluginManager[_0x3df63e(0x7eb)](pluginData[_0x3df63e(0xae2)],_0x3df63e(0x4ac),_0x1c0ad5=>{const _0x29cded=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29cded(0x808)])return;VisuMZ['ConvertParams'](_0x1c0ad5,_0x1c0ad5);const _0x4afd19=$gameTemp[_0x29cded(0x5d6)](),_0x418d84=_0x1c0ad5[_0x29cded(0x5b3)];if(!_0x4afd19)return;$gameScreen['setBattleZoom'](_0x1c0ad5[_0x29cded(0x56c)],_0x1c0ad5[_0x29cded(0x88d)],_0x1c0ad5[_0x29cded(0x6dd)]);if(_0x418d84)_0x4afd19[_0x29cded(0x671)]('battleZoom');}),PluginManager['registerCommand'](pluginData[_0x3df63e(0xae2)],'ActSeq_Zoom_Reset',_0x3450b8=>{const _0x137d5a=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x137d5a(0x808)])return;VisuMZ[_0x137d5a(0x368)](_0x3450b8,_0x3450b8);const _0x1cb691=$gameTemp[_0x137d5a(0x5d6)](),_0x1c0f77=_0x3450b8[_0x137d5a(0x5b3)];if(!_0x1cb691)return;$gameScreen[_0x137d5a(0xa3a)](0x1,_0x3450b8[_0x137d5a(0x88d)],_0x3450b8['EasingType']);if(_0x1c0f77)_0x1cb691[_0x137d5a(0x671)](_0x137d5a(0xafb));}),PluginManager[_0x3df63e(0x7eb)](pluginData['name'],_0x3df63e(0x53e),_0x30f45=>{const _0x1402b9=_0x3df63e;if(!SceneManager[_0x1402b9(0x2a9)]())return;if(!Imported[_0x1402b9(0x808)])return;const _0x52f8ff=$gameTemp[_0x1402b9(0x5d6)]();if(!_0x52f8ff)return;_0x52f8ff['setWaitMode'](_0x1402b9(0xafb));}),VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x497)]=Scene_Boot[_0x3df63e(0x655)]['onDatabaseLoaded'],Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x464)]=function(){const _0x3158bf=_0x3df63e;this[_0x3158bf(0x1eb)](),this[_0x3158bf(0x398)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x3158bf(0x8bc)](),VisuMZ[_0x3158bf(0xa69)][_0x3158bf(0x497)][_0x3158bf(0x5d9)](this),this[_0x3158bf(0x356)](),this[_0x3158bf(0x702)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x3158bf(0x90d)]();},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x356)]=function(){const _0x2e14a6=_0x3df63e;if(VisuMZ[_0x2e14a6(0x1c4)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x2e14a6(0x9d1)](),this[_0x2e14a6(0x7df)]();},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x1eb)]=function(){const _0x5a5a88=_0x3df63e,_0x469d8d=$dataSystem[_0x5a5a88(0x907)][_0x5a5a88(0xb02)];for(let _0x35063d=0x0;_0x35063d<_0x469d8d;_0x35063d++){const _0xe4eea8=$dataSystem['attackMotions'][_0x35063d];if(_0xe4eea8)continue;$dataSystem['attackMotions'][_0x35063d]=JsonEx[_0x5a5a88(0x480)]($dataSystem['attackMotions'][0x0]);}},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x398)]=function(){const _0x4f9bc1=_0x3df63e,_0x4bebfe=VisuMZ[_0x4f9bc1(0xa69)]['Settings'];_0x4bebfe[_0x4f9bc1(0x488)][_0x4f9bc1(0x530)]===undefined&&(_0x4bebfe['Damage'][_0x4f9bc1(0x530)]='base');_0x4bebfe[_0x4f9bc1(0x4d0)][_0x4f9bc1(0xa11)]===undefined&&(_0x4bebfe[_0x4f9bc1(0x4d0)][_0x4f9bc1(0xa11)]=![]);_0x4bebfe[_0x4f9bc1(0x580)][_0x4f9bc1(0xa11)]===undefined&&(_0x4bebfe[_0x4f9bc1(0x580)][_0x4f9bc1(0xa11)]=!![]);_0x4bebfe[_0x4f9bc1(0x4d0)][_0x4f9bc1(0x66b)]===undefined&&(_0x4bebfe['Actor'][_0x4f9bc1(0x66b)]=![]);if(_0x4bebfe['Actor'][_0x4f9bc1(0x220)]===undefined){if(_0x4f9bc1(0x659)==='kZGBQ')_0x4bebfe[_0x4f9bc1(0x4d0)]['PrioritySortActors']=!![];else return!![];}},VisuMZ[_0x3df63e(0x666)]={},Scene_Boot['prototype'][_0x3df63e(0x26a)]=function(){const _0x5cf074=_0x3df63e;for(const _0x1e7009 of VisuMZ[_0x5cf074(0xa69)]['Settings'][_0x5cf074(0x488)]['DamageStyleList']){if(_0x5cf074(0x44c)===_0x5cf074(0x1f0))this['_skillWindow'][_0x5cf074(0x689)](),this[_0x5cf074(0x983)][_0x5cf074(0x689)]();else{if(!_0x1e7009)continue;const _0x1ed755=_0x1e7009[_0x5cf074(0x579)][_0x5cf074(0x17c)]()['trim']();VisuMZ[_0x5cf074(0x666)][_0x1ed755]=_0x1e7009;}}},VisuMZ['BattleCore'][_0x3df63e(0x45a)]={},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x17e274=_0x3df63e,_0x2a49d4=VisuMZ['BattleCore']['RegExp'],_0x3ee117='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x4b5447=[[_0x17e274(0x608),'PRE-'],['Post',_0x17e274(0x704)]],_0x171af2=[[_0x17e274(0x8ae),_0x17e274(0x4d2)],['%1Damage%2JS',_0x17e274(0x47d)]],_0xed3a91=[['',''],[_0x17e274(0x3bb),_0x17e274(0x6a7)],[_0x17e274(0x50e),_0x17e274(0xb2a)]];for(const _0x33a0da of _0x171af2){for(const _0x2f018f of _0xed3a91){for(const _0x44ce9b of _0x4b5447){if(_0x17e274(0x9db)!==_0x17e274(0x87f)){const _0x37ef6a=_0x33a0da[0x0]['format'](_0x44ce9b[0x0],_0x2f018f[0x0]),_0x8ef84e=_0x33a0da[0x1][_0x17e274(0x4f8)](_0x44ce9b[0x1],_0x2f018f[0x1])['trim'](),_0x46aa75=new RegExp(_0x3ee117[_0x17e274(0x4f8)](_0x8ef84e),'i');_0x2a49d4[_0x37ef6a]=_0x46aa75;}else _0x292d2d+=_0x25a594[_0x17e274(0x5c6)]()?-_0x541c27:_0x14fb9f,_0xbd3818+=_0x3b13c6[_0x17e274(0x5c6)]()?-_0x1f07df:_0x3bc1e3;}}}const _0x5acdf6=[['%1StartActionJS',_0x17e274(0x981)],[_0x17e274(0x6e5),_0x17e274(0x9d4)]];for(const _0x376c7f of _0x5acdf6){for(const _0x2e73fd of _0x4b5447){if(_0x17e274(0x6c1)!==_0x17e274(0x30d)){const _0x164445=_0x376c7f[0x0]['format'](_0x2e73fd[0x0]),_0x25c304=_0x376c7f[0x1][_0x17e274(0x4f8)](_0x2e73fd[0x1]),_0x441e79=new RegExp(_0x3ee117[_0x17e274(0x4f8)](_0x25c304),'i');_0x2a49d4[_0x164445]=_0x441e79;}else _0xaf0c6c[_0x17e274(0x31b)](0x0,0x0,_0x323eba[_0x17e274(0x88d)],_0xa3b9c5[_0x17e274(0x6dd)]);}}const _0x559a67=[[_0x17e274(0x51f),_0x17e274(0x710)],[_0x17e274(0x986),_0x17e274(0x83d)],['BattleVictoryJS',_0x17e274(0x6d4)],[_0x17e274(0x667),'JS\x20BATTLE\x20DEFEAT'],[_0x17e274(0x3fe),_0x17e274(0x242)],[_0x17e274(0x353),_0x17e274(0x21d)],[_0x17e274(0x397),'JS\x20%1START\x20TURN'],[_0x17e274(0x5dc),_0x17e274(0x590)],[_0x17e274(0x295),_0x17e274(0x318)]];for(const _0x44e361 of _0x559a67){for(const _0x4d3bae of _0x4b5447){const _0x4cf759=_0x44e361[0x0]['format'](_0x4d3bae[0x0]),_0x2db29c=_0x44e361[0x1][_0x17e274(0x4f8)](_0x4d3bae[0x1]),_0x1b2ee2=new RegExp(_0x3ee117[_0x17e274(0x4f8)](_0x2db29c),'i');_0x2a49d4[_0x4cf759]=_0x1b2ee2;}}},Scene_Boot[_0x3df63e(0x655)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x29aa25=_0x3df63e,_0x50dd1a=$dataSkills[_0x29aa25(0x913)]($dataItems);for(const _0x5e39d4 of _0x50dd1a){if(!_0x5e39d4)continue;VisuMZ[_0x29aa25(0xa69)]['Parse_Notetags_Action'](_0x5e39d4);}},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x9d1)]=function(){const _0x5a0e3b=_0x3df63e,_0x24a693=$dataActors[_0x5a0e3b(0x913)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2a582d of _0x24a693){if(!_0x2a582d)continue;VisuMZ[_0x5a0e3b(0xa69)][_0x5a0e3b(0x349)](_0x2a582d);}},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x702)]=function(){const _0x4e420b=_0x3df63e,_0x481eaf=VisuMZ[_0x4e420b(0xa69)][_0x4e420b(0x5eb)]['Mechanics'][_0x4e420b(0x7ac)],_0x8e9b9=[];for(const _0x11b5fd of _0x481eaf){if(_0x4e420b(0x82d)!==_0x4e420b(0x82d)){const _0x21e257=_0x2d8590[_0x4e420b(0x3dd)](_0xe6001[_0x4e420b(0x366)]/0x3),_0x35a046=_0x3833b7[_0x4e420b(0x76b)]((_0x27871b[_0x4e420b(0x8b9)]-_0x21e257)/0x2),_0x405262=this[_0x4e420b(0x778)](),_0x81b61b=_0x405262['y'],_0x1a976f=_0x405262[_0x4e420b(0xb78)];return new _0x1d20f5(_0x35a046,_0x81b61b,_0x21e257,_0x1a976f);}else{const _0x4811c8=$dataTroops[_0x11b5fd];if(_0x4811c8)_0x8e9b9[_0x4e420b(0x9cd)](JsonEx[_0x4e420b(0x480)](_0x4811c8));}}for(const _0x1f19a4 of $dataTroops){if(!_0x1f19a4)continue;for(const _0x1a6fd4 of _0x8e9b9){if(_0x1a6fd4['id']===_0x1f19a4['id'])continue;_0x1f19a4['pages']=_0x1f19a4['pages'][_0x4e420b(0x913)](_0x1a6fd4[_0x4e420b(0x9a3)]);}}},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x645)]=function(){const _0x287684=_0x3df63e,_0x46f80f=VisuMZ[_0x287684(0xa69)]['Settings'][_0x287684(0x688)];if(_0x46f80f[_0x287684(0xb2d)]>0x0&&$dataCommonEvents[_0x46f80f['BattleStartEvent']]){if(_0x287684(0xaf1)===_0x287684(0x6f9))this[_0x287684(0x561)][_0x287684(0x9cd)](_0x4b4815),this[_0x287684(0xbcf)](),this[_0x287684(0x72b)]();else{const _0x29accc=$dataCommonEvents[_0x46f80f[_0x287684(0xb2d)]],_0x5dab05=_0x29accc[_0x287684(0x672)][_0x287684(0xb02)]-0x2,_0x32feba=_0x29accc[_0x287684(0x672)][_0x5dab05];if(_0x32feba&&_0x32feba[_0x287684(0xb96)]!==0xe6){if(_0x287684(0x62c)===_0x287684(0xba5)){const _0x4c1e0e=_0x172893['note'];if(_0x4c1e0e[_0x287684(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x43a613(_0x17808d['$1'])*0.01;else{if(_0x4c1e0e[_0x287684(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x40d6d5(_0xa64cc2['$1'])||0x0;}}else{const _0x115462={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x257939=_0x29accc['list']['pop']();_0x29accc['list']['unshift'](_0x115462),_0x29accc[_0x287684(0x672)][_0x287684(0x9e4)](_0x257939);}}}}},Scene_Boot['prototype'][_0x3df63e(0x90d)]=function(){const _0x2e4f84=_0x3df63e;VisuMZ['BattleCore']['CreateCommonEventKeys'](),VisuMZ[_0x2e4f84(0xa69)][_0x2e4f84(0x5c7)]($dataSkills),VisuMZ['BattleCore'][_0x2e4f84(0x5c7)]($dataItems);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x1b2)]=function(){const _0x555889=_0x3df63e;VisuMZ[_0x555889(0xa69)][_0x555889(0x899)]={};for(const _0x542b3b of $dataCommonEvents){if(_0x555889(0x304)!=='wWJTQ'){const _0x20cf7e=this[_0x555889(0x720)][_0x555889(0x5c3)]['y'];_0x5ed28e-=(_0x20cf7e-0x1)*this[_0x555889(0xb78)];}else{if(!_0x542b3b)continue;if(_0x542b3b[_0x555889(0xae2)][_0x555889(0x64e)](/\[(.*)\]/i)){let _0x58754c=String(RegExp['$1'])['replace'](/,/g,'')['toUpperCase']()[_0x555889(0x9d2)]();VisuMZ['BattleCore'][_0x555889(0x899)][_0x58754c]=_0x542b3b['id'];}}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5c7)]=function(_0x1a07bf){const _0x265a98=_0x3df63e;for(const _0x34ff85 of _0x1a07bf){if(!_0x34ff85)continue;VisuMZ[_0x265a98(0xa69)][_0x265a98(0xb8c)](_0x34ff85);}},VisuMZ['BattleCore'][_0x3df63e(0xb8c)]=function(_0x594e05){const _0x3a9069=_0x3df63e;if(!_0x594e05)return;if(!_0x594e05[_0x3a9069(0x83b)])return;VisuMZ[_0x3a9069(0xa69)]['_commonEventKey']=VisuMZ[_0x3a9069(0xa69)][_0x3a9069(0x899)]||{};const _0x435198=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3dd0e2=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x16278e=[];const _0x1dc3be=_0x594e05[_0x3a9069(0x45f)][_0x3a9069(0x64e)](_0x435198);if(_0x1dc3be){if(_0x3a9069(0x322)===_0x3a9069(0x322)){for(const _0x1bf36e of _0x1dc3be){_0x1bf36e[_0x3a9069(0x64e)](_0x435198);const _0x2f96ec=String(RegExp['$1'])[_0x3a9069(0xaa8)](',')['map'](_0x398eb2=>String(_0x398eb2)[_0x3a9069(0x17c)]()['trim']());_0x16278e=_0x16278e[_0x3a9069(0x913)](_0x2f96ec);}!_0x594e05['note'][_0x3a9069(0x64e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x594e05[_0x3a9069(0x45f)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else{const _0x3fd25a=this[_0x3a9069(0xb6b)]();['xp',_0x3a9069(0xbc2),'border'][_0x3a9069(0xa22)](_0x3fd25a)&&this[_0x3a9069(0x581)][_0x3a9069(0xb51)](),this[_0x3a9069(0xa72)]();}}if(_0x594e05[_0x3a9069(0x45f)][_0x3a9069(0x64e)](_0x3dd0e2)){if(_0x3a9069(0x9ab)===_0x3a9069(0x9ab)){const _0x480faf=String(RegExp['$1'])[_0x3a9069(0xaa8)](/[\r\n]+/)[_0x3a9069(0x3a8)](_0x54263c=>String(_0x54263c)[_0x3a9069(0x17c)]()[_0x3a9069(0x9d2)]());_0x16278e=_0x16278e[_0x3a9069(0x913)](_0x480faf);!_0x594e05[_0x3a9069(0x45f)][_0x3a9069(0x64e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x594e05[_0x3a9069(0x45f)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else{if(!_0x577593['isSideView']())return;const _0x18041b=this['battler']();if(!_0x18041b)return;if(_0x117617)this[_0x3a9069(0xb6f)](_0x375bdf+_0x18041b[_0x3a9069(0x924)],_0x1ab8ef+_0x18041b[_0x3a9069(0x560)],![]);_0x26c30e+=_0x18041b[_0x3a9069(0x924)]-_0x18041b[_0x3a9069(0xa7d)],_0x516f5c+=_0x18041b[_0x3a9069(0x560)]-_0x18041b[_0x3a9069(0x17f)],_0x18041b[_0x3a9069(0xa97)](_0x4da273,_0x1d7322,_0x56407f);if(_0x176496[_0x3a9069(0x1ec)])_0x18041b[_0x3a9069(0x2fa)](_0x25e155||_0x3a9069(0x25d));}}for(const _0x449dd8 of _0x16278e){if(_0x3a9069(0x61e)!==_0x3a9069(0x61e)){const _0x3583e7=_0x300ad8[_0x3a9069(0x7a7)](this['fontSize'](),_0x54caed[_0x3a9069(0xa45)]),_0x223bdf=_0x1ac3dd[_0x3a9069(0x49d)](_0x3583e7*0x1e),_0x3c1db2=this[_0x3a9069(0x3af)](_0x223bdf,_0x3583e7),_0x1a7df8=_0x2d853e['iconWidth']/0x2,_0x3751a3=_0x3c1db2[_0x3a9069(0xa39)]['measureTextWidth'](_0x5d3178+'\x20');_0x3c1db2['bitmap'][_0x3a9069(0xab4)]=_0x2b99ec[_0x3a9069(0x34c)](_0x3398a6['textColor']),_0x3c1db2[_0x3a9069(0xa39)][_0x3a9069(0x733)](_0xcd787b,_0x1a7df8,0x0,_0x223bdf-_0x1a7df8,_0x3583e7,_0x3a9069(0x7b6));const _0x471ab0=_0x53caee['round']((_0x3583e7-_0x3fe5da[_0x3a9069(0xa45)])/0x2),_0x434bff=_0x223bdf/0x2-_0x12a830['iconWidth']-_0x3751a3/0x2+_0x1a7df8/0x2,_0xe54e5b=_0x593bc0[_0x3a9069(0x9d0)]('IconSet'),_0x1bec85=_0x3136f7[_0x3a9069(0x962)],_0x2cab11=_0x235a15['iconHeight'],_0x4f4f08=_0x1e7910%0x10*_0x1bec85,_0x26ea81=_0x4a3757[_0x3a9069(0x49d)](_0x28d21d/0x10)*_0x2cab11;_0x3c1db2['bitmap'][_0x3a9069(0x1b1)](_0xe54e5b,_0x4f4f08,_0x26ea81,_0x1bec85,_0x2cab11,_0x434bff,_0x471ab0),this[_0x3a9069(0x58c)]=_0x5cd5a7[_0x3a9069(0xa1e)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x2fe62[_0x3a9069(0x480)](this['_flashColor']),this[_0x3a9069(0x9df)]=_0x37eb8f[_0x3a9069(0x2b1)]||0x0,_0x3c1db2['dy']=0x0;}else{if(VisuMZ['BattleCore']['_commonEventKey'][_0x449dd8]){if(_0x3a9069(0x361)==='iQwFo')_0x3b05ae+=_0x39bd53(_0x4bda52['$1']);else{const _0x2e95cc=VisuMZ['BattleCore']['_commonEventKey'][_0x449dd8],_0x385ea9={'code':0x2c,'dataId':_0x2e95cc,'value1':0x1,'value2':0x0};_0x594e05[_0x3a9069(0x83b)][_0x3a9069(0x9cd)](_0x385ea9);}}}}},Scene_Boot[_0x3df63e(0x655)][_0x3df63e(0x7df)]=function(){const _0x420591=_0x3df63e,_0x43cda2=$dataSkills[_0x420591(0x913)]($dataItems);for(const _0x455e64 of _0x43cda2){if(_0x420591(0x96f)===_0x420591(0x96f)){if(!_0x455e64)continue;VisuMZ[_0x420591(0xa69)][_0x420591(0x240)](_0x455e64);}else this['selectNextActor']();}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xaf3)]=VisuMZ[_0x3df63e(0xaf3)],VisuMZ[_0x3df63e(0xaf3)]=function(_0x62c0ff){const _0x1f8a59=_0x3df63e;VisuMZ[_0x1f8a59(0xa69)][_0x1f8a59(0xaf3)]&&VisuMZ['BattleCore'][_0x1f8a59(0xaf3)][_0x1f8a59(0x5d9)](this,_0x62c0ff),VisuMZ[_0x1f8a59(0xa69)]['Parse_Notetags_TraitObjects'](_0x62c0ff);},VisuMZ['BattleCore'][_0x3df63e(0x884)]=VisuMZ[_0x3df63e(0x884)],VisuMZ[_0x3df63e(0x884)]=function(_0x4e0e90){const _0x2b78e7=_0x3df63e;if(VisuMZ[_0x2b78e7(0xa69)][_0x2b78e7(0x884)]){if(_0x2b78e7(0x634)===_0x2b78e7(0x634))VisuMZ['BattleCore'][_0x2b78e7(0x884)]['call'](this,_0x4e0e90);else{if(!_0x198c4f[_0x2b78e7(0x421)]()){const _0x6241ee=_0x368d6e[_0x2b78e7(0x6ad)](_0x218286['x'],_0x4bf2fd['y']);if(this[_0x2b78e7(0x27e)]&&this[_0x2b78e7(0x949)][_0x6241ee])return this[_0x2b78e7(0x949)][_0x6241ee];}return _0x3ded44[_0x2b78e7(0xa69)][_0x2b78e7(0x842)][_0x2b78e7(0x5d9)](this);}}VisuMZ[_0x2b78e7(0xa69)][_0x2b78e7(0x349)](_0x4e0e90);},VisuMZ[_0x3df63e(0xa69)]['ParseSkillNotetags']=VisuMZ[_0x3df63e(0x22c)],VisuMZ[_0x3df63e(0x22c)]=function(_0x13ea1f){const _0x46327b=_0x3df63e;VisuMZ[_0x46327b(0xa69)]['ParseSkillNotetags']&&VisuMZ[_0x46327b(0xa69)]['ParseSkillNotetags'][_0x46327b(0x5d9)](this,_0x13ea1f),VisuMZ[_0x46327b(0xa69)][_0x46327b(0xb95)](_0x13ea1f),VisuMZ[_0x46327b(0xa69)][_0x46327b(0x240)](_0x13ea1f);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5ae)]=VisuMZ[_0x3df63e(0x5ae)],VisuMZ[_0x3df63e(0x5ae)]=function(_0x52932c){const _0x45e6cd=_0x3df63e;VisuMZ[_0x45e6cd(0xa69)][_0x45e6cd(0x5ae)]&&(_0x45e6cd(0x4c5)!==_0x45e6cd(0x4c5)?(_0x1d9888+=_0xf0bf0e[_0x45e6cd(0x4d0)]['OffsetX']||0x0,_0x4148f9+=_0x3e1c5e['Actor'][_0x45e6cd(0x3b3)]||0x0):VisuMZ[_0x45e6cd(0xa69)]['ParseItemNotetags']['call'](this,_0x52932c)),VisuMZ[_0x45e6cd(0xa69)][_0x45e6cd(0xb95)](_0x52932c),VisuMZ[_0x45e6cd(0xa69)]['Parse_Notetags_Targets'](_0x52932c);},VisuMZ['BattleCore'][_0x3df63e(0x20b)]=VisuMZ[_0x3df63e(0x20b)],VisuMZ[_0x3df63e(0x20b)]=function(_0x430628){const _0x299a97=_0x3df63e;VisuMZ[_0x299a97(0xa69)][_0x299a97(0x20b)]&&VisuMZ[_0x299a97(0xa69)][_0x299a97(0x20b)]['call'](this,_0x430628),VisuMZ[_0x299a97(0xa69)][_0x299a97(0x349)](_0x430628);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x9f8)]=VisuMZ[_0x3df63e(0x9f8)],VisuMZ['ParseArmorNotetags']=function(_0x33da3d){const _0x4126f7=_0x3df63e;VisuMZ[_0x4126f7(0xa69)][_0x4126f7(0x9f8)]&&VisuMZ[_0x4126f7(0xa69)][_0x4126f7(0x9f8)][_0x4126f7(0x5d9)](this,_0x33da3d),VisuMZ[_0x4126f7(0xa69)][_0x4126f7(0x349)](_0x33da3d);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x920)]=VisuMZ[_0x3df63e(0x920)],VisuMZ[_0x3df63e(0x920)]=function(_0x534c77){const _0x2c675b=_0x3df63e;if(VisuMZ[_0x2c675b(0xa69)][_0x2c675b(0x920)]){if(_0x2c675b(0x188)==='MduJr')VisuMZ[_0x2c675b(0xa69)]['ParseEnemyNotetags']['call'](this,_0x534c77);else return _0x48d64e[_0x2c675b(0xa69)]['Settings'][_0x2c675b(0x642)][_0x2c675b(0xb81)];}VisuMZ[_0x2c675b(0xa69)][_0x2c675b(0x349)](_0x534c77);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5ac)]=VisuMZ[_0x3df63e(0x5ac)],VisuMZ['ParseStateNotetags']=function(_0x19f737){const _0x1c9246=_0x3df63e;if(VisuMZ[_0x1c9246(0xa69)][_0x1c9246(0x5ac)]){if(_0x1c9246(0x893)==='iwSVu'){if(!_0x4f1be8[_0x1c9246(0x8e3)]())return;const _0x2a3c4d=this['battler']();if(!_0x2a3c4d)return;_0x2a3c4d[_0x1c9246(0x87b)](_0x5a3180,_0x46c117,_0xddc3c5,_0x290282);}else VisuMZ[_0x1c9246(0xa69)]['ParseStateNotetags'][_0x1c9246(0x5d9)](this,_0x19f737);}VisuMZ[_0x1c9246(0xa69)][_0x1c9246(0x349)](_0x19f737);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb95)]=function(_0x479f2b){const _0x5cfc27=_0x3df63e,_0x47d9e2=[_0x5cfc27(0x610),_0x5cfc27(0x4f4),_0x5cfc27(0xaa2),'PostDamageJS','PreStartActionJS','PostStartActionJS','PreEndActionJS',_0x5cfc27(0x609)];for(const _0x1dfe29 of _0x47d9e2){_0x5cfc27(0x427)!==_0x5cfc27(0x427)?this[_0x5cfc27(0xafa)](_0x5c48e['toUpperCase']()['trim']()):VisuMZ[_0x5cfc27(0xa69)][_0x5cfc27(0x60c)](_0x479f2b,_0x1dfe29);}const _0x380da5=_0x479f2b['note'];_0x380da5[_0x5cfc27(0x64e)](/<ALWAYS CRITICAL/i)&&(_0x479f2b[_0x5cfc27(0x9e0)][_0x5cfc27(0x8da)]=!![]),_0x380da5[_0x5cfc27(0x64e)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x479f2b['repeats']=Math['max'](0x1,Number(RegExp['$1']))),_0x380da5[_0x5cfc27(0x64e)](/<TARGET:[ ](.*)>/i)&&(_0x479f2b[_0x5cfc27(0x8f4)]=String(RegExp['$1'])[_0x5cfc27(0x17c)]()[_0x5cfc27(0x9d2)]());},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x349)]=function(_0x1bcacf){const _0xd1ff63=_0x3df63e,_0x583828=[_0xd1ff63(0xa30),_0xd1ff63(0x4e1),_0xd1ff63(0xb33),_0xd1ff63(0x46f),_0xd1ff63(0x865),_0xd1ff63(0x917),_0xd1ff63(0xb83),_0xd1ff63(0x616),_0xd1ff63(0x8f7),_0xd1ff63(0x4f5),'PreEndActionJS','PostEndActionJS',_0xd1ff63(0xa12),_0xd1ff63(0x64c),_0xd1ff63(0x8dd),_0xd1ff63(0xac7),'BattleVictoryJS','BattleDefeatJS',_0xd1ff63(0x3fe),_0xd1ff63(0x353),_0xd1ff63(0x283),'PostStartTurnJS',_0xd1ff63(0xa40),_0xd1ff63(0xb44),_0xd1ff63(0x419),'PostRegenerateJS'];for(const _0x54ae45 of _0x583828){VisuMZ[_0xd1ff63(0xa69)][_0xd1ff63(0x60c)](_0x1bcacf,_0x54ae45);}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x240)]=function(_0x5a8622){const _0x394ecc=_0x3df63e,_0x47a193=_0x5a8622[_0x394ecc(0x45f)];if(_0x47a193[_0x394ecc(0x64e)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x19ac66=String(RegExp['$1']),_0x4a7912=VisuMZ[_0x394ecc(0xa69)]['createKeyJS'](_0x5a8622,_0x394ecc(0x9f6));VisuMZ['BattleCore'][_0x394ecc(0x2bb)](_0x19ac66,_0x4a7912);}if(_0x47a193[_0x394ecc(0x64e)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x502095=String(RegExp['$1']),_0x459905=VisuMZ[_0x394ecc(0xa69)]['createKeyJS'](_0x5a8622,_0x394ecc(0x9f2));VisuMZ[_0x394ecc(0xa69)][_0x394ecc(0x706)](_0x502095,_0x459905);}},VisuMZ[_0x3df63e(0xa69)]['JS']={},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x60c)]=function(_0x5e8cf3,_0x21d2ff){const _0x20fcde=_0x3df63e,_0x540565=_0x5e8cf3[_0x20fcde(0x45f)];if(_0x540565['match'](VisuMZ[_0x20fcde(0xa69)][_0x20fcde(0x45a)][_0x21d2ff])){const _0x41e8ea=RegExp['$1'],_0x5f20e0=_0x20fcde(0x97c)['format'](_0x41e8ea),_0x39d9bf=VisuMZ['BattleCore'][_0x20fcde(0x3c1)](_0x5e8cf3,_0x21d2ff);VisuMZ[_0x20fcde(0xa69)]['JS'][_0x39d9bf]=new Function(_0x5f20e0);}},VisuMZ[_0x3df63e(0xa69)]['createKeyJS']=function(_0x1fd1fb,_0x274989){const _0x3f6fba=_0x3df63e;let _0x1be309='';if($dataActors[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0xb20)['format'](_0x1fd1fb['id'],_0x274989);if($dataClasses[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0x509)[_0x3f6fba(0x4f8)](_0x1fd1fb['id'],_0x274989);if($dataSkills[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309='Skill-%1-%2'[_0x3f6fba(0x4f8)](_0x1fd1fb['id'],_0x274989);if($dataItems[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0x324)[_0x3f6fba(0x4f8)](_0x1fd1fb['id'],_0x274989);if($dataWeapons['includes'](_0x1fd1fb))_0x1be309='Weapon-%1-%2'['format'](_0x1fd1fb['id'],_0x274989);if($dataArmors[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0x2c4)[_0x3f6fba(0x4f8)](_0x1fd1fb['id'],_0x274989);if($dataEnemies[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0x788)[_0x3f6fba(0x4f8)](_0x1fd1fb['id'],_0x274989);if($dataStates[_0x3f6fba(0xa22)](_0x1fd1fb))_0x1be309=_0x3f6fba(0x3b9)['format'](_0x1fd1fb['id'],_0x274989);return _0x1be309;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x2bb)]=function(_0x5a2c90,_0x55c224){const _0x5a308c=_0x3df63e,_0x4b45df=_0x5a308c(0x4b6)[_0x5a308c(0x4f8)](_0x5a2c90);VisuMZ[_0x5a308c(0xa69)]['JS'][_0x55c224]=new Function(_0x4b45df);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x706)]=function(_0x3801fb,_0x3eb223){const _0xb6edc0=_0x3df63e,_0x3b69a9=_0xb6edc0(0x8cc)[_0xb6edc0(0x4f8)](_0x3801fb);VisuMZ[_0xb6edc0(0xa69)]['JS'][_0x3eb223]=new Function(_0x3b69a9);},TextManager[_0x3df63e(0xafe)]=VisuMZ['BattleCore']['Settings'][_0x3df63e(0x5d0)][_0x3df63e(0x5f2)],TextManager['autoBattleStart']=VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x3df63e(0xb00)],TextManager[_0x3df63e(0x535)]=VisuMZ['BattleCore'][_0x3df63e(0x5eb)][_0x3df63e(0xb3c)][_0x3df63e(0x6bc)],TextManager[_0x3df63e(0xa56)]=VisuMZ[_0x3df63e(0xa69)]['Settings'][_0x3df63e(0x9c4)]['Name'],ColorManager['getColor']=function(_0xc69a50){const _0x343e03=_0x3df63e;_0xc69a50=String(_0xc69a50);if(_0xc69a50[_0x343e03(0x64e)](/#(.*)/i)){if(_0x343e03(0xad5)!=='UOokJ')return _0x343e03(0x850)[_0x343e03(0x4f8)](String(RegExp['$1']));else this['x']=this[_0x343e03(0x7d7)]()[_0x343e03(0x669)]()[_0x343e03(0x924)];}else return this[_0x343e03(0xab4)](Number(_0xc69a50));},DataManager[_0x3df63e(0x2dd)]=function(_0x42372e){const _0x1aa00f=_0x3df63e;if(_0x42372e[_0x1aa00f(0x45f)][_0x1aa00f(0x64e)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x1aa00f(0x9f9)==='GBWBk'){if(!_0x23f0b8[_0x1aa00f(0x8e3)]())return;if(this[_0x1aa00f(0x337)])return;this[_0x1aa00f(0x337)]=!![];const _0x4e913c=this[_0x1aa00f(0x669)]();if(_0x4e913c)_0x4e913c['stepFlinch']();}else{const _0x3a4e12=String(RegExp['$1'])['toUpperCase']()[_0x1aa00f(0x9d2)]();if(_0x3a4e12==='MANUAL')return _0x1aa00f(0xbb0);if(VisuMZ[_0x1aa00f(0x666)][_0x3a4e12])return _0x3a4e12;}}const _0x579158=VisuMZ[_0x1aa00f(0xa69)][_0x1aa00f(0x5eb)][_0x1aa00f(0x488)][_0x1aa00f(0x3cb)][_0x1aa00f(0x17c)]()[_0x1aa00f(0x9d2)]();if(VisuMZ[_0x1aa00f(0x666)][_0x579158])return _0x579158;return'MANUAL';},DataManager[_0x3df63e(0xab2)]=function(_0x3a8c08){const _0xb9941c=_0x3df63e;_0x3a8c08=_0x3a8c08[_0xb9941c(0x17c)]()[_0xb9941c(0x9d2)](),this[_0xb9941c(0x1f4)]=this[_0xb9941c(0x1f4)]||{};if(this[_0xb9941c(0x1f4)][_0x3a8c08])return this[_0xb9941c(0x1f4)][_0x3a8c08];for(let _0x57a16e=0x1;_0x57a16e<0x64;_0x57a16e++){if(_0xb9941c(0x728)!==_0xb9941c(0x9fb)){if(!$dataSystem[_0xb9941c(0x2cc)][_0x57a16e])continue;let _0x5b88a9=$dataSystem[_0xb9941c(0x2cc)][_0x57a16e][_0xb9941c(0x17c)]()[_0xb9941c(0x9d2)]();_0x5b88a9=_0x5b88a9[_0xb9941c(0x455)](/\x1I\[(\d+)\]/gi,''),_0x5b88a9=_0x5b88a9['replace'](/\\I\[(\d+)\]/gi,''),this[_0xb9941c(0x1f4)][_0x5b88a9]=_0x57a16e;}else _0x132e7e[_0xb9941c(0x655)]['resetFontSettings'][_0xb9941c(0x5d9)](this),this[_0xb9941c(0x546)][_0xb9941c(0x444)]=_0x1aa8cb[_0xb9941c(0xa69)][_0xb9941c(0x5eb)][_0xb9941c(0x580)][_0xb9941c(0xb70)];}return this[_0xb9941c(0x1f4)][_0x3a8c08]||0x0;},DataManager[_0x3df63e(0x227)]=function(_0x2f4c4b){const _0x565920=_0x3df63e;_0x2f4c4b=_0x2f4c4b[_0x565920(0x17c)]()[_0x565920(0x9d2)](),this['_skillIDs']=this['_skillIDs']||{};if(this[_0x565920(0xa15)][_0x2f4c4b])return this[_0x565920(0xa15)][_0x2f4c4b];for(const _0x244a8d of $dataSkills){if(!_0x244a8d)continue;this[_0x565920(0xa15)][_0x244a8d[_0x565920(0xae2)][_0x565920(0x17c)]()['trim']()]=_0x244a8d['id'];}return this[_0x565920(0xa15)][_0x2f4c4b]||0x0;},DataManager[_0x3df63e(0x582)]=function(_0x2a1144){const _0x18208d=_0x3df63e;_0x2a1144=_0x2a1144['toUpperCase']()[_0x18208d(0x9d2)](),this[_0x18208d(0x2fb)]=this[_0x18208d(0x2fb)]||{};if(this[_0x18208d(0x2fb)][_0x2a1144])return this[_0x18208d(0x2fb)][_0x2a1144];for(const _0x36a4a2 of $dataEnemies){if(!_0x36a4a2)continue;this[_0x18208d(0x2fb)][_0x36a4a2[_0x18208d(0xae2)][_0x18208d(0x17c)]()[_0x18208d(0x9d2)]()]=_0x36a4a2['id'];}return this[_0x18208d(0x2fb)][_0x2a1144]||0x0;},DataManager[_0x3df63e(0x97f)]=function(_0x448a6c){const _0x5743a5=_0x3df63e;_0x448a6c=_0x448a6c['toUpperCase']()['trim'](),this['_wtypeIDs']=this[_0x5743a5(0x78c)]||{};if(this[_0x5743a5(0x78c)][_0x448a6c])return this['_wtypeIDs'][_0x448a6c];for(let _0x3a086f=0x1;_0x3a086f<0x64;_0x3a086f++){if(!$dataSystem[_0x5743a5(0x907)][_0x3a086f])continue;let _0x20b1d8=$dataSystem[_0x5743a5(0x907)][_0x3a086f][_0x5743a5(0x17c)]()['trim']();_0x20b1d8=_0x20b1d8['replace'](/\x1I\[(\d+)\]/gi,''),_0x20b1d8=_0x20b1d8[_0x5743a5(0x455)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x20b1d8]=_0x3a086f;}return this[_0x5743a5(0x78c)][_0x5743a5(0x5de)]=0x0,this['_wtypeIDs'][_0x448a6c]||0x0;},DataManager['battleDisplayText']=function(_0x57e43c){const _0x1598cc=_0x3df63e,_0x3df2fa='\x5cI[%1]%2';let _0x24188f=_0x57e43c['iconIndex'],_0x191c67=_0x57e43c[_0x1598cc(0xae2)];const _0x27b5fb=_0x57e43c['note'];return _0x27b5fb[_0x1598cc(0x64e)](/<DISPLAY ICON: (\d+)>/i)&&(_0x24188f=Number(RegExp['$1'])),_0x27b5fb['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x191c67=String(RegExp['$1'])),_0x3df2fa['format'](_0x24188f,_0x191c67);},DataManager['battleCommandName']=function(_0x2b3070){const _0x43b7af=_0x3df63e;return _0x2b3070[_0x43b7af(0x45f)][_0x43b7af(0x64e)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x2b3070[_0x43b7af(0xae2)];},DataManager['battleCommandIcon']=function(_0x4b59b1){const _0x2d5c8b=_0x3df63e;if(_0x4b59b1[_0x2d5c8b(0x45f)][_0x2d5c8b(0x64e)](/<COMMAND ICON: (\d+)>/i)){if(_0x2d5c8b(0x6a8)!==_0x2d5c8b(0x611))return Number(RegExp['$1']);else _0x67544a=_0x511544['BattleCore'][_0x2d5c8b(0xa96)]['call'](this);}else return _0x4b59b1[_0x2d5c8b(0xb91)];},DataManager[_0x3df63e(0x7cb)]=function(_0x50d6e6){const _0x37dca5=_0x3df63e,_0x4aced4=$dataEnemies[_0x50d6e6];if(_0x4aced4){if('iByTs'!==_0x37dca5(0x670)){const _0x578be1=_0x44fcd4[_0x37dca5(0xa69)]['Settings'][_0x37dca5(0x688)];if(_0x578be1[_0x37dca5(0xb2d)]>0x0&&_0x33556f[_0x578be1[_0x37dca5(0xb2d)]]){const _0x15c82c=_0x18fcc5[_0x578be1['BattleStartEvent']],_0x2bc4d1=_0x15c82c['list'][_0x37dca5(0xb02)]-0x2,_0x13701b=_0x15c82c[_0x37dca5(0x672)][_0x2bc4d1];if(_0x13701b&&_0x13701b[_0x37dca5(0xb96)]!==0xe6){const _0x4f931c={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5e8faa=_0x15c82c[_0x37dca5(0x672)][_0x37dca5(0x311)]();_0x15c82c[_0x37dca5(0x672)]['unshift'](_0x4f931c),_0x15c82c[_0x37dca5(0x672)][_0x37dca5(0x9e4)](_0x5e8faa);}}}else{if(_0x4aced4[_0x37dca5(0x45f)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x430a26=String(RegExp['$1'])[_0x37dca5(0xaa8)](/[\r\n]+/)[_0x37dca5(0x44f)](''),_0xf53c86=this[_0x37dca5(0xa27)](_0x430a26);_0x50d6e6=this[_0x37dca5(0x582)](_0xf53c86)||_0x50d6e6,_0x50d6e6=DataManager['swapEnemyIDs'](_0x50d6e6);}}}return _0x50d6e6;},DataManager['processRandomizedData']=function(_0x1fa052){const _0x255227=_0x3df63e;let _0x3c4d69=0x0;const _0x2f52de={};for(const _0x34e461 of _0x1fa052){if(_0x34e461[_0x255227(0x64e)](/(.*):[ ](\d+)/i)){const _0x5dba1d=String(RegExp['$1'])[_0x255227(0x9d2)](),_0x55ee9d=Number(RegExp['$2']);_0x2f52de[_0x5dba1d]=_0x55ee9d,_0x3c4d69+=_0x55ee9d;}else{if(_0x34e461[_0x255227(0x64e)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x255227(0x2b9)!=='InFph'){const _0x3c3aec=String(RegExp['$1'])[_0x255227(0x9d2)](),_0x41e8b8=Number(RegExp['$2']);_0x2f52de[_0x3c3aec]=_0x41e8b8,_0x3c4d69+=_0x41e8b8;}else{const _0x191dae=this[_0x255227(0x918)]()[_0x255227(0x8f4)];return _0x191dae[_0x255227(0x64e)](/(?:RAND|RANDOM)/i);}}else _0x34e461!==''&&(_0x2f52de[_0x34e461]=0x1,_0x3c4d69++);}}if(_0x3c4d69<=0x0)return'';let _0x532813=Math[_0x255227(0x9eb)]()*_0x3c4d69;for(const _0x2dac32 in _0x2f52de){_0x532813-=_0x2f52de[_0x2dac32];if(_0x532813<=0x0)return _0x2dac32;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x4cc33d){const _0x21f63a=_0x3df63e;if(!_0x4cc33d)return![];if(!VisuMZ[_0x21f63a(0xa69)][_0x21f63a(0x5eb)][_0x21f63a(0x862)][_0x21f63a(0x3a6)])return![];if(_0x4cc33d[_0x21f63a(0x45f)][_0x21f63a(0x64e)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4cc33d[_0x21f63a(0x45f)][_0x21f63a(0x64e)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x5e1f9e of _0x4cc33d[_0x21f63a(0x83b)]){if(!_0x5e1f9e)continue;if(_0x5e1f9e['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x3df63e(0x20f)]=function(_0x586e17){const _0x59729a=_0x3df63e,_0x6ced5e=$dataTroops[_0x586e17];if(!_0x6ced5e)return'';let _0x13e94f='';_0x13e94f+=_0x6ced5e[_0x59729a(0xae2)];for(const _0x8e8d1 of _0x6ced5e[_0x59729a(0x9a3)]){for(const _0x3a2b8d of _0x8e8d1[_0x59729a(0x672)]){[0x6c,0x198][_0x59729a(0xa22)](_0x3a2b8d[_0x59729a(0xb96)])&&(_0x13e94f+='\x0a',_0x13e94f+=_0x3a2b8d[_0x59729a(0x547)][0x0]);}}return _0x13e94f;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x3df63e(0x4bf)]??![],ConfigManager[_0x3df63e(0xb64)]=ConfigManager[_0x3df63e(0xb64)]??![],ConfigManager[_0x3df63e(0xa56)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x829)]=ConfigManager[_0x3df63e(0xb30)],ConfigManager[_0x3df63e(0xb30)]=function(){const _0x2680a8=_0x3df63e,_0x295448=VisuMZ[_0x2680a8(0xa69)][_0x2680a8(0x829)][_0x2680a8(0x5d9)](this);return _0x295448[_0x2680a8(0x4bf)]=this[_0x2680a8(0x4bf)],_0x295448[_0x2680a8(0xb64)]=this[_0x2680a8(0xb64)],_0x295448[_0x2680a8(0xa56)]=this['visualHpGauge'],_0x295448;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x54f)]=ConfigManager[_0x3df63e(0xaa5)],ConfigManager['applyData']=function(_0x30a76b){const _0x832fd3=_0x3df63e;VisuMZ['BattleCore'][_0x832fd3(0x54f)]['call'](this,_0x30a76b),_0x832fd3(0x4bf)in _0x30a76b?'DnOkI'===_0x832fd3(0x97e)?this[_0x832fd3(0x4bf)]=_0x30a76b[_0x832fd3(0x4bf)]:_0x32bba5[_0x832fd3(0x671)]('battleAnimation'):this[_0x832fd3(0x4bf)]=![],_0x832fd3(0xb64)in _0x30a76b?this[_0x832fd3(0xb64)]=_0x30a76b[_0x832fd3(0xb64)]:this['autoBattleUseSkills']=![],_0x832fd3(0xa56)in _0x30a76b?this[_0x832fd3(0xa56)]=_0x30a76b[_0x832fd3(0xa56)]:this[_0x832fd3(0xa56)]=!![];},VisuMZ['BattleCore'][_0x3df63e(0x66e)]=BattleManager['initMembers'],BattleManager[_0x3df63e(0x9a5)]=function(){const _0x532db2=_0x3df63e;VisuMZ[_0x532db2(0xa69)][_0x532db2(0x66e)][_0x532db2(0x5d9)](this),this[_0x532db2(0x1ae)]=[];},BattleManager[_0x3df63e(0x329)]=function(){const _0x22238a=_0x3df63e;if(!SceneManager[_0x22238a(0x2a9)]())return;const _0x2a732d=SceneManager[_0x22238a(0x8e2)][_0x22238a(0x802)];if(_0x2a732d)_0x2a732d['requestRefresh']();},BattleManager[_0x3df63e(0x6c3)]=function(){const _0x3cb108=_0x3df63e;if(BattleManager[_0x3cb108(0x9a8)]())return _0x3cb108(0xa00);return _0x3cb108(0x819);},BattleManager[_0x3df63e(0x678)]=function(_0xe53f52){const _0x41b14f=_0x3df63e;return _0xe53f52=_0xe53f52['toUpperCase']()[_0x41b14f(0x9d2)](),this[_0x41b14f(0x6c3)]()===_0xe53f52;},BattleManager[_0x3df63e(0x344)]=function(){const _0x4a396a=_0x3df63e;return this[_0x4a396a(0x678)](_0x4a396a(0x819));},BattleManager[_0x3df63e(0x763)]=function(){const _0x5b0ea1=_0x3df63e;return this[_0x5b0ea1(0x344)]();},BattleManager[_0x3df63e(0x2a3)]=function(){const _0x5699a3=_0x3df63e;return!this[_0x5699a3(0x763)]();},BattleManager[_0x3df63e(0xa94)]=function(){const _0x482165=_0x3df63e;return!this[_0x482165(0x763)]()&&!this['isTickBased']();},BattleManager[_0x3df63e(0xaba)]=function(_0x1e7da8){const _0x541242=_0x3df63e;$gameParty[_0x541242(0xaba)](_0x1e7da8),$gameTroop[_0x541242(0xaba)](_0x1e7da8);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x813)]=BattleManager[_0x3df63e(0x67c)],BattleManager['startBattle']=function(){const _0x3e7d8e=_0x3df63e;this[_0x3e7d8e(0x296)]=![],this[_0x3e7d8e(0x938)]=ConfigManager[_0x3e7d8e(0x4bf)],this[_0x3e7d8e(0xaba)](_0x3e7d8e(0xa12)),VisuMZ[_0x3e7d8e(0xa69)]['BattleManager_startBattle'][_0x3e7d8e(0x5d9)](this),this[_0x3e7d8e(0xaba)](_0x3e7d8e(0x64c));},BattleManager[_0x3df63e(0x3dc)]=function(_0xc270c){const _0xa2e668=_0x3df63e,_0x51a04b=VisuMZ['BattleCore'][_0xa2e668(0x5eb)]['Mechanics'];if(_0x51a04b[_0xa2e668(0x63d)]&&VisuMZ[_0xa2e668(0xa69)]['CheckMapBattleEventValid'](_0x51a04b['BattleEndEvent'])){if(_0xa2e668(0x345)!==_0xa2e668(0x784))$gameTemp[_0xa2e668(0x26d)](_0x51a04b[_0xa2e668(0x63d)]);else return this[_0xa2e668(0xa93)]();}const _0x42e1a9='%1Event'[_0xa2e668(0x4f8)](_0xc270c);_0x51a04b[_0x42e1a9]&&VisuMZ[_0xa2e668(0xa69)]['CheckMapBattleEventValid'](_0x51a04b[_0x42e1a9])&&$gameTemp[_0xa2e668(0x26d)](_0x51a04b[_0x42e1a9]);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x50c)]=BattleManager[_0x3df63e(0x9d9)],BattleManager['processVictory']=function(){const _0x19539a=_0x3df63e;this[_0x19539a(0xaba)](_0x19539a(0xabf)),VisuMZ[_0x19539a(0xa69)]['BattleManager_processVictory'][_0x19539a(0x5d9)](this),this[_0x19539a(0x3dc)](_0x19539a(0x7b1));},VisuMZ['BattleCore'][_0x3df63e(0x69f)]=BattleManager[_0x3df63e(0x637)],BattleManager['processDefeat']=function(){const _0xc04c61=_0x3df63e;this[_0xc04c61(0xaba)]('BattleDefeatJS'),VisuMZ[_0xc04c61(0xa69)]['BattleManager_processDefeat'][_0xc04c61(0x5d9)](this),this[_0xc04c61(0x3dc)]('Defeat');},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x9f0)]=BattleManager[_0x3df63e(0x24e)],BattleManager[_0x3df63e(0x24e)]=function(_0x54dec8){const _0x3612ef=_0x3df63e;this['_endBattle']=!![],this[_0x3612ef(0x938)]=![],this[_0x3612ef(0xaba)]('PreEndBattleJS'),VisuMZ[_0x3612ef(0xa69)][_0x3612ef(0x9f0)][_0x3612ef(0x5d9)](this,_0x54dec8),this[_0x3612ef(0xaba)]('PostEndBattleJS');},VisuMZ[_0x3df63e(0xa69)]['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager[_0x3df63e(0xb5a)]=function(){const _0x844a50=_0x3df63e;if(this[_0x844a50(0x763)]())this[_0x844a50(0xaba)](_0x844a50(0x283));VisuMZ[_0x844a50(0xa69)][_0x844a50(0x7dc)]['call'](this);if(this['isTurnBased']())this[_0x844a50(0xaba)]('PostStartTurnJS');},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x22d)]=BattleManager[_0x3df63e(0xa90)],BattleManager['startAction']=function(){const _0x33a1d0=_0x3df63e,_0x360501=this['_subject'][_0x33a1d0(0x17e)](),_0xda68c2=this[_0x33a1d0(0x8fd)];_0x360501&&_0x360501[_0x33a1d0(0x473)]()===_0xda68c2&&(_0x33a1d0(0xa3b)!=='Qfluk'?_0x282f96[_0x33a1d0(0x45f)]+='<CUSTOM\x20ACTION\x20SEQUENCE>':_0x360501[_0x33a1d0(0x31a)](_0x33a1d0(0x8f7)));VisuMZ[_0x33a1d0(0xa69)][_0x33a1d0(0x22d)][_0x33a1d0(0x5d9)](this);if(_0x360501&&_0x360501[_0x33a1d0(0x473)]()===_0xda68c2){if('MKdIF'===_0x33a1d0(0x462)){if(this[_0x33a1d0(0x7ce)][_0x33a1d0(0x259)]())return;this[_0x33a1d0(0x38e)](),this[_0x33a1d0(0x2e2)](),!this[_0x33a1d0(0x8fd)]&&!this[_0x33a1d0(0x7ce)]&&_0x5ccf9d[_0x33a1d0(0x8e2)]['updateBattleProcess']();}else _0x360501[_0x33a1d0(0x31a)](_0x33a1d0(0x4f5));}},VisuMZ['BattleCore'][_0x3df63e(0x848)]=BattleManager[_0x3df63e(0x20a)],BattleManager[_0x3df63e(0x20a)]=function(){const _0x28ce5c=_0x3df63e,_0x3e87e5=this[_0x28ce5c(0xbae)],_0x3d4909=this[_0x28ce5c(0x8fd)];if(_0x3e87e5&&_0x3e87e5!==this[_0x28ce5c(0x81f)]&&_0x3e87e5[_0x28ce5c(0x473)]()===_0x3d4909){if(_0x28ce5c(0x615)===_0x28ce5c(0x615))_0x3e87e5[_0x28ce5c(0x31a)](_0x28ce5c(0x267));else return _0x50ec72[_0x28ce5c(0x1ec)]?_0x291c52[_0x28ce5c(0x624)]('ok'):_0x5c24cd['BattleCore'][_0x28ce5c(0x5eb)]['AutoBattle'][_0x28ce5c(0x284)];}VisuMZ['BattleCore'][_0x28ce5c(0x848)][_0x28ce5c(0x5d9)](this),_0x3e87e5&&_0x3e87e5!==this[_0x28ce5c(0x81f)]&&_0x3e87e5['subject']()===_0x3d4909&&('XDUUV'!==_0x28ce5c(0x797)?(this['_skillWindow'][_0x28ce5c(0xb51)](),this[_0x28ce5c(0x2ce)]['active']&&this[_0x28ce5c(0x2ce)][_0x28ce5c(0x1d7)](),this['_itemWindow'][_0x28ce5c(0xb51)](),this[_0x28ce5c(0x983)][_0x28ce5c(0xa9c)]&&this[_0x28ce5c(0x983)]['show']()):_0x3e87e5['actionBattleCoreJS'](_0x28ce5c(0x609))),this[_0x28ce5c(0x42d)](this[_0x28ce5c(0x3c0)]()),this[_0x28ce5c(0x81f)]=this['_action'];},BattleManager[_0x3df63e(0x42d)]=function(_0x3ec82a){const _0x2409dd=_0x3df63e;for(const _0x381d2e of _0x3ec82a){if(!_0x381d2e)continue;if(!_0x381d2e[_0x2409dd(0x669)]())continue;_0x381d2e[_0x2409dd(0x669)]()[_0x2409dd(0x35b)]();}},BattleManager[_0x3df63e(0xbab)]=function(){const _0x41c6d8=_0x3df63e;!this[_0x41c6d8(0x3fa)][_0x41c6d8(0x87e)]()&&(_0x41c6d8(0x1e0)===_0x41c6d8(0x1e0)?this[_0x41c6d8(0x20a)]():this[_0x41c6d8(0x5ad)]=!![]);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x496)]=function(){const _0x12b7a1=_0x3df63e;this[_0x12b7a1(0x7a4)]();if(Imported[_0x12b7a1(0x3e6)]){const _0x425699=VisuMZ[_0x12b7a1(0x7d6)][_0x12b7a1(0x5eb)][_0x12b7a1(0x30c)];_0x425699&&_0x425699[_0x12b7a1(0xb03)]===![]&&this[_0x12b7a1(0x5bd)](0x1);}else'iBjZb'===_0x12b7a1(0x3e0)?this[_0x12b7a1(0x5bd)](0x1):_0x4282f8[_0x12b7a1(0xa69)][_0x12b7a1(0x365)]['call'](this);this[_0x12b7a1(0x2a4)]();},BattleManager[_0x3df63e(0x713)]=function(){const _0x413fb8=_0x3df63e;this[_0x413fb8(0x965)]=VisuMZ[_0x413fb8(0xa69)]['Settings'][_0x413fb8(0x688)][_0x413fb8(0x3bd)][_0x413fb8(0x5d9)](this);},VisuMZ['BattleCore']['BattleManager_onEscapeSuccess']=BattleManager[_0x3df63e(0x18d)],BattleManager[_0x3df63e(0x18d)]=function(){const _0x14d426=_0x3df63e;this[_0x14d426(0xaba)](_0x14d426(0x3fe)),BattleManager[_0x14d426(0x449)]['processEscape'](),VisuMZ[_0x14d426(0xa69)][_0x14d426(0xade)][_0x14d426(0x5d9)](this),this[_0x14d426(0x3dc)](_0x14d426(0x2ee));},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x876)]=BattleManager[_0x3df63e(0x478)],BattleManager[_0x3df63e(0x478)]=function(){const _0xbd9ee1=_0x3df63e;this[_0xbd9ee1(0xaba)](_0xbd9ee1(0x353));const _0x267459=this[_0xbd9ee1(0x965)];VisuMZ[_0xbd9ee1(0xa69)][_0xbd9ee1(0x876)][_0xbd9ee1(0x5d9)](this),this[_0xbd9ee1(0x965)]=_0x267459+VisuMZ[_0xbd9ee1(0xa69)]['Settings'][_0xbd9ee1(0x688)][_0xbd9ee1(0xb62)][_0xbd9ee1(0x5d9)](this),this[_0xbd9ee1(0x3dc)](_0xbd9ee1(0x697));},BattleManager[_0x3df63e(0x350)]=function(){const _0x463bb1=_0x3df63e;let _0x31c295=![];if(this['isDisplayEmergedEnemies']())for(const _0x2ef60a of $gameTroop[_0x463bb1(0xba0)]()){this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)](_0x463bb1(0xbbc),TextManager[_0x463bb1(0x1b4)][_0x463bb1(0x4f8)](_0x2ef60a)),this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)](_0x463bb1(0x779)),_0x31c295=!![];}if(this[_0x463bb1(0xbd6)])this['_logWindow'][_0x463bb1(0x9cd)](_0x463bb1(0xbbc),TextManager[_0x463bb1(0xb60)][_0x463bb1(0x4f8)]($gameParty[_0x463bb1(0xae2)]())),this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)](_0x463bb1(0x779));else this[_0x463bb1(0x50a)]&&(_0x463bb1(0x4b1)===_0x463bb1(0x4b1)?(this['_logWindow'][_0x463bb1(0x9cd)](_0x463bb1(0xbbc),TextManager[_0x463bb1(0x625)][_0x463bb1(0x4f8)]($gameParty['name']())),this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)](_0x463bb1(0x779))):(this['_battlerContainer']=new _0x35d3f7(),this[_0x463bb1(0x9ee)][_0x463bb1(0x699)](this[_0x463bb1(0x60e)])));_0x31c295&&(this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)]('wait'),this[_0x463bb1(0x3fa)][_0x463bb1(0x9cd)](_0x463bb1(0x6be)));if(this[_0x463bb1(0x9a8)]()&&this[_0x463bb1(0x184)]()){if(_0x463bb1(0x36f)!=='QbvaF'){if(!_0x3b3ff6)return;if(!this[_0x463bb1(0x620)])return;this[_0x463bb1(0x620)]['anchor']['x']=this[_0x463bb1(0x331)][_0x463bb1(0x5d2)](),this[_0x463bb1(0x620)][_0x463bb1(0x1dd)]['y']=this[_0x463bb1(0x331)][_0x463bb1(0x952)](),this[_0x463bb1(0x4cc)]();}else this['_tpbNeedsPartyCommand']=![];}},BattleManager[_0x3df63e(0x6a4)]=function(){const _0x756b6b=_0x3df63e;if(BattleManager[_0x756b6b(0x938)])return![];return VisuMZ[_0x756b6b(0xa69)]['Settings'][_0x756b6b(0x580)]['EmergeText'];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x762)]=BattleManager['startInput'],BattleManager[_0x3df63e(0x916)]=function(){const _0x104dff=_0x3df63e;VisuMZ[_0x104dff(0xa69)]['BattleManager_startInput'][_0x104dff(0x5d9)](this),this[_0x104dff(0x344)]()&&this[_0x104dff(0x184)]()&&!this[_0x104dff(0x50a)]&&$gameParty['canInput']()&&this['selectNextCommand']();},BattleManager[_0x3df63e(0x184)]=function(){const _0x21add0=_0x3df63e;return VisuMZ['BattleCore'][_0x21add0(0x5eb)][_0x21add0(0x5d0)][_0x21add0(0x532)];},BattleManager[_0x3df63e(0x8c4)]=function(){const _0x5e5962=_0x3df63e;this[_0x5e5962(0x4f7)]()&&this[_0x5e5962(0x259)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x98f)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0xb88)],Scene_Battle['prototype'][_0x3df63e(0xb88)]=function(){const _0x3468e1=_0x3df63e;VisuMZ[_0x3468e1(0xa69)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x3468e1(0x9a8)]()&&BattleManager[_0x3468e1(0x1ef)]&&(BattleManager[_0x3468e1(0x1ef)]=![],this['actorCommandCancelTPB']());},BattleManager[_0x3df63e(0xb0c)]=function(_0x36e20e,_0x4a5001){const _0xb60430=_0x3df63e;this[_0xb60430(0xbae)][_0xb60430(0x525)]=_0x4a5001,this['_logWindow'][_0xb60430(0x321)](_0x4a5001),this[_0xb60430(0x3fa)]['displayReflectionPlayBack'](_0x36e20e,this['_action']),this[_0xb60430(0xbae)][_0xb60430(0x1c7)](_0x36e20e),this[_0xb60430(0x3fa)][_0xb60430(0xbb9)](_0x36e20e,_0x36e20e);},VisuMZ['BattleCore'][_0x3df63e(0xb06)]=BattleManager['makeActionOrders'],BattleManager[_0x3df63e(0x68b)]=function(){const _0x55b84f=_0x3df63e;VisuMZ[_0x55b84f(0xa69)][_0x55b84f(0xb06)][_0x55b84f(0x5d9)](this),this[_0x55b84f(0x9c5)]=this[_0x55b84f(0x9c5)][_0x55b84f(0xaaa)](_0x5cc96b=>_0x5cc96b&&_0x5cc96b[_0x55b84f(0xaa1)]());},VisuMZ[_0x3df63e(0xa69)]['BattleManager_updatePhase']=BattleManager[_0x3df63e(0x685)],BattleManager['updatePhase']=function(_0x10e208){const _0x2a86b4=_0x3df63e;if(this[_0x2a86b4(0x939)]===_0x2a86b4(0x54d))this[_0x2a86b4(0x29c)]();else{if(this[_0x2a86b4(0x939)]===_0x2a86b4(0x459)){if(_0x2a86b4(0xa66)!==_0x2a86b4(0x887))this['updateForceAction']();else return _0xd6dd65[_0x2a86b4(0x669)]()[_0x2a86b4(0x560)]-_0x4097d6[_0x2a86b4(0x669)]()[_0x2a86b4(0x560)];}else VisuMZ['BattleCore']['BattleManager_updatePhase'][_0x2a86b4(0x5d9)](this,_0x10e208);}},BattleManager[_0x3df63e(0x93d)]=function(){const _0x292aac=_0x3df63e;this[_0x292aac(0xa84)]=this[_0x292aac(0x229)][_0x292aac(0x3f6)](0x0),this[_0x292aac(0x9ea)]=0x0,this[_0x292aac(0x905)]=this[_0x292aac(0xa84)][0x0]||null,this[_0x292aac(0x939)]=_0x292aac(0x54d);},BattleManager[_0x3df63e(0x29c)]=function(){const _0x2bd6d3=_0x3df63e;if(!this[_0x2bd6d3(0x494)]()&&!this['_logWindow'][_0x2bd6d3(0x87e)]()){if('qomzH'!==_0x2bd6d3(0x47b))return this['_attackAnimationId']||0x0;else this[_0x2bd6d3(0x939)]=_0x2bd6d3(0x834);}},BattleManager['forceAction']=function(_0x22770d){const _0xf41194=_0x3df63e;this[_0xf41194(0x9c5)][_0xf41194(0x44f)](_0x22770d);if(_0x22770d===this['_subject'])return;const _0x57438c=JsonEx['makeDeepCopy'](_0x22770d['currentAction']());this[_0xf41194(0x1ae)][_0xf41194(0x9cd)]([_0x22770d,_0x57438c]);},BattleManager[_0x3df63e(0xac0)]=function(){},BattleManager['updateStart']=function(){const _0x527b6a=_0x3df63e;if(this['isTpb']())this[_0x527b6a(0x939)]=_0x527b6a(0x181);else this['_forcedBattlers'][_0x527b6a(0xb02)]>0x0?_0x527b6a(0x6a5)!==_0x527b6a(0x6a5)?this[_0x527b6a(0x911)]=(this[_0x527b6a(0x911)]*(_0x5d2fb5-0x1)+this['_targetAngle'])/_0x24a15a:this[_0x527b6a(0x939)]=_0x527b6a(0x181):this[_0x527b6a(0x916)]();},BattleManager[_0x3df63e(0xb5b)]=function(){const _0x4d16c0=_0x3df63e,_0x52cfa8=this[_0x4d16c0(0x8fd)];_0x52cfa8&&this[_0x4d16c0(0x9a8)]()&&_0x52cfa8[_0x4d16c0(0x413)](_0x4d16c0(0x2c7));for(;;){if(_0x4d16c0(0x874)!==_0x4d16c0(0x874))this[_0x4d16c0(0x370)]=new _0x5d6c50(),this['addChild'](this[_0x4d16c0(0x370)]);else{const _0x27881d=this[_0x4d16c0(0xb54)]();if(!_0x27881d)return null;if(_0x27881d[_0x4d16c0(0xaf6)]()&&_0x27881d[_0x4d16c0(0x8fc)]()){if(_0x4d16c0(0x7e5)!==_0x4d16c0(0x7e5)){if(!_0x52e829['isSceneBattle']())return;_0x43f3c4[_0x4d16c0(0x368)](_0x182f3f,_0x58b470);const _0x4b53ab=_0x335f6a[_0x4d16c0(0x5d6)](),_0x44775d=_0x158c74['_subject'],_0x5b0e68=_0x1dd85d[_0x4d16c0(0x966)];if(!_0x4b53ab)return;if(!_0x44775d)return;_0x44775d&&_0x44775d[_0x4d16c0(0x9a0)]()&&_0x5b0e68[_0x4d16c0(0x17c)]()[_0x4d16c0(0x9d2)]()!==_0x4d16c0(0x59e)&&_0x4b53ab[_0x4d16c0(0x2f3)]([_0x5b0e68]);}else return _0x27881d;}}}},BattleManager['getNextSubjectFromPool']=function(){const _0x4ff4aa=_0x3df63e;if(this['_forcedBattlers'][_0x4ff4aa(0xb02)]>0x0){if(_0x4ff4aa(0x715)!==_0x4ff4aa(0x1dc)){const _0x447848=this[_0x4ff4aa(0x1ae)]['shift'](),_0x4dcfe0=_0x447848[0x0];return _0x4dcfe0[_0x4ff4aa(0x758)]=_0x4dcfe0[_0x4ff4aa(0x758)]||[],_0x4dcfe0[_0x4ff4aa(0x758)][0x0]=_0x447848[0x1],_0x4dcfe0;}else this[_0x4ff4aa(0x43f)]=!this['_enemy']['isHidden'](),!this[_0x4ff4aa(0x43f)]&&(this['opacity']=0x0);}else{if(_0x4ff4aa(0x2af)!==_0x4ff4aa(0x5e9))return this[_0x4ff4aa(0x9c5)][_0x4ff4aa(0x6b4)]();else{if(this[_0x4ff4aa(0xb2b)])return this[_0x4ff4aa(0xb2b)];return this[_0x4ff4aa(0xb2b)]=_0x296e89[_0x4ff4aa(0x8e2)]['battleLayoutStyle'](),this[_0x4ff4aa(0xb2b)];}}},VisuMZ[_0x3df63e(0xa69)]['Game_Battler_forceAction']=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x459)],Game_Battler[_0x3df63e(0x655)]['forceAction']=function(_0x5efb67,_0x5a199a){const _0x2bb5bd=_0x3df63e;VisuMZ[_0x2bb5bd(0xa69)][_0x2bb5bd(0x57c)]['call'](this,_0x5efb67,_0x5a199a),this[_0x2bb5bd(0x758)][this['_actions']['length']-0x1][_0x2bb5bd(0x28a)]=!![];},Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x16c)]=function(_0x4d25a7){return this['iterateBattler'](_0x4d25a7[0x0],_0x4d25a7[0x1],_0x471818=>{const _0x503fc0=_0x5cc5;if(!_0x471818['isDeathStateAffected']()){if('xsDzE'!==_0x503fc0(0x29a)){if(this[_0x503fc0(0x7d7)]()['note'][_0x503fc0(0x64e)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x3beb9b[_0x503fc0(0x655)][_0x503fc0(0x2f4)][_0x503fc0(0x5d9)](this);}else _0x471818[_0x503fc0(0x459)](_0x4d25a7[0x2],_0x4d25a7[0x3]),BattleManager[_0x503fc0(0x459)](_0x471818);}}),!![];},VisuMZ['BattleCore'][_0x3df63e(0x409)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x844)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x844)]=function(){const _0x4b5518=_0x3df63e;VisuMZ[_0x4b5518(0xa69)][_0x4b5518(0x409)]['call'](this),this['_actions'][_0x4b5518(0xb02)]<=0x0&&(this['_speed']=Number['MIN_SAFE_INTEGER']);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x1bb)]=BattleManager[_0x3df63e(0x259)],BattleManager['selectNextCommand']=function(){const _0x49063c=_0x3df63e;this[_0x49063c(0x9a8)]()?this['selectNextCommandTpb']():VisuMZ[_0x49063c(0xa69)]['BattleManager_selectNextCommand'][_0x49063c(0x5d9)](this);},BattleManager[_0x3df63e(0xbc4)]=function(){const _0x533634=_0x3df63e;if(this['_currentActor']){if('gboZR'===_0x533634(0x308))_0x30d825=this[_0x533634(0x569)][_0x533634(0x890)](),_0x416250=this[_0x533634(0x56f)][_0x533634(0x95e)]();else{if(this['_currentActor'][_0x533634(0x259)]())return;this[_0x533634(0x38e)](),this[_0x533634(0x2e2)](),!this['_subject']&&!this[_0x533634(0x7ce)]&&(_0x533634(0x898)!==_0x533634(0x898)?this['startMotion'](_0x533634(0xb6c)):SceneManager[_0x533634(0x8e2)][_0x533634(0x1f1)]());}}else!this[_0x533634(0x8fd)]&&(_0x533634(0xbc9)!==_0x533634(0x99c)?this[_0x533634(0x6e0)]():(_0xeb0e18+=_0x4e75f9['Enemy'][_0x533634(0x7e9)]||0x0,_0x49757d+=_0x447fbc[_0x533634(0x580)][_0x533634(0x3b3)]||0x0));},BattleManager['checkTpbInputClose']=function(){const _0x131c21=_0x3df63e;if(!this['isPartyTpbInputtable']()||this[_0x131c21(0x17d)]()){this[_0x131c21(0x606)]&&(!$gameParty[_0x131c21(0x9c3)]()[_0x131c21(0xa22)](this[_0x131c21(0x606)])&&(this[_0x131c21(0x606)]=null));if(!this['_tpbSceneChangeCacheActor']){if(_0x131c21(0x4af)===_0x131c21(0xbd2)){const _0x40374b=this[_0x131c21(0xa41)]()?this[_0x131c21(0xbba)]:0x0,_0xc5bf2c=_0x22d2d1['list'];this[_0x131c21(0x41a)](_0xc5bf2c,_0x40374b),this[_0x131c21(0x89b)]=_0x3b0f30[_0x131c21(0x480)](this[_0x131c21(0x89b)]);const _0x5a5fc4={'code':0xbc3,'indent':this[_0x131c21(0x5e7)],'parameters':_0x370aa9[_0x131c21(0x480)](_0x15e562)};return this[_0x131c21(0x89b)][_0x131c21(0x404)](this['_index']+0x1,0x0,_0x5a5fc4),!![];}else this['cancelActorInput'](),this['_currentActor']=null,this[_0x131c21(0x187)]=![];}else this[_0x131c21(0x441)]();}},BattleManager['revertTpbCachedActor']=function(){const _0x955ca9=_0x3df63e;!$gameParty[_0x955ca9(0x9c3)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x955ca9(0x606)]=null),this['_tpbSceneChangeCacheActor']?'lcSPf'==='BDXMl'?(_0x44071a[_0x955ca9(0x7f8)]()&&_0x5e6207[_0x955ca9(0x5c6)]()&&this[_0x955ca9(0x9cd)](_0x955ca9(0xb22),_0x2e580d,_0x51ed30),this[_0x955ca9(0x6c5)](_0x559376,_0xa7a9c0,_0x2f76df)):(this[_0x955ca9(0x7ce)]=this[_0x955ca9(0x606)],this[_0x955ca9(0x7ce)][_0x955ca9(0x5c2)]=_0x955ca9(0x432),this[_0x955ca9(0x187)]=!![],this[_0x955ca9(0x606)]=null):(this[_0x955ca9(0x7fd)](),this[_0x955ca9(0x7ce)]=null,this[_0x955ca9(0x187)]=![]);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb56)]=BattleManager[_0x3df63e(0xb27)],BattleManager[_0x3df63e(0xb27)]=function(){const _0x3302fc=_0x3df63e;if(this[_0x3302fc(0x939)]===_0x3302fc(0x54d)){if('QoAZC'===_0x3302fc(0x71c)){if(this[_0x3302fc(0x223)]<=0x0)return;if(!this[_0x3302fc(0x720)])return;const _0x4b5b88=this[_0x3302fc(0x223)],_0x2ef84d=this[_0x3302fc(0x440)],_0x9040ae=this['_skewEasing'],_0x5e4838=this[_0x3302fc(0x720)];_0x2d2205['VisuMZ_0_CoreEngine']?(_0x5e4838[_0x3302fc(0x1ca)]['x']=this[_0x3302fc(0x769)](_0x5e4838[_0x3302fc(0x1ca)]['x'],this['_targetSkewX'],_0x4b5b88,_0x2ef84d,_0x9040ae),_0x5e4838[_0x3302fc(0x1ca)]['y']=this[_0x3302fc(0x769)](_0x5e4838[_0x3302fc(0x1ca)]['y'],this[_0x3302fc(0xa83)],_0x4b5b88,_0x2ef84d,_0x9040ae)):(_0x5e4838[_0x3302fc(0x1ca)]['x']=(_0x5e4838[_0x3302fc(0x1ca)]['x']*(_0x4b5b88-0x1)+this[_0x3302fc(0xa2a)])/_0x4b5b88,_0x5e4838[_0x3302fc(0x1ca)]['y']=(_0x5e4838['skew']['y']*(_0x4b5b88-0x1)+this['_targetSkewY'])/_0x4b5b88);this[_0x3302fc(0x223)]--;if(this[_0x3302fc(0x223)]<=0x0)this[_0x3302fc(0xa13)]();}else return this[_0x3302fc(0x68f)]();}else return VisuMZ[_0x3302fc(0xa69)][_0x3302fc(0xb56)][_0x3302fc(0x5d9)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x1c3438=_0x3df63e;return this[_0x1c3438(0xb71)]();},VisuMZ[_0x3df63e(0xa69)]['BattleManager_cancelActorInput']=BattleManager[_0x3df63e(0x7fd)],BattleManager[_0x3df63e(0x7fd)]=function(){const _0x338e97=_0x3df63e;this[_0x338e97(0x9a8)]()&&this[_0x338e97(0x939)]===_0x338e97(0x501)&&(this[_0x338e97(0x7ce)]=null),VisuMZ[_0x338e97(0xa69)]['BattleManager_cancelActorInput'][_0x338e97(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)]['BattleManager_inputtingAction']=BattleManager[_0x3df63e(0x280)],BattleManager['inputtingAction']=function(){const _0x5e0caf=_0x3df63e,_0x4061fe=this[_0x5e0caf(0x7ce)];if(_0x4061fe&&!_0x4061fe[_0x5e0caf(0x280)]()){const _0xa74918=_0x4061fe[_0x5e0caf(0x78d)];_0x4061fe[_0x5e0caf(0x758)][_0xa74918]=new Game_Action(_0x4061fe);}return VisuMZ['BattleCore'][_0x5e0caf(0x453)][_0x5e0caf(0x5d9)](this);},SceneManager[_0x3df63e(0x2a9)]=function(){const _0x277935=_0x3df63e;return this['_scene']&&this[_0x277935(0x8e2)][_0x277935(0x1da)]===Scene_Battle;},SceneManager[_0x3df63e(0x6e7)]=function(){const _0x3169f6=_0x3df63e;return Spriteset_Battle[_0x3169f6(0x655)][_0x3169f6(0xad4)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x86969e=_0x3df63e;if(SceneManager[_0x86969e(0x81c)](Scene_Options))return!![];return![];},SceneManager[_0x3df63e(0x31e)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4c6)]=Game_Temp[_0x3df63e(0x655)][_0x3df63e(0x827)],Game_Temp[_0x3df63e(0x655)][_0x3df63e(0x827)]=function(_0x46b7c6,_0x6dbacb,_0x1157a0){const _0x55d7a1=_0x3df63e;_0x46b7c6=_0x46b7c6[_0x55d7a1(0xaaa)]((_0x4e56c6,_0x55ffe9,_0x22b148)=>_0x22b148['indexOf'](_0x4e56c6)===_0x55ffe9),SceneManager[_0x55d7a1(0x2a9)]()&&SceneManager[_0x55d7a1(0x6e7)]()&&(_0x1157a0=!_0x1157a0),VisuMZ['BattleCore'][_0x55d7a1(0x4c6)][_0x55d7a1(0x5d9)](this,_0x46b7c6,_0x6dbacb,_0x1157a0),SceneManager['isSceneBattle']()&&BattleManager[_0x55d7a1(0x449)]['processAnimationRequests']();},Game_Temp[_0x3df63e(0x655)]['setLastPluginCommandInterpreter']=function(_0x2eba8e){const _0x3fefde=_0x3df63e;this[_0x3fefde(0x7be)]=_0x2eba8e;},Game_Temp['prototype'][_0x3df63e(0x5d6)]=function(){const _0x530818=_0x3df63e;return this[_0x530818(0x7be)];},Game_Temp[_0x3df63e(0x655)]['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x3df63e(0x655)][_0x3df63e(0x198)]=function(_0x14e320){const _0x4ce32f=_0x3df63e;$gameMap&&$dataMap&&$dataMap['note']&&(_0x4ce32f(0xb4d)!==_0x4ce32f(0xb4d)?(_0x106896[_0x4ce32f(0xa69)][_0x4ce32f(0x5ff)][_0x4ce32f(0x5d9)](this,_0x4b6d61),this[_0x4ce32f(0xaad)]()&&_0x1a27ff===this[_0x4ce32f(0x693)]()&&this[_0x4ce32f(0x8fc)]()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x4ce32f(0x3c8)]&&!this['_tempBattler']&&_0x4e091b[_0x4ce32f(0x2a9)]()&&this[_0x4ce32f(0xbb2)]()):this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x4ce32f(0x45f)]));const _0x1f3e97=$dataTroops[_0x14e320];if(_0x1f3e97){if(_0x4ce32f(0x7d9)!==_0x4ce32f(0x3c4)){let _0x388026=DataManager['createTroopNote'](_0x1f3e97['id']);this[_0x4ce32f(0x940)](_0x388026);}else this[_0x4ce32f(0x80b)](_0x4ce32f(0x576));}},Game_Temp[_0x3df63e(0x655)][_0x3df63e(0x940)]=function(_0x29d368){const _0x58977b=_0x3df63e;if(!_0x29d368)return;if(_0x29d368[_0x58977b(0x64e)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x58977b(0x7d8)!=='wWNKp'){const _0x39819e=String(RegExp['$1']);if(_0x39819e[_0x58977b(0x64e)](/DEFAULT/i))this[_0x58977b(0x46b)]=_0x58977b(0xbb7);else{if(_0x39819e[_0x58977b(0x64e)](/LIST/i))'ckJGb'!=='ckJGb'?_0x2e1008+=_0xe82f25(_0x5490af['$1']):this[_0x58977b(0x46b)]=_0x58977b(0x672);else{if(_0x39819e['match'](/XP/i))this[_0x58977b(0x46b)]='xp';else{if(_0x39819e[_0x58977b(0x64e)](/PORTRAIT/i))this[_0x58977b(0x46b)]=_0x58977b(0xbc2);else{if(_0x39819e[_0x58977b(0x64e)](/BORDER/i))_0x58977b(0x869)!==_0x58977b(0x37d)?this[_0x58977b(0x46b)]='border':_0x3866a2['BattleCore'][_0x58977b(0x59a)][_0x58977b(0x5d9)](this);else{if(_0x39819e['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x58977b(0x2a8)]){if(_0x58977b(0x335)!==_0x58977b(0x335)){if(!_0x19f34b[_0x58977b(0x2a9)]())return;if(!_0x9b21e7[_0x58977b(0x44e)])return;_0xa1314e[_0x58977b(0x368)](_0x27c064,_0x37e401);const _0x35c8a7=_0x2887ea[_0x58977b(0xbae)],_0x13cedc=_0x2be55b[_0x58977b(0xa76)];if(!_0x35c8a7)return;_0x35c8a7[_0x58977b(0x65a)]=_0x13cedc;}else this[_0x58977b(0x46b)]=_0x58977b(0x4a0);}else this[_0x58977b(0x46b)]=_0x58977b(0xbb7);}}}}}}}else this[_0x58977b(0x4dc)]()?(this[_0x58977b(0x802)][_0x58977b(0x1d7)](),this[_0x58977b(0x7a2)][_0x58977b(0x2ea)](),this[_0x58977b(0x581)]['activate']()):_0x399cc7['BattleCore'][_0x58977b(0xa67)][_0x58977b(0x5d9)](this),this[_0x58977b(0x3ba)]();}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x215)]=Game_System[_0x3df63e(0x655)][_0x3df63e(0xb26)],Game_System[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(){const _0x17c759=_0x3df63e;VisuMZ[_0x17c759(0xa69)][_0x17c759(0x215)]['call'](this),this['initBattleCore']();},Game_System[_0x3df63e(0x655)][_0x3df63e(0x533)]=function(){const _0x10ea06=_0x3df63e;this[_0x10ea06(0x8c7)]=this[_0x10ea06(0x8c7)]||[];},Game_System[_0x3df63e(0x655)][_0x3df63e(0x3e8)]=function(){const _0x594ebb=_0x3df63e;if(this[_0x594ebb(0x8c7)]===undefined)this[_0x594ebb(0x533)]();return this[_0x594ebb(0x8c7)];},Game_System[_0x3df63e(0x655)]['registerDefeatedEnemy']=function(_0x5ccb85){const _0x5efebc=_0x3df63e;if(this['_defeatedEnemies']===undefined)this['initBattleCore']();if(!_0x5ccb85)return;if(this[_0x5efebc(0x8c7)]['includes'](_0x5ccb85))return;this['_defeatedEnemies']['push'](_0x5ccb85),this[_0x5efebc(0x8c7)][_0x5efebc(0x89f)]((_0x3acc5a,_0x1c3c27)=>_0x3acc5a-_0x1c3c27);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x3f8)]=Game_BattlerBase['prototype'][_0x3df63e(0xa52)],Game_BattlerBase['prototype'][_0x3df63e(0xa52)]=function(_0x2baca3){const _0xfdf908=_0x3df63e,_0x5815c1=this[_0xfdf908(0x8fc)](),_0x31a624=this[_0xfdf908(0x65f)]();VisuMZ[_0xfdf908(0xa69)][_0xfdf908(0x3f8)][_0xfdf908(0x5d9)](this,_0x2baca3),this[_0xfdf908(0xaad)]()&&_0x5815c1&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this['hasBeenDefeatedBefore'](),$gameSystem[_0xfdf908(0x558)](this['enemyId']())),SceneManager[_0xfdf908(0x2a9)]()&&_0x31a624!==this[_0xfdf908(0x65f)]()&&(this['battler']()&&this[_0xfdf908(0x669)]()[_0xfdf908(0x35b)]());},Game_Enemy[_0x3df63e(0x655)]['hasBeenDefeatedBefore']=function(){const _0x2c8045=_0x3df63e;return $gameSystem[_0x2c8045(0x3e8)]()['includes'](this[_0x2c8045(0xa0e)]);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5ff)]=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x2bd)],Game_BattlerBase['prototype'][_0x3df63e(0x2bd)]=function(_0xa35a2){const _0x5defd7=_0x3df63e;VisuMZ[_0x5defd7(0xa69)]['Game_BattlerBase_eraseState'][_0x5defd7(0x5d9)](this,_0xa35a2);if(this['isEnemy']()&&_0xa35a2===this[_0x5defd7(0x693)]()&&this[_0x5defd7(0x8fc)]()){if(_0x5defd7(0x2ad)!==_0x5defd7(0x2ad))return _0xa3bc51[_0x5defd7(0x234)]()['length']||0x1;else this[_0x5defd7(0x8af)]=![];}!this[_0x5defd7(0x3c8)]&&!this[_0x5defd7(0x402)]&&SceneManager[_0x5defd7(0x2a9)]()&&('GNesV'===_0x5defd7(0x49a)?_0x56a5ec[_0x5defd7(0x655)]['terminate'][_0x5defd7(0x5d9)](this):this[_0x5defd7(0xbb2)]());},VisuMZ[_0x3df63e(0xa69)]['Game_Action_clear']=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x6be)],Game_Action[_0x3df63e(0x655)]['clear']=function(){const _0x31efac=_0x3df63e;VisuMZ[_0x31efac(0xa69)]['Game_Action_clear'][_0x31efac(0x5d9)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x31efac(0xbb7);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x6bf)]=function(_0x5b295e,_0x34880d){const _0x281e3f=_0x3df63e;return VisuMZ[_0x281e3f(0xa69)][_0x281e3f(0x5eb)]['Damage'][_0x281e3f(0x2d0)][_0x281e3f(0x5d9)](this,_0x5b295e,_0x34880d);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x2f7)]=function(_0x58de75,_0x3a1fc1){const _0x50539c=_0x3df63e;return VisuMZ[_0x50539c(0xa69)][_0x50539c(0x5eb)]['Damage'][_0x50539c(0xba6)][_0x50539c(0x5d9)](this,_0x58de75,_0x3a1fc1);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0xa6f)]=function(_0x2a9e5d,_0x414f04){const _0x4bc38c=_0x3df63e;return VisuMZ[_0x4bc38c(0xa69)][_0x4bc38c(0x5eb)][_0x4bc38c(0x488)]['GuardFormulaJS'][_0x4bc38c(0x5d9)](this,_0x2a9e5d,_0x414f04);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x31f)]=Game_Action['prototype'][_0x3df63e(0x1be)],Game_Action['prototype'][_0x3df63e(0x1be)]=function(_0x47fa27){const _0x539bd7=_0x3df63e,_0x1f6076=this['item']()['note'];if(_0x1f6076[_0x539bd7(0x64e)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1f6076['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x539bd7(0x454)===_0x539bd7(0x454))return Number(RegExp['$1'])/0x64;else{if(!_0x3064b6[_0x539bd7(0x2a9)]())return;if(!_0x56edc7['VisuMZ_3_ActSeqCamera'])return;_0x2b9d68[_0x539bd7(0x368)](_0x21ea0e,_0x202b2a);const _0x2b9640=_0x412fe2[_0x539bd7(0x5d6)](),_0x42505f=_0x3bf9e8['ResetFocus'],_0x479ecf=_0x1b473d[_0x539bd7(0x4fe)],_0x56335d=_0x49d7a3[_0x539bd7(0x482)];if(_0x42505f){const _0x4a63e5=_0x342bf2[_0x539bd7(0x76b)](_0x308b56[_0x539bd7(0x366)]/0x2),_0x1ba7e1=_0x12597a['round'](_0x7c815['height']/0x2);_0x40f1c8['setBattleCameraPoint'](_0x4a63e5,_0x1ba7e1,_0x22aee4['Duration'],_0x3b1ced[_0x539bd7(0x6dd)]);}_0x479ecf&&_0x3692c4[_0x539bd7(0x31b)](0x0,0x0,_0x447a2e['Duration'],_0x472a34[_0x539bd7(0x6dd)]);if(_0x56335d)_0x2b9640[_0x539bd7(0x671)](_0x539bd7(0x189));}}else{let _0x36085d=VisuMZ[_0x539bd7(0xa69)]['Game_Action_itemHit']['call'](this,_0x47fa27);return _0x36085d=this[_0x539bd7(0x82c)][_0x539bd7(0xb1c)]*_0x36085d+this[_0x539bd7(0x82c)][_0x539bd7(0x1b6)],_0x36085d;}}},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x75d)]=function(_0x48d825){const _0x547cf2=_0x3df63e;if(!this[_0x547cf2(0x918)]()['damage'][_0x547cf2(0x8da)])return 0x0;let _0xa8ea55=VisuMZ[_0x547cf2(0xa69)]['Settings'][_0x547cf2(0x488)]['CriticalHitRateJS'][_0x547cf2(0x5d9)](this,_0x48d825);return _0xa8ea55=this[_0x547cf2(0x82c)][_0x547cf2(0xbd5)]*_0xa8ea55+this[_0x547cf2(0x82c)]['criticalHitFlat'],_0xa8ea55;},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x24f)]=function(_0x262287){const _0x356bf0=_0x3df63e;return _0x262287=VisuMZ['BattleCore'][_0x356bf0(0x5eb)]['Damage'][_0x356bf0(0x9c0)]['call'](this,_0x262287),_0x262287=this[_0x356bf0(0x82c)][_0x356bf0(0x970)]*_0x262287+this[_0x356bf0(0x82c)][_0x356bf0(0x443)],_0x262287;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x2dc)]=Game_Action[_0x3df63e(0x655)]['evalDamageFormula'],Game_Action[_0x3df63e(0x655)]['evalDamageFormula']=function(_0x549bbd){const _0x1df745=_0x3df63e;if(this[_0x1df745(0x330)]!==_0x1df745(0xbb7))return this[_0x1df745(0x382)](_0x549bbd);else return DataManager[_0x1df745(0x2dd)](this[_0x1df745(0x918)]())===_0x1df745(0xbb0)?VisuMZ[_0x1df745(0xa69)][_0x1df745(0x2dc)][_0x1df745(0x5d9)](this,_0x549bbd):this[_0x1df745(0x599)](_0x549bbd);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x915)]=function(_0x1d3352){const _0x545b13=_0x3df63e;this[_0x545b13(0x330)]=_0x1d3352;},Game_Action['prototype'][_0x3df63e(0x382)]=function(_0x256894){const _0x573ab3=_0x3df63e,_0x54169a=this[_0x573ab3(0x918)](),_0x2c76d1=_0x54169a[_0x573ab3(0x9e0)][_0x573ab3(0xae7)];_0x54169a[_0x573ab3(0x9e0)][_0x573ab3(0xae7)]=this[_0x573ab3(0x330)];let _0x27867e=VisuMZ[_0x573ab3(0xa69)][_0x573ab3(0x2dc)][_0x573ab3(0x5d9)](this,_0x256894);return _0x54169a['damage'][_0x573ab3(0xae7)]=_0x2c76d1,_0x27867e;},Game_Action[_0x3df63e(0x655)]['damageStyle']=function(){const _0x3e5a06=_0x3df63e;if(this[_0x3e5a06(0x918)]()[_0x3e5a06(0x45f)][_0x3e5a06(0x64e)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x3e5a06(0xa7e)===_0x3e5a06(0x1a2))_0x5a7f97[_0x3e5a06(0xaab)]();else{const _0x3380bf=String(RegExp['$1'])[_0x3e5a06(0x17c)]()['trim']();return _0x3380bf;}}return'MANUAL';},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x599)]=function(_0x4cd7d4){const _0x4530b4=_0x3df63e,_0x474370=DataManager['getDamageStyle'](this[_0x4530b4(0x918)]()),_0x4fed1a=VisuMZ[_0x4530b4(0x666)][_0x474370];try{if('fWkyl'!==_0x4530b4(0x870))this[_0x4530b4(0x9cd)](_0x4530b4(0x80e),_0x1f7a39);else return _0x4fed1a[_0x4530b4(0x737)][_0x4530b4(0x5d9)](this,_0x4cd7d4);}catch(_0x17866a){if($gameTemp[_0x4530b4(0x51c)]())console[_0x4530b4(0x33c)](_0x17866a);return VisuMZ[_0x4530b4(0xa69)]['Game_Action_evalDamageFormula']['call'](this);}},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x416)]=function(_0x3d6776,_0x41ce65){const _0x4c3901=_0x3df63e;if(this[_0x4c3901(0x5c0)]())return _0x41ce65;const _0x3fe18c=this[_0x4c3901(0x473)](),_0x1cc2c6=_0x3d6776;let _0x38fee=[],_0x536b4b=[];_0x38fee[_0x4c3901(0x9cd)](this['_armorPenetration']['arPenFlat'],this[_0x4c3901(0x7f6)][_0x4c3901(0x238)]),_0x536b4b[_0x4c3901(0x9cd)](this['_armorPenetration']['arPenRate'],this[_0x4c3901(0x7f6)][_0x4c3901(0xa3c)]);const _0x253bde=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5c8970=this[_0x4c3901(0x7fb)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5e9cd7=this[_0x4c3901(0x7fb)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x52c09f=this[_0x4c3901(0x7fb)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x38fee=_0x38fee[_0x4c3901(0x913)](_0x1cc2c6[_0x4c3901(0x86d)]()[_0x4c3901(0x3a8)](_0x3f2f33=>_0x3f2f33&&_0x3f2f33[_0x4c3901(0x45f)]['match'](_0x253bde)?Number(RegExp['$1']):0x0)),_0x536b4b=_0x536b4b[_0x4c3901(0x913)](_0x1cc2c6[_0x4c3901(0x86d)]()[_0x4c3901(0x3a8)](_0x23c290=>_0x23c290&&_0x23c290[_0x4c3901(0x45f)][_0x4c3901(0x64e)](_0x5c8970)?Number(RegExp['$1'])/0x64:0x0)),_0x38fee=_0x38fee[_0x4c3901(0x913)](_0x3fe18c[_0x4c3901(0x86d)]()[_0x4c3901(0x3a8)](_0x2f62e6=>_0x2f62e6&&_0x2f62e6[_0x4c3901(0x45f)][_0x4c3901(0x64e)](_0x5e9cd7)?Number(RegExp['$1']):0x0)),_0x536b4b=_0x536b4b[_0x4c3901(0x913)](_0x3fe18c['traitObjects']()[_0x4c3901(0x3a8)](_0x58c432=>_0x58c432&&_0x58c432[_0x4c3901(0x45f)][_0x4c3901(0x64e)](_0x52c09f)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x4c3901(0x45f)][_0x4c3901(0x64e)](_0x5e9cd7)&&_0x38fee[_0x4c3901(0x9cd)](Number(RegExp['$1'])),this['item']()[_0x4c3901(0x45f)]['match'](_0x52c09f)&&_0x536b4b[_0x4c3901(0x9cd)](Number(RegExp['$1'])),_0x41ce65=_0x38fee['reduce']((_0x1f91ac,_0x2ff86e)=>_0x1f91ac-_0x2ff86e,_0x41ce65),_0x41ce65>0x0&&(_0x41ce65=_0x536b4b['reduce']((_0x3008e8,_0x4fb45b)=>_0x3008e8*(0x1-_0x4fb45b),_0x41ce65)),_0x41ce65;},VisuMZ['BattleCore']['Game_Action_executeDamage']=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x3bc)],Game_Action[_0x3df63e(0x655)]['executeDamage']=function(_0x179a67,_0x20373c){const _0x53955e=_0x3df63e;_0x20373c=_0x20373c*this[_0x53955e(0x82c)][_0x53955e(0x708)],_0x20373c+=this['_multipliers'][_0x53955e(0xaaf)]*(_0x20373c>=0x0?0x1:-0x1),_0x20373c=this[_0x53955e(0x831)](_0x53955e(0xa6e),_0x179a67,_0x20373c,![]),_0x20373c=this[_0x53955e(0xa51)](_0x20373c),_0x20373c=Math[_0x53955e(0x76b)](_0x20373c),this[_0x53955e(0xb57)]=_0x20373c,this[_0x53955e(0x35c)]=this['_totalValue']||0x0,this[_0x53955e(0x35c)]+=_0x20373c,VisuMZ[_0x53955e(0xa69)][_0x53955e(0x16d)][_0x53955e(0x5d9)](this,_0x179a67,_0x20373c),this[_0x53955e(0x831)](_0x53955e(0x498),_0x179a67,_0x20373c,!![]);},Game_Action['prototype'][_0x3df63e(0xa51)]=function(_0x19b6c5){const _0x550f2e=_0x3df63e;if(this['isBypassDamageCap']())return _0x19b6c5;return _0x19b6c5=this[_0x550f2e(0xac3)](_0x19b6c5),_0x19b6c5=this['applyHardDamageCap'](_0x19b6c5),_0x19b6c5;},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x4a7)]=function(){const _0x222f71=_0x3df63e,_0x260589=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x222f71(0x45f)][_0x222f71(0x64e)](_0x260589))return!![];if(this[_0x222f71(0x473)]()[_0x222f71(0x86d)]()[_0x222f71(0x25c)](_0x176c01=>_0x176c01&&_0x176c01[_0x222f71(0x45f)][_0x222f71(0x64e)](_0x260589)))return!![];return!VisuMZ[_0x222f71(0xa69)][_0x222f71(0x5eb)]['Damage'][_0x222f71(0xb14)];},Game_Action[_0x3df63e(0x655)]['applySoftDamageCap']=function(_0x2ecb84){const _0x3d2525=_0x3df63e;if(!VisuMZ[_0x3d2525(0xa69)][_0x3d2525(0x5eb)][_0x3d2525(0x488)]['EnableSoftCap'])return _0x2ecb84;const _0x48645a=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x3d2525(0x918)]()['note'][_0x3d2525(0x64e)](_0x48645a))return!![];if(this[_0x3d2525(0x473)]()[_0x3d2525(0x86d)]()['some'](_0x5547d8=>_0x5547d8&&_0x5547d8[_0x3d2525(0x45f)]['match'](_0x48645a)))return!![];const _0x8552e=_0x2ecb84<0x0?-0x1:0x1;_0x2ecb84=Math[_0x3d2525(0xb55)](_0x2ecb84);let _0x5e2b2a=this[_0x3d2525(0x473)]()[_0x3d2525(0xaa4)]();this['item']()[_0x3d2525(0x45f)][_0x3d2525(0x64e)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x5e2b2a+=Number(RegExp['$1'])/0x64);_0x5e2b2a=_0x5e2b2a[_0x3d2525(0x858)](0.01,0x1);const _0x51d2b7=this[_0x3d2525(0x485)](),_0x4ff137=_0x5e2b2a*_0x51d2b7;if(_0x2ecb84>_0x4ff137&&_0x51d2b7>_0x4ff137){_0x2ecb84-=_0x4ff137;const _0x52f988=VisuMZ['BattleCore']['Settings'][_0x3d2525(0x488)][_0x3d2525(0x3ef)],_0x2f9af5=Math['max'](0x1-_0x2ecb84/((_0x51d2b7-_0x4ff137)*_0x52f988+_0x2ecb84),0.01);_0x2ecb84*=_0x2f9af5,_0x2ecb84+=_0x4ff137;}return _0x2ecb84*_0x8552e;},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x485)]=function(){const _0x984121=_0x3df63e;return this[_0x984121(0x918)]()[_0x984121(0x45f)][_0x984121(0x64e)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x984121(0x473)]()[_0x984121(0xabd)]();},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x3cc)]=function(_0x36a0ad){const _0x2c1b11=_0x3df63e;let _0xb3e512=this['getHardDamageCap']();return _0x36a0ad[_0x2c1b11(0x858)](-_0xb3e512,_0xb3e512);},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x1c7)],Game_Action[_0x3df63e(0x655)]['apply']=function(_0x11593b){const _0x356d62=_0x3df63e;this[_0x356d62(0x831)]('PreApply%1JS',_0x11593b,0x0,!![]),VisuMZ[_0x356d62(0xa69)][_0x356d62(0xbb6)][_0x356d62(0x5d9)](this,_0x11593b),this[_0x356d62(0x831)](_0x356d62(0x793),_0x11593b,this[_0x356d62(0xb57)]||0x0,!![]),this[_0x356d62(0x96c)](_0x11593b);},Game_Action['prototype'][_0x3df63e(0x831)]=function(_0x3e2442,_0x127ce7,_0x1f61bb,_0x2290de){const _0x55c858=_0x3df63e;if(this['_tempBattler']||this[_0x55c858(0x3c8)])return;_0x1f61bb=_0x1f61bb||0x0;const _0x350d3c=_0x1f61bb,_0x5903e7=VisuMZ[_0x55c858(0xa69)][_0x55c858(0x5eb)]['Mechanics'],_0x255c46=_0x3e2442['format']('');if(_0x5903e7[_0x255c46]){_0x1f61bb=_0x5903e7[_0x255c46][_0x55c858(0x5d9)](this,_0x1f61bb,_0x127ce7);if(_0x2290de)_0x1f61bb=_0x350d3c;}let _0x313c73=VisuMZ['BattleCore'][_0x55c858(0x3c1)](this[_0x55c858(0x918)](),_0x3e2442[_0x55c858(0x4f8)](''));if(VisuMZ[_0x55c858(0xa69)]['JS'][_0x313c73]){if(_0x55c858(0x1ce)!==_0x55c858(0x1ce)){this[_0x55c858(0x9b6)][_0x55c858(0x265)](),this[_0x55c858(0x581)][_0x55c858(0x689)]();if(!_0x4ac6ea[_0x55c858(0xa69)][_0x55c858(0x428)])return;if(_0x458090[_0x55c858(0x627)]&&_0x53fc17[_0x55c858(0xb4a)]())return;if(_0x14e636[_0x55c858(0x7ce)]){_0x141812[_0x55c858(0x7ce)][_0x55c858(0x413)](_0x55c858(0x2c7));const _0x109fef=_0x3b5523[_0x55c858(0x7ce)]['battler']();if(_0x109fef)_0x109fef[_0x55c858(0x46e)]();}_0x25f666[_0x55c858(0x7ce)]=null;}else{_0x1f61bb=VisuMZ['BattleCore']['JS'][_0x313c73]['call'](this,this['subject'](),_0x127ce7,this[_0x55c858(0x918)](),_0x1f61bb);if(_0x2290de)_0x1f61bb=_0x350d3c;}}for(const _0x14455d of this['subject']()[_0x55c858(0x86d)]()){if(!_0x14455d)continue;_0x313c73=VisuMZ[_0x55c858(0xa69)][_0x55c858(0x3c1)](_0x14455d,_0x3e2442[_0x55c858(0x4f8)](_0x55c858(0x3bb)));if(VisuMZ[_0x55c858(0xa69)]['JS'][_0x313c73]){if('ohFcD'===_0x55c858(0x47a)){_0x1f61bb=VisuMZ[_0x55c858(0xa69)]['JS'][_0x313c73][_0x55c858(0x5d9)](this,this['subject'](),_0x127ce7,_0x14455d,_0x1f61bb);if(_0x2290de)_0x1f61bb=_0x350d3c;}else this[_0x55c858(0xbd1)]();}}for(const _0x1af7cf of _0x127ce7[_0x55c858(0x86d)]()){if(_0x55c858(0x559)!==_0x55c858(0x559))_0xab0270[_0x55c858(0x265)](0x0);else{if(!_0x1af7cf)continue;_0x313c73=VisuMZ[_0x55c858(0xa69)][_0x55c858(0x3c1)](_0x1af7cf,_0x3e2442[_0x55c858(0x4f8)](_0x55c858(0x50e)));if(VisuMZ[_0x55c858(0xa69)]['JS'][_0x313c73]){if(_0x55c858(0xa02)===_0x55c858(0x243)){if(_0x3e8008[_0x55c858(0xa53)](_0x57ce4f))return!![];}else{_0x1f61bb=VisuMZ[_0x55c858(0xa69)]['JS'][_0x313c73][_0x55c858(0x5d9)](this,this[_0x55c858(0x473)](),_0x127ce7,_0x1af7cf,_0x1f61bb);if(_0x2290de)_0x1f61bb=_0x350d3c;}}}}return _0x1f61bb;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x1802eb){const _0xae73bb=_0x3df63e,_0x4004a2=this[_0xae73bb(0x35c)]||0x0,_0x292060=VisuMZ[_0xae73bb(0xa69)][_0xae73bb(0x5eb)][_0xae73bb(0x688)],_0x1d3875=_0x1802eb[_0xae73bb(0x4f8)]('');if(_0x292060[_0x1d3875]){if('XHLJB'===_0xae73bb(0x5b5))_0x292060[_0x1d3875][_0xae73bb(0x5d9)](this,_0x4004a2);else{if(!_0x497bef[_0xae73bb(0x8e3)]())return;const _0x872cce=this['battler']();if(!_0x872cce)return;_0x4c637a=_0x15b407||0x0;if(_0x229577>0x0){if(_0x872cce[_0xae73bb(0x924)]>_0x3357cd)_0x3c0099+=_0x872cce[_0xae73bb(0x366)]/0x2+_0x238213;if(_0x872cce['_baseX']<_0xef3b2d)_0x288a7b-=_0x872cce[_0xae73bb(0x366)]/0x2+_0x279e0e;}if(_0x4b69fe)this[_0xae73bb(0xb6f)](_0x339852,_0x17112e,![]);_0x3b709d-=_0x872cce[_0xae73bb(0xa7d)],_0x362f88-=_0x872cce[_0xae73bb(0x17f)],_0x872cce[_0xae73bb(0xa97)](_0x5d6e63,_0x10d70c,_0x2fbe3b);if(_0x5aa6d[_0xae73bb(0x1ec)])_0x872cce[_0xae73bb(0x2fa)](_0x196b39||_0xae73bb(0x25d));}}let _0x3cd737=VisuMZ[_0xae73bb(0xa69)][_0xae73bb(0x3c1)](this['item'](),_0x1802eb);VisuMZ['BattleCore']['JS'][_0x3cd737]&&VisuMZ[_0xae73bb(0xa69)]['JS'][_0x3cd737]['call'](this,this['subject'](),this[_0xae73bb(0x473)](),this[_0xae73bb(0x918)](),_0x4004a2);for(const _0x85d239 of this[_0xae73bb(0x473)]()['traitObjects']()){if(_0xae73bb(0x7c7)!==_0xae73bb(0x7c7)){if(!_0x4675e7['isSceneBattle']())return;if(!_0x15f65c[_0xae73bb(0x305)])return;_0xac7d33[_0xae73bb(0x368)](_0x453197,_0x6008d0);const _0xc11085=_0x1fad62['getLastPluginCommandInterpreter'](),_0x4d2f53=_0x544880[_0xae73bb(0x6ac)];if(!_0xc11085)return;const _0x123f3d=_0x357f36['_spriteset'];if(!_0x123f3d)return;_0x123f3d[_0xae73bb(0x410)](_0x123d02);if(_0x4d2f53)_0xc11085[_0xae73bb(0x671)]('battleProjectiles');}else{if(!_0x85d239)continue;_0x3cd737=VisuMZ[_0xae73bb(0xa69)][_0xae73bb(0x3c1)](_0x85d239,_0x1802eb),VisuMZ[_0xae73bb(0xa69)]['JS'][_0x3cd737]&&VisuMZ[_0xae73bb(0xa69)]['JS'][_0x3cd737]['call'](this,this['subject'](),this[_0xae73bb(0x473)](),_0x85d239,_0x4004a2);}}},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x63a)]=function(){const _0x541e28=_0x3df63e;return VisuMZ[_0x541e28(0xa69)][_0x541e28(0x5eb)]['Mechanics'][_0x541e28(0x3de)][_0x541e28(0x5d9)](this);},Game_Action['prototype'][_0x3df63e(0x5ed)]=function(){const _0x35ac90=_0x3df63e;return VisuMZ[_0x35ac90(0xa69)][_0x35ac90(0x5eb)][_0x35ac90(0x688)][_0x35ac90(0x486)];},Game_Action[_0x3df63e(0x655)][_0x3df63e(0xa82)]=function(){const _0x2c973e=_0x3df63e;return this['item']()['note'][_0x2c973e(0x64e)](/<JS TARGETS>/i);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0xadf)]=function(){const _0x1c7745=_0x3df63e;if(!this[_0x1c7745(0x405)]&&this[_0x1c7745(0x473)]()['isConfused']())return![];if(this[_0x1c7745(0xa82)]())return!![];return typeof this['item']()[_0x1c7745(0x8f4)]===_0x1c7745(0x9d7);},VisuMZ['BattleCore']['Game_Action_isForOpponent']=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x9f4)],Game_Action['prototype'][_0x3df63e(0x9f4)]=function(){const _0xc72afa=_0x3df63e;if(this['isBattleCoreTargetScope']()&&!this[_0xc72afa(0xa82)]())return this[_0xc72afa(0x99f)]();else{if(_0xc72afa(0x28e)===_0xc72afa(0x552)){const _0x2f36ac=this[_0xc72afa(0x234)](),_0x15c807=_0x2f36ac[0x0]?_0x2f36ac[0x0][_0xc72afa(0x5a5)]:0x0;return _0x5aafda[_0xc72afa(0x8ed)][_0x15c807];}else return VisuMZ[_0xc72afa(0xa69)][_0xc72afa(0x326)][_0xc72afa(0x5d9)](this);}},Game_Action['prototype']['isForOpponentBattleCore']=function(){const _0x404c2d=_0x3df63e,_0x551a9c=this[_0x404c2d(0x918)]()[_0x404c2d(0x8f4)];return _0x551a9c[_0x404c2d(0x64e)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5e1)]=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x946)],Game_Action[_0x3df63e(0x655)][_0x3df63e(0x946)]=function(){const _0x54ba07=_0x3df63e;if(this['isBattleCoreTargetScope']()&&!this[_0x54ba07(0xa82)]()){if('QqHFe'!=='fuNUA')return this['isForFriendBattleCore']();else{if(_0xcf520['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x50029e=_0x5c0017(_0x1e8152['$1'])['split'](/[\r\n]+/)['remove'](''),_0x36c376=this[_0x54ba07(0xa27)](_0x50029e);_0xdcf691=this['getEnemyIdWithName'](_0x36c376)||_0x1d2a4f,_0x2b146b=_0x5160b4['swapEnemyIDs'](_0x26c957);}}}else return _0x54ba07(0x43e)!==_0x54ba07(0x7d5)?VisuMZ['BattleCore'][_0x54ba07(0x5e1)]['call'](this):_0x49797f[_0x54ba07(0x8e2)][_0x54ba07(0xb6b)]()==='border'?_0x5902aa['BattleCore'][_0x54ba07(0x5eb)][_0x54ba07(0x742)][_0x54ba07(0x57f)]:_0x2d1c68['BattleCore']['Settings']['BattleLayout'][_0x54ba07(0x7fe)];},Game_Action[_0x3df63e(0x655)]['isForFriendBattleCore']=function(){const _0x367139=_0x3df63e,_0x2b0295=this[_0x367139(0x918)]()[_0x367139(0x8f4)];return _0x2b0295[_0x367139(0x64e)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x7cc)]=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x90c)],Game_Action[_0x3df63e(0x655)][_0x3df63e(0x90c)]=function(){const _0x9164e4=_0x3df63e;if(this[_0x9164e4(0xadf)]()&&!this[_0x9164e4(0xa82)]()){if(_0x9164e4(0xb74)===_0x9164e4(0xb74))return this[_0x9164e4(0x3f7)]();else this[_0x9164e4(0x213)]();}else return VisuMZ[_0x9164e4(0xa69)][_0x9164e4(0x7cc)][_0x9164e4(0x5d9)](this);},Game_Action['prototype'][_0x3df63e(0x3f7)]=function(){const _0x3f22e0=_0x3df63e,_0x547863=this[_0x3f22e0(0x918)]()['scope'];return _0x547863[_0x3f22e0(0x64e)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x506)]=Game_Action[_0x3df63e(0x655)]['needsSelection'],Game_Action[_0x3df63e(0x655)]['needsSelection']=function(){const _0x2e6e74=_0x3df63e;return this['isBattleCoreTargetScope']()&&!this[_0x2e6e74(0xa82)]()?this[_0x2e6e74(0x27c)]():VisuMZ[_0x2e6e74(0xa69)][_0x2e6e74(0x506)][_0x2e6e74(0x5d9)](this);},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x27c)]=function(){const _0x1d7916=_0x3df63e,_0x17d42c=this[_0x1d7916(0x918)]()['scope'];if(_0x17d42c[_0x1d7916(0x64e)](/RANDOM/i))return![];if(_0x17d42c[_0x1d7916(0x64e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x17d42c[_0x1d7916(0x64e)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x1d7916(0xa69)][_0x1d7916(0x506)][_0x1d7916(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xa96)]=Game_Action['prototype']['makeTargets'],Game_Action[_0x3df63e(0x655)]['makeTargets']=function(){const _0x2cd914=_0x3df63e;let _0x37d971=[];return this[_0x2cd914(0xadf)]()?_0x2cd914(0x418)!=='SDVzc'?this[_0x2cd914(0x74e)](_0x2cd914(0x912)):_0x37d971=this[_0x2cd914(0x37c)]():_0x2cd914(0x723)!==_0x2cd914(0x723)?(_0x36c257[_0x2cd914(0xa69)][_0x2cd914(0x38d)][_0x2cd914(0x5d9)](this,_0x11f2d6),_0x4b304d[_0x2cd914(0x329)]()):_0x37d971=VisuMZ[_0x2cd914(0xa69)][_0x2cd914(0xa96)][_0x2cd914(0x5d9)](this),_0x37d971=this[_0x2cd914(0x74d)](_0x37d971),_0x37d971;},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x37c)]=function(){const _0x445a20=_0x3df63e;let _0x3558a8=[];const _0x452851=String(this[_0x445a20(0x918)]()[_0x445a20(0x8f4)]),_0x161569=VisuMZ[_0x445a20(0xa69)][_0x445a20(0x3c1)](this[_0x445a20(0x918)](),_0x445a20(0x9f6));if(VisuMZ['BattleCore']['JS'][_0x161569]){_0x3558a8=VisuMZ[_0x445a20(0xa69)]['Game_Action_makeTargets']['call'](this);const _0x1d7fcc=VisuMZ['BattleCore']['createKeyJS'](this['item'](),'Targets');return _0x3558a8=VisuMZ[_0x445a20(0xa69)]['JS'][_0x1d7fcc]['call'](this,this[_0x445a20(0x473)](),_0x3558a8),this['repeatTargets'](_0x3558a8);}if(_0x452851[_0x445a20(0x64e)](/(\d+) RANDOM ANY/i)){let _0x6ddb83=Number(RegExp['$1']);while(_0x6ddb83--){const _0x5b4074=Math[_0x445a20(0xa4d)](0x2)===0x0?this[_0x445a20(0x40f)]():this[_0x445a20(0x5b6)]();_0x3558a8[_0x445a20(0x9cd)](_0x5b4074[_0x445a20(0x32b)]());}return this['repeatTargets'](_0x3558a8);}if(_0x452851[_0x445a20(0x64e)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x445a20(0xb99)!=='xEcPB'){let _0x4e513f=Number(RegExp['$1']);while(_0x4e513f--){_0x3558a8[_0x445a20(0x9cd)](this['opponentsUnit']()[_0x445a20(0x32b)]());}return this[_0x445a20(0x9b5)](_0x3558a8);}else return _0x2d746c(_0x38fabb['$1']);}if(_0x452851[_0x445a20(0x64e)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x2071a6=Number(RegExp['$1']);while(_0x2071a6--){_0x445a20(0x700)===_0x445a20(0x700)?_0x3558a8[_0x445a20(0x9cd)](this['friendsUnit']()[_0x445a20(0x32b)]()):this[_0x445a20(0x669)]()&&this[_0x445a20(0x669)]()[_0x445a20(0x35b)]();}return this['repeatTargets'](_0x3558a8);}if(_0x452851[_0x445a20(0x64e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3558a8[_0x445a20(0x9cd)](...this[_0x445a20(0x5b6)]()[_0x445a20(0x529)]()[_0x445a20(0xaaa)](_0x8a0b0f=>_0x8a0b0f!==this[_0x445a20(0x473)]())),this[_0x445a20(0x9b5)](_0x3558a8);return VisuMZ[_0x445a20(0xa69)][_0x445a20(0xa96)][_0x445a20(0x5d9)](this);},Game_Action['prototype'][_0x3df63e(0x85e)]=function(_0x4bde48){const _0x465af4=_0x3df63e,_0x5b2b53=[];for(let _0x2ed0bd=0x0;_0x2ed0bd<this[_0x465af4(0xbcd)]();_0x2ed0bd++){_0x5b2b53[_0x465af4(0x9cd)](_0x4bde48[_0x465af4(0x32b)]());}return _0x5b2b53;},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x74d)]=function(_0x189f78){const _0x517047=_0x3df63e;if(!this[_0x517047(0x918)]())return _0x189f78;const _0x572ade=this[_0x517047(0x918)]()[_0x517047(0x45f)];return _0x572ade[_0x517047(0x64e)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x189f78[_0x517047(0x44f)](this[_0x517047(0x473)]()),_0x189f78;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x7c6)]=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x1d9)],Game_Action['prototype'][_0x3df63e(0x1d9)]=function(_0x336670,_0x26f97c){const _0x2dbd47=_0x3df63e;VisuMZ[_0x2dbd47(0xa69)]['Game_Action_itemEffectAddAttackState'][_0x2dbd47(0x5d9)](this,_0x336670,_0x26f97c);if(!_0x336670[_0x2dbd47(0xac1)]())return;for(const _0x4e876c of this['subject']()[_0x2dbd47(0x8bb)]()){if('lSKQj'===_0x2dbd47(0xa42))_0x8e7a5a=_0x38cab5;else{if(_0x4e876c===_0x336670[_0x2dbd47(0x693)]()){let _0x307ba5=_0x26f97c['value1'];_0x307ba5*=_0x336670[_0x2dbd47(0x4ab)](_0x4e876c),_0x307ba5*=this[_0x2dbd47(0x473)]()[_0x2dbd47(0x207)](_0x4e876c),_0x307ba5*=this[_0x2dbd47(0x56b)](_0x336670),Math['random']()<_0x307ba5&&(_0x2dbd47(0x53c)!==_0x2dbd47(0x53c)?_0x58a3aa[_0x2dbd47(0x5bc)]=_0x31b7df(_0x44b38d['$1'])[_0x2dbd47(0x782)]()['trim']():(_0x336670['_deathStateApplied']=!![],this[_0x2dbd47(0x332)](_0x336670)));}}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x950)]=Game_Action['prototype'][_0x3df63e(0x5a7)],Game_Action[_0x3df63e(0x655)][_0x3df63e(0x5a7)]=function(_0x56efb5,_0x4e86a8){const _0x2dacdd=_0x3df63e;VisuMZ[_0x2dacdd(0xa69)][_0x2dacdd(0x950)]['call'](this,_0x56efb5,_0x4e86a8);if(!_0x56efb5[_0x2dacdd(0xac1)]())return;if(_0x4e86a8[_0x2dacdd(0x6a1)]!==_0x56efb5['deathStateId']())return;let _0xed1ec3=_0x4e86a8[_0x2dacdd(0xa62)];!this[_0x2dacdd(0x5c0)]()&&(_0xed1ec3*=_0x56efb5['stateRate'](_0x4e86a8[_0x2dacdd(0x6a1)]),_0xed1ec3*=this[_0x2dacdd(0x56b)](_0x56efb5)),Math['random']()<_0xed1ec3&&(_0x56efb5[_0x2dacdd(0x51e)]=!![],this[_0x2dacdd(0x332)](_0x56efb5));},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4fb)]=Game_Action[_0x3df63e(0x655)][_0x3df63e(0x5aa)],Game_Action[_0x3df63e(0x655)][_0x3df63e(0x5aa)]=function(){const _0x55ef72=_0x3df63e;VisuMZ[_0x55ef72(0xa69)][_0x55ef72(0x4fb)][_0x55ef72(0x5d9)](this),this['applyGlobalCommonEventNotetags'](),this[_0x55ef72(0x953)]();},Game_Action['prototype'][_0x3df63e(0x77b)]=function(){const _0xb066b7=_0x3df63e;if(!SceneManager[_0xb066b7(0x2a9)]())return;const _0x63e5d3=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x4451f9=this[_0xb066b7(0x918)]()[_0xb066b7(0x45f)]['match'](_0x63e5d3);if(_0x4451f9)for(const _0x133db9 of _0x4451f9){if(_0xb066b7(0x6f0)===_0xb066b7(0xa8e))_0x38fe7a[_0xb066b7(0x3a0)](_0x14e4e7['SwitchCritical'],!![]);else{if(!_0x133db9)continue;_0x133db9['match'](_0x63e5d3);const _0x41221a=String(RegExp['$1'])[_0xb066b7(0xaa8)](',')[_0xb066b7(0x3a8)](_0x1c56e1=>String(_0x1c56e1)[_0xb066b7(0x9d2)]()),_0x484a34=_0x41221a[_0xb066b7(0x3a8)](_0xd2f03a=>DataManager[_0xb066b7(0xae8)](_0xd2f03a));for(const _0x476292 of _0x484a34){const _0x19f48f=$dataCommonEvents[_0x476292];_0x19f48f&&$gameTemp[_0xb066b7(0x26d)](_0x476292);}}}},DataManager[_0x3df63e(0xae8)]=function(_0x317532){const _0x1327d9=_0x3df63e;_0x317532=_0x317532['toUpperCase']()[_0x1327d9(0x9d2)](),this[_0x1327d9(0x43a)]=this[_0x1327d9(0x43a)]||{};if(this[_0x1327d9(0x43a)][_0x317532])return this['_commonEventIDs'][_0x317532];for(const _0x2fd8a2 of $dataCommonEvents){if(!_0x2fd8a2)continue;let _0x2c90f2=_0x2fd8a2[_0x1327d9(0xae2)];_0x2c90f2=_0x2c90f2['replace'](/\x1I\[(\d+)\]/gi,''),_0x2c90f2=_0x2c90f2[_0x1327d9(0x455)](/\\I\[(\d+)\]/gi,''),this[_0x1327d9(0x43a)][_0x2c90f2['toUpperCase']()[_0x1327d9(0x9d2)]()]=_0x2fd8a2['id'];}return this[_0x1327d9(0x43a)][_0x317532]||0x0;},Game_Action[_0x3df63e(0x655)]['resetResultSwitches']=function(){const _0x481fb1=_0x3df63e;if(!SceneManager['isSceneBattle']())return;const _0x34e4d3=VisuMZ[_0x481fb1(0xa69)][_0x481fb1(0x5eb)][_0x481fb1(0x688)];_0x34e4d3[_0x481fb1(0xb7c)]&&$gameSwitches[_0x481fb1(0x3a0)](_0x34e4d3[_0x481fb1(0xb7c)],![]);_0x34e4d3[_0x481fb1(0xb9c)]&&(_0x481fb1(0x785)!==_0x481fb1(0x785)?_0x9c89c9=this[_0x481fb1(0x37c)]():$gameSwitches[_0x481fb1(0x3a0)](_0x34e4d3['SwitchMissEvade'],![]));if(_0x34e4d3[_0x481fb1(0xb43)]){if(_0x481fb1(0xbbe)!=='pXfKV')for(const _0xe82077 of _0x3418ba){for(const _0x51e678 of _0x4b0d81){const _0x54288a=_0x497449[0x0]['format'](_0x51e678[0x0],_0xe82077[0x0]),_0xd7e696=_0x54960e[0x1][_0x481fb1(0x4f8)](_0x51e678[0x1],_0xe82077[0x1])['trim'](),_0x393af0=new _0x1243d7(_0x56a0e3[_0x481fb1(0x4f8)](_0xd7e696),'i');_0x1b65c9[_0x54288a]=_0x393af0;}}else $gameVariables['setValue'](_0x34e4d3[_0x481fb1(0xb43)],0x0);}_0x34e4d3[_0x481fb1(0xad6)]&&(_0x481fb1(0x90f)==='wGdLh'?$gameVariables['setValue'](_0x34e4d3[_0x481fb1(0xad6)],0x0):this[_0x481fb1(0x9cd)](_0x481fb1(0xbbc),this['makeHpDamageText'](_0xa35ec2)));},Game_Action[_0x3df63e(0x655)][_0x3df63e(0x96c)]=function(_0x5376a0){const _0x372d9d=_0x3df63e;if(!SceneManager[_0x372d9d(0x2a9)]())return;if(!_0x5376a0)return;const _0x3dc188=_0x5376a0[_0x372d9d(0x4d3)](),_0x22b81a=VisuMZ[_0x372d9d(0xa69)][_0x372d9d(0x5eb)]['Mechanics'];_0x22b81a['SwitchCritical']&&_0x3dc188[_0x372d9d(0x8da)]&&$gameSwitches[_0x372d9d(0x3a0)](_0x22b81a[_0x372d9d(0xb7c)],!![]);if(_0x22b81a[_0x372d9d(0xb9c)]&&(_0x3dc188['missed']||_0x3dc188['evaded'])){if(_0x372d9d(0xb59)!==_0x372d9d(0xb59)){if(_0x521553[_0x372d9d(0xab8)])return![];return _0x4cfa81['BattleCore'][_0x372d9d(0x4e7)][_0x372d9d(0x5d9)](this);}else $gameSwitches[_0x372d9d(0x3a0)](_0x22b81a[_0x372d9d(0xb9c)],!![]);}if(_0x22b81a[_0x372d9d(0xb43)]){if('boWlz'!==_0x372d9d(0x1d8)){let _0xeaf6b0=$gameVariables[_0x372d9d(0xa53)](_0x22b81a[_0x372d9d(0xb43)]);_0x3dc188[_0x372d9d(0x237)]>0x0&&(_0xeaf6b0+=Math[_0x372d9d(0xb55)](_0x3dc188['hpDamage'])),$gameVariables[_0x372d9d(0x3a0)](_0x22b81a[_0x372d9d(0xb43)],_0xeaf6b0);}else this[_0x372d9d(0x80b)](_0x372d9d(0x9e0));}if(_0x22b81a[_0x372d9d(0xad6)]){let _0x92d92a=$gameVariables[_0x372d9d(0xa53)](_0x22b81a['VariableHeal']);_0x3dc188[_0x372d9d(0x237)]<0x0&&(_0x92d92a+=Math[_0x372d9d(0xb55)](_0x3dc188[_0x372d9d(0x237)])),$gameVariables[_0x372d9d(0x3a0)](_0x22b81a[_0x372d9d(0xad6)],_0x92d92a);}},VisuMZ[_0x3df63e(0xa69)]['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x9a5)],Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x9a5)]=function(){const _0x10064b=_0x3df63e;VisuMZ[_0x10064b(0xa69)][_0x10064b(0x4ec)][_0x10064b(0x5d9)](this),this[_0x10064b(0x845)]();},Game_BattlerBase[_0x3df63e(0x655)]['initMembersBattleCore']=function(){this['_immortal']=![];},VisuMZ[_0x3df63e(0xa69)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0xbcf)],Game_BattlerBase[_0x3df63e(0x655)]['refresh']=function(){const _0x4ca0a6=_0x3df63e;this[_0x4ca0a6(0xab0)]={},VisuMZ[_0x4ca0a6(0xa69)]['Game_BattlerBase_refresh'][_0x4ca0a6(0x5d9)](this);},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0xb67)]=function(_0x50fada){const _0x192763=_0x3df63e;return this['_cache']=this[_0x192763(0xab0)]||{},this['_cache'][_0x50fada]!==undefined;},Game_BattlerBase[_0x3df63e(0x655)]['hardDamageCap']=function(){const _0x5db9a1=_0x3df63e;if(this[_0x5db9a1(0xab0)][_0x5db9a1(0xabd)]!==undefined)return this[_0x5db9a1(0xab0)][_0x5db9a1(0xabd)];const _0x38ac38=/<DAMAGE CAP:[ ](\d+)>/i,_0x3256fc=this[_0x5db9a1(0x86d)]()[_0x5db9a1(0x3a8)](_0x500226=>_0x500226&&_0x500226[_0x5db9a1(0x45f)][_0x5db9a1(0x64e)](_0x38ac38)?Number(RegExp['$1']):0x0);let _0x5d6166=_0x3256fc[_0x5db9a1(0xb02)]>0x0?Math[_0x5db9a1(0x7a7)](..._0x3256fc):0x0;if(_0x5d6166<=0x0)_0x5d6166=VisuMZ[_0x5db9a1(0xa69)][_0x5db9a1(0x5eb)][_0x5db9a1(0x488)][_0x5db9a1(0x41e)];return this[_0x5db9a1(0xab0)][_0x5db9a1(0xabd)]=_0x5d6166,this[_0x5db9a1(0xab0)][_0x5db9a1(0xabd)];},Game_BattlerBase['prototype'][_0x3df63e(0xaa4)]=function(){const _0x32e361=_0x3df63e;if(this[_0x32e361(0xab0)][_0x32e361(0xa4a)]!==undefined)return this[_0x32e361(0xab0)][_0x32e361(0xa4a)];let _0x23be56=VisuMZ[_0x32e361(0xa69)][_0x32e361(0x5eb)]['Damage'][_0x32e361(0x9cb)];const _0x36cdc5=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3c4cd6=this[_0x32e361(0x86d)]()[_0x32e361(0x3a8)](_0x53d482=>_0x53d482&&_0x53d482[_0x32e361(0x45f)]['match'](_0x36cdc5)?Number(RegExp['$1'])/0x64:0x0);return _0x23be56=_0x3c4cd6['reduce']((_0x57eef5,_0x282e52)=>_0x57eef5+_0x282e52,_0x23be56),this['_cache'][_0x32e361(0xa4a)]=_0x23be56,this[_0x32e361(0xab0)][_0x32e361(0xa4a)]['clamp'](0.01,0x1);},VisuMZ['BattleCore'][_0x3df63e(0xa6d)]=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x3d8)],Game_BattlerBase['prototype'][_0x3df63e(0x3d8)]=function(){const _0x4176bb=_0x3df63e;VisuMZ[_0x4176bb(0xa69)]['Game_BattlerBase_die'][_0x4176bb(0x5d9)](this),SceneManager[_0x4176bb(0x2a9)]()&&this['requestMotion'](_0x4176bb(0x881));},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x669)]=function(){const _0x4625f6=_0x3df63e;if(!SceneManager[_0x4625f6(0x2a9)]())return null;if(!SceneManager[_0x4625f6(0x8e2)][_0x4625f6(0x449)])return null;return SceneManager[_0x4625f6(0x8e2)][_0x4625f6(0x449)][_0x4625f6(0x6d8)](this);},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x5d2)]=function(){const _0x398e58=_0x3df63e;return VisuMZ[_0x398e58(0xa69)][_0x398e58(0x5eb)][_0x398e58(0x4d0)]['AnchorX'];},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x952)]=function(){const _0x4e0c99=_0x3df63e;return VisuMZ[_0x4e0c99(0xa69)][_0x4e0c99(0x5eb)][_0x4e0c99(0x4d0)][_0x4e0c99(0x735)];},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0xaf7)]=function(){const _0x4b1846=_0x3df63e;if(this['isActor']&&this['isActor']()){if(_0x4b1846(0x4ef)===_0x4b1846(0x4ef))return VisuMZ[_0x4b1846(0xa69)][_0x4b1846(0x5eb)]['Actor']['Shadow'];else this[_0x4b1846(0x94e)][_0x4b1846(0x414)]();}else return VisuMZ[_0x4b1846(0xa69)][_0x4b1846(0x5eb)][_0x4b1846(0x580)][_0x4b1846(0x347)];},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x5d4)]=function(){return!![];},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x270)]=function(){return 0x0;},Game_BattlerBase[_0x3df63e(0x655)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x75c)]=function(_0x582b2c){const _0x580a5a=_0x3df63e;if(!_0x582b2c)return 0x0;let _0x4c38e0=0x0;const _0x2be554=_0x582b2c[_0x580a5a(0x45f)];return _0x2be554[_0x580a5a(0x64e)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4c38e0+=Number(RegExp['$1'])),_0x2be554[_0x580a5a(0x64e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4c38e0+=Number(RegExp['$1'])),_0x4c38e0;},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x44b)]=function(_0x4009d6){const _0x28dc77=_0x3df63e;if(!_0x4009d6)return 0x0;let _0x4610ab=0x0;const _0x222cfd=_0x4009d6[_0x28dc77(0x45f)];if(_0x222cfd[_0x28dc77(0x64e)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x28dc77(0xa33)!==_0x28dc77(0x275))_0x4610ab+=Number(RegExp['$1']);else return _0x192f5d[_0x28dc77(0x529)]()[_0x28dc77(0xaaa)](_0x1140a6=>_0x1140a6!==_0x43e3b7);}return _0x222cfd['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4610ab+=Number(RegExp['$2'])),_0x4610ab;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4a9)]=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x286)],Game_BattlerBase['prototype']['isStateResist']=function(_0x336f9e){const _0x1556a0=_0x3df63e;if(_0x336f9e===this[_0x1556a0(0x693)]()&&this[_0x1556a0(0xac1)]()){if(_0x1556a0(0x435)!==_0x1556a0(0x435)){if(_0x4a3839['BattleCore']['Settings'][_0x1556a0(0x862)][_0x1556a0(0x895)]){const _0x78646a=_0x20098b[_0x1556a0(0x918)]();this[_0x1556a0(0x9cd)]('showAnimation',_0x28baa1,[_0x55d380],_0x78646a['animationId']);}}else return!![];}return VisuMZ[_0x1556a0(0xa69)]['Game_BattlerBase_isStateResist'][_0x1556a0(0x5d9)](this,_0x336f9e);},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0xac1)]=function(){return this['_immortal'];},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x21b)]=function(_0xc3360){const _0x542ed6=_0x3df63e;_0xc3360?'SLiFu'===_0x542ed6(0x3d9)?this['addImmortal']():this['isTpb']()?this['selectNextCommandTpb']():_0x53800e[_0x542ed6(0xa69)][_0x542ed6(0x1bb)][_0x542ed6(0x5d9)](this):this[_0x542ed6(0xbd1)]();},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x5e4)]=function(){const _0x49f9d5=_0x3df63e;if(this[_0x49f9d5(0x9a0)]())return;this[_0x49f9d5(0x8df)]=!![],this[_0x49f9d5(0x51e)]=![];},Game_BattlerBase['prototype'][_0x3df63e(0xbd1)]=function(){const _0x53dc1f=_0x3df63e,_0x23e3a2=this['isAlive']();this['_immortal']=![];_0x23e3a2&&this[_0x53dc1f(0x51e)]&&this['die']();this[_0x53dc1f(0x51e)]=![],this['refresh']();if(this[_0x53dc1f(0x9a0)]()&&_0x23e3a2){if(_0x53dc1f(0xa26)===_0x53dc1f(0xa26))this[_0x53dc1f(0x327)](),this[_0x53dc1f(0xbb2)]();else{_0x316b39-=_0x13d3f6[_0x46af94];if(_0x20704a<=0x0)return _0x3bab43;}}},VisuMZ[_0x3df63e(0xa69)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x195)],Game_BattlerBase[_0x3df63e(0x655)]['canAttack']=function(){const _0x5c1f65=_0x3df63e;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x5c1f65(0xa69)][_0x5c1f65(0x214)][_0x5c1f65(0x5d9)](this);},Game_BattlerBase[_0x3df63e(0x655)]['canAttackBattleCore']=function(){const _0x5a6951=_0x3df63e;for(const _0x4cd357 of this[_0x5a6951(0x86d)]()){if(!_0x4cd357)continue;if(_0x4cd357[_0x5a6951(0x45f)][_0x5a6951(0x64e)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb63)]=Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x3c3)],Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x3c3)]=function(){const _0x5a23e4=_0x3df63e;if(!this[_0x5a23e4(0x8b6)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canGuard']['call'](this);},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x8b6)]=function(){const _0x34e452=_0x3df63e;for(const _0x440570 of this[_0x34e452(0x86d)]()){if(_0x34e452(0xa20)!==_0x34e452(0xa0c)){if(!_0x440570)continue;if(_0x440570[_0x34e452(0x45f)][_0x34e452(0x64e)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else this['_mainSprite'][_0x34e452(0xa39)][_0x34e452(0x4f6)]=this[_0x34e452(0x957)]['battlerSmoothImage']();}return!![];},Game_BattlerBase[_0x3df63e(0x655)]['canUseItemCommand']=function(){const _0x2c0b2d=_0x3df63e;for(const _0x226026 of this[_0x2c0b2d(0x86d)]()){if(!_0x226026)continue;if(_0x226026[_0x2c0b2d(0x45f)][_0x2c0b2d(0x64e)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x3df63e(0x655)]['allowRandomSpeed']=function(){const _0x5ab9b3=_0x3df63e;return VisuMZ[_0x5ab9b3(0xa69)][_0x5ab9b3(0x5eb)][_0x5ab9b3(0x688)]['AllowRandomSpeed'];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x641)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x1e5)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x1e5)]=function(){const _0x5bd263=_0x3df63e;if(SceneManager[_0x5bd263(0x2a9)]()&&$gameTroop['turnCount']()<=0x0)return;if(SceneManager[_0x5bd263(0x2a9)]()&&BattleManager[_0x5bd263(0x9a8)]()&&this[_0x5bd263(0x531)]===Graphics['frameCount']){if(_0x5bd263(0x18b)!==_0x5bd263(0x18b))this[_0x5bd263(0x46b)]='portrait';else return;}this[_0x5bd263(0x531)]=Graphics[_0x5bd263(0xa9f)],this[_0x5bd263(0xaba)](_0x5bd263(0x419)),VisuMZ['BattleCore'][_0x5bd263(0x641)][_0x5bd263(0x5d9)](this),this[_0x5bd263(0x55b)](),this[_0x5bd263(0xaba)](_0x5bd263(0x3a5));},Game_Battler['prototype'][_0x3df63e(0x55b)]=function(){const _0x1c94d6=_0x3df63e;if(SceneManager[_0x1c94d6(0x2a9)]())for(const _0x1a22dd of this[_0x1c94d6(0x86d)]()){if('YgADB'!=='fXUia'){if(!_0x1a22dd)continue;this[_0x1c94d6(0x26f)](_0x1a22dd);}else return _0x3a4069[_0x1c94d6(0xa69)][_0x1c94d6(0x5eb)][_0x1c94d6(0x580)][_0x1c94d6(0xb70)]||_0x20d5c1[_0x1c94d6(0x52e)]();}},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x26f)]=function(_0x42d8eb){const _0x43c470=_0x3df63e;if(!Imported[_0x43c470(0x1ec)])return;if(!SceneManager[_0x43c470(0x2a9)]())return;if(this[_0x43c470(0x9a0)]())return;if(this['isHidden']())return;if(_0x42d8eb['note'][_0x43c470(0x64e)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x43c470(0x91b)!=='ZLWAb')this['startMotion'](_0x43c470(0x838));else{const _0x2e759c=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x2e759c,![],![]);}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb01)]=Game_Battler['prototype'][_0x3df63e(0x6e1)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x6e1)]=function(){const _0x521e63=_0x3df63e;this[_0x521e63(0xaba)](_0x521e63(0x283)),VisuMZ[_0x521e63(0xa69)]['Game_Battler_startTpbTurn'][_0x521e63(0x5d9)](this),this[_0x521e63(0xaba)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x3df63e(0x8a9)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x36e)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x36e)]=function(){const _0x148fd5=_0x3df63e;this['processBattleCoreJS'](_0x148fd5(0xa40)),VisuMZ[_0x148fd5(0xa69)][_0x148fd5(0x8a9)][_0x148fd5(0x5d9)](this),this[_0x148fd5(0xaba)](_0x148fd5(0xb44));},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xaba)]=function(_0x44d21c){const _0x4afa77=_0x3df63e;if(this['_tempBattler']||this[_0x4afa77(0x3c8)])return;const _0xe2582d=VisuMZ['BattleCore']['Settings']['Mechanics'];if(_0xe2582d[_0x44d21c])_0xe2582d[_0x44d21c][_0x4afa77(0x5d9)](this);for(const _0x55945a of this['traitObjects']()){if(_0x4afa77(0x7af)===_0x4afa77(0xad0)){const _0x464fe7=this[_0x4afa77(0x918)](),_0x245f94=_0x464fe7['damage'][_0x4afa77(0xae7)];_0x464fe7[_0x4afa77(0x9e0)][_0x4afa77(0xae7)]=this[_0x4afa77(0x330)];let _0x18f3dd=_0x25e379[_0x4afa77(0xa69)][_0x4afa77(0x2dc)][_0x4afa77(0x5d9)](this,_0x598a96);return _0x464fe7['damage'][_0x4afa77(0xae7)]=_0x245f94,_0x18f3dd;}else{if(!_0x55945a)continue;key=VisuMZ[_0x4afa77(0xa69)][_0x4afa77(0x3c1)](_0x55945a,_0x44d21c),VisuMZ[_0x4afa77(0xa69)]['JS'][key]&&('zgQqu'===_0x4afa77(0xb6a)?this['initialize'](...arguments):VisuMZ[_0x4afa77(0xa69)]['JS'][key][_0x4afa77(0x5d9)](this,this,this,_0x55945a,0x0));}}},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x7ca)]=function(){const _0x56b874=_0x3df63e;return VisuMZ[_0x56b874(0xa69)][_0x56b874(0x5eb)][_0x56b874(0x4d0)][_0x56b874(0x7c3)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x346bfe=_0x3df63e;if(this[_0x346bfe(0x1a3)]()){if(this[_0x346bfe(0x7ca)]()){if(this['_actions']['some'](_0x54579e=>_0x54579e['item']()&&_0x54579e[_0x346bfe(0xbbb)]()))return!![];}else{if(this[_0x346bfe(0x758)][_0x346bfe(0x25c)](_0x370cc6=>_0x370cc6[_0x346bfe(0x918)]()&&_0x370cc6[_0x346bfe(0x75a)]())){if(_0x346bfe(0x6bb)!==_0x346bfe(0x7cd))return!![];else _0x5f4217[_0x346bfe(0x9cd)](_0x346bfe(0xb22),_0x5585a0,_0x497c2);}}}if(BattleManager['isTpb']()&&this[_0x346bfe(0x5c2)]===_0x346bfe(0x6b3)){if(_0x346bfe(0x8a3)==='mjTZq')_0x1c6cfa['_autoBattle']=!![],_0x328b13['makeActions'](),this[_0x346bfe(0x259)](),_0x15c51f[_0x346bfe(0x9a8)]()&&(_0x5c18ad['_inputting']=![]);else{if(this['chantStyle']()){if(_0x346bfe(0x88b)===_0x346bfe(0x662)){if(this['isTurnBased']())this['processBattleCoreJS'](_0x346bfe(0x283));_0x7e686b[_0x346bfe(0xa69)]['BattleManager_startTurn'][_0x346bfe(0x5d9)](this);if(this['isTurnBased']())this[_0x346bfe(0xaba)](_0x346bfe(0x2f1));}else return this['currentAction']()&&this[_0x346bfe(0x17e)]()[_0x346bfe(0x918)]()&&this[_0x346bfe(0x17e)]()[_0x346bfe(0xbbb)]();}else{if(_0x346bfe(0x468)==='uTrSI')return this[_0x346bfe(0x17e)]()&&this['currentAction']()['item']()&&this[_0x346bfe(0x17e)]()[_0x346bfe(0x75a)]();else{const _0x4dca1e=_0x138f1a['BattleCore'][_0x346bfe(0x5eb)];if(this[_0x346bfe(0x1da)]===_0x17b0ea)_0x4f9fab+=_0x4dca1e[_0x346bfe(0x4d0)][_0x346bfe(0x7e9)]||0x0,_0x450082+=_0x4dca1e[_0x346bfe(0x4d0)][_0x346bfe(0x3b3)]||0x0;else this['constructor']===_0xae8ff4&&(_0x57216f+=_0x4dca1e[_0x346bfe(0x580)][_0x346bfe(0x7e9)]||0x0,_0x5db969+=_0x4dca1e['Enemy'][_0x346bfe(0x3b3)]||0x0);_0x3f0ba4[_0x346bfe(0xa69)][_0x346bfe(0x1ee)][_0x346bfe(0x5d9)](this,_0x15f1bf,_0x3caa6b);}}}}return![];},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x4c2)]=function(){const _0x3c5324=_0x3df63e;if(BattleManager[_0x3c5324(0x9a8)]()&&this[_0x3c5324(0x5c2)]===_0x3c5324(0x6b3)){if(_0x3c5324(0x705)!==_0x3c5324(0x721))return this[_0x3c5324(0x7ca)]()?'SYkBE'===_0x3c5324(0x6c7)?this[_0x3c5324(0x17e)]()&&this[_0x3c5324(0x17e)]()['item']()&&!this['currentAction']()[_0x3c5324(0xbbb)]():_0x3c5324(0x850)[_0x3c5324(0x4f8)](_0x4e5f1d(_0x18a7e1['$1'])):_0x3c5324(0x851)!==_0x3c5324(0x743)?this['currentAction']()&&this[_0x3c5324(0x17e)]()[_0x3c5324(0x918)]()&&!this[_0x3c5324(0x17e)]()[_0x3c5324(0x75a)]():_0xeb8e05(_0x23cfb4['$1'])*0.01;else _0x240d7a['BattleCore'][_0x3c5324(0xa48)][_0x3c5324(0x5d9)](this),this[_0x3c5324(0x72b)]();}return![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x37f)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x167)],Game_Battler[_0x3df63e(0x655)]['clearDamagePopup']=function(){const _0x3ea1a5=_0x3df63e;VisuMZ['BattleCore'][_0x3ea1a5(0x37f)][_0x3ea1a5(0x5d9)](this),this[_0x3ea1a5(0x53d)]=[];},Game_Battler[_0x3df63e(0x655)]['isDamagePopupRequested']=function(){const _0x321d39=_0x3df63e;if(!this['_damagePopupArray'])this['clearDamagePopup']();return this[_0x321d39(0x53d)][_0x321d39(0xb02)]>0x0;},Game_Battler[_0x3df63e(0x655)]['startDamagePopup']=function(){const _0x5d7abc=_0x3df63e;if(!SceneManager[_0x5d7abc(0x2a9)]())return;if(!this['_damagePopupArray'])this['clearDamagePopup']();this[_0x5d7abc(0x447)]();const _0x13c1bd=this[_0x5d7abc(0x669)]();if(_0x13c1bd)_0x13c1bd['setupDamagePopup']();},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x447)]=function(){const _0x32fe94=_0x3df63e,_0x2925bf=this['result']();if(_0x2925bf['missed']||_0x2925bf[_0x32fe94(0x1f7)]){const _0x458ed6=JsonEx[_0x32fe94(0x480)](_0x2925bf);_0x458ed6[_0x32fe94(0x196)]=![],_0x458ed6[_0x32fe94(0x951)]=0x0,this[_0x32fe94(0x53d)]['push'](_0x458ed6);}if(_0x2925bf['hpAffected']){const _0x535f17=JsonEx[_0x32fe94(0x480)](_0x2925bf);_0x535f17[_0x32fe94(0x30b)]=![],_0x535f17[_0x32fe94(0x1f7)]=![],_0x535f17['mpDamage']=0x0,this[_0x32fe94(0x53d)][_0x32fe94(0x9cd)](_0x535f17);}if(_0x2925bf[_0x32fe94(0x951)]!==0x0){const _0x34b0ad=JsonEx['makeDeepCopy'](_0x2925bf);_0x34b0ad['missed']=![],_0x34b0ad[_0x32fe94(0x1f7)]=![],_0x34b0ad['hpAffected']=![],this[_0x32fe94(0x53d)]['push'](_0x34b0ad);}},Game_Battler[_0x3df63e(0x655)]['getNextDamagePopup']=function(){const _0x1d798b=_0x3df63e;if(!this[_0x1d798b(0x53d)])this[_0x1d798b(0x167)]();if(VisuMZ[_0x1d798b(0xa69)][_0x1d798b(0x5eb)]['Damage'][_0x1d798b(0x753)])return this[_0x1d798b(0x53d)]['shift']();else{if(_0x1d798b(0xb2f)!==_0x1d798b(0x1e1))return this[_0x1d798b(0x53d)]['pop']();else{this[_0x1d798b(0x366)]=_0x599304[_0x1d798b(0x366)],this['height']=_0x4db1f3['height'];const _0x4b1d83=0x1;this[_0x1d798b(0x5c3)]['x']=_0x4b1d83,this['scale']['y']=_0x4b1d83,this['x']=0x0,this['y']=0x0;}}},Game_Battler['prototype'][_0x3df63e(0x868)]=function(_0x461611,_0x4a64e4){const _0x19c692=_0x3df63e;if(!SceneManager['isSceneBattle']())return;if(!this[_0x19c692(0x669)]())return;if(_0x461611[_0x19c692(0xb02)]<=0x0)return;_0x4a64e4=_0x4a64e4||{},_0x4a64e4[_0x19c692(0xab4)]=_0x4a64e4[_0x19c692(0xab4)]||_0x19c692(0x930),_0x4a64e4[_0x19c692(0xa1e)]=_0x4a64e4[_0x19c692(0xa1e)]||[0x0,0x0,0x0,0x0],_0x4a64e4['flashDuration']=_0x4a64e4['flashDuration']||0x0,this['battler']()[_0x19c692(0x868)](_0x461611,_0x4a64e4);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x78f)]=function(_0x35bd94,_0x35f3fc,_0x31b661){const _0xea16d0=_0x3df63e;if(!SceneManager[_0xea16d0(0x2a9)]())return;if(!this['battler']())return;if(_0x35f3fc['length']<=0x0)return;_0x31b661=_0x31b661||{},_0x31b661[_0xea16d0(0xab4)]=_0x31b661[_0xea16d0(0xab4)]||_0xea16d0(0x930),_0x31b661[_0xea16d0(0xa1e)]=_0x31b661[_0xea16d0(0xa1e)]||[0x0,0x0,0x0,0x0],_0x31b661[_0xea16d0(0x2b1)]=_0x31b661[_0xea16d0(0x2b1)]||0x0,this[_0xea16d0(0x669)]()[_0xea16d0(0x78f)](_0x35bd94,_0x35f3fc,_0x31b661);},Game_Battler[_0x3df63e(0x655)]['notFocusValid']=function(){const _0x1f144c=_0x3df63e;if(this['isHidden']())return![];if(this[_0x1f144c(0x8fc)]()&&this[_0x1f144c(0xaa1)]())return!![];if(this[_0x1f144c(0xaad)]()&&this[_0x1f144c(0x5c5)]()){if(_0x1f144c(0x861)!==_0x1f144c(0x861))return this['parent']?this['parent'][_0x1f144c(0xb52)]===0x0&&this[_0x1f144c(0xb7b)][_0x1f144c(0x687)]===0x0:!![];else{if(this['isDead']()&&this['allowCollapse']())return![];}}else{if(this[_0x1f144c(0x9a0)]())return![];}return!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x37b)]=Game_Battler['prototype'][_0x3df63e(0x1c8)],Game_Battler[_0x3df63e(0x655)]['clearMotion']=function(){const _0x4c3052=_0x3df63e;VisuMZ[_0x4c3052(0xa69)][_0x4c3052(0x37b)][_0x4c3052(0x5d9)](this),this[_0x4c3052(0xb11)]();},Game_Battler['prototype'][_0x3df63e(0x2f4)]=function(){return!![];},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x96d)]=function(){return![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x339)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xa19)],Game_Battler['prototype'][_0x3df63e(0xa19)]=function(_0x2b5284){const _0x1b10b1=_0x3df63e;VisuMZ[_0x1b10b1(0xa69)][_0x1b10b1(0x339)][_0x1b10b1(0x5d9)](this,_0x2b5284),this[_0x1b10b1(0x975)](_0x2b5284);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x975)]=function(_0x5e70ee){const _0x268362=_0x3df63e;this[_0x268362(0x390)](![]);},VisuMZ['BattleCore'][_0x3df63e(0x600)]=Game_Battler['prototype'][_0x3df63e(0x638)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x638)]=function(_0x7adef3){const _0x57944e=_0x3df63e;VisuMZ[_0x57944e(0xa69)][_0x57944e(0x600)][_0x57944e(0x5d9)](this,_0x7adef3);if(!_0x7adef3[_0x57944e(0x247)]()){if('vVaSl'===_0x57944e(0xaa9))this[_0x57944e(0x6b2)](),_0x5ce6cb[_0x57944e(0xa69)][_0x57944e(0xa81)][_0x57944e(0x5d9)](this);else{const _0x17a55b=this[_0x57944e(0x669)]();if(_0x17a55b){if(_0x57944e(0x4b3)!==_0x57944e(0x4b3)){if(!_0x1de9cc[_0x57944e(0xa53)](_0x54305c))return!![];}else _0x17a55b[_0x57944e(0xaab)]();}}}this[_0x57944e(0x390)](![]);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x369)]=function(){const _0x1b1bce=_0x3df63e,_0x1ca7b8=this[_0x1b1bce(0x337)];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0x1b1bce(0x4a2)]()){const _0x1837d2=this[_0x1b1bce(0x669)]();if(_0x1837d2&&_0x1ca7b8)_0x1837d2[_0x1b1bce(0xaab)]();return;}const _0x4303ab=this[_0x1b1bce(0x669)]();if(_0x4303ab)_0x4303ab[_0x1b1bce(0x46e)]();this['setBattlerFlip'](![]),this[_0x1b1bce(0xbb2)]();},Game_Battler['prototype'][_0x3df63e(0xafd)]=function(_0x53e9e1){const _0x50fb40=_0x3df63e;if(_0x53e9e1['isAttack']())_0x50fb40(0x389)===_0x50fb40(0x389)?this[_0x50fb40(0xb49)]():(this['_battlerName']=_0x32839e,this[_0x50fb40(0x620)]['bitmap']=_0x198e7a[_0x50fb40(0x92d)](_0x146f46));else{if(_0x53e9e1[_0x50fb40(0x247)]())this[_0x50fb40(0x80b)](_0x50fb40(0x912));else{if(_0x53e9e1['isMagical']())this[_0x50fb40(0x80b)]('spell');else{if(_0x53e9e1['isSkill']()){if(_0x53e9e1['item']()[_0x50fb40(0x9e0)][_0x50fb40(0x3ad)]>0x0){if('PlIbo'===_0x50fb40(0x33f))return!![];else this[_0x50fb40(0xb49)]();}else this[_0x50fb40(0x80b)]('skill');}else _0x53e9e1[_0x50fb40(0x43d)]()&&this['requestMotion'](_0x50fb40(0x918));}}}},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x88a)]=function(){const _0x3c278a=_0x3df63e;return $dataSystem[_0x3c278a(0x8ed)][0x0];},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x3b0)]=function(){const _0x30fa9a=_0x3df63e,_0x3a4531=this[_0x30fa9a(0x88a)]();return _0x3a4531?_0x3a4531['weaponImageId']:0x0;},Game_Battler[_0x3df63e(0x655)]['performSubstitute']=function(_0x2d922b){const _0x5ca44f=_0x3df63e;if(!$gameSystem[_0x5ca44f(0x8e3)]())return;const _0x479590=this['battler'](),_0x42910=_0x2d922b[_0x5ca44f(0x669)]();if(!_0x479590||!_0x42910)return;const _0x43abe6=_0x42910[_0x5ca44f(0x924)],_0x548b9b=_0x42910['_baseY'];this[_0x5ca44f(0x3f1)](_0x43abe6,_0x548b9b,0x0,![],'Linear',-0x1),_0x479590[_0x5ca44f(0x3f3)]();const _0x232113=VisuMZ[_0x5ca44f(0xa69)][_0x5ca44f(0x5eb)][_0x5ca44f(0x862)];let _0x536039=(_0x42910[_0x5ca44f(0x366)]+_0x479590[_0x5ca44f(0x366)])/0x2;_0x536039*=this[_0x5ca44f(0x5c6)]()?0x1:-0x1;let _0x282be2=_0x232113[_0x5ca44f(0x80c)]*(this[_0x5ca44f(0x5c6)]()?0x1:-0x1);_0x2d922b[_0x5ca44f(0x61a)](_0x536039,_0x282be2,0x0,![],_0x5ca44f(0x25d)),_0x42910[_0x5ca44f(0x3f3)]();},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x80b)]=function(_0x435744){const _0x16c1ca=_0x3df63e;if(SceneManager['isSceneBattle']()){if(_0x16c1ca(0x285)===_0x16c1ca(0x285)){const _0x238b24=this[_0x16c1ca(0x669)]();_0x238b24&&(_0x238b24[_0x16c1ca(0x70c)](_0x435744),['swing',_0x16c1ca(0xb45),_0x16c1ca(0x576)][_0x16c1ca(0xa22)](_0x435744)&&this['performWeaponAnimation']());}else return this[_0x16c1ca(0xb66)](_0x3f099d);}this[_0x16c1ca(0xb11)]();},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x62f)]=function(){},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x23b)]=function(_0x24a19f){const _0x43a1ac=_0x3df63e;if(SceneManager[_0x43a1ac(0x2a9)]()){if(_0x43a1ac(0x686)===_0x43a1ac(0x686)){const _0x50a0ae=this[_0x43a1ac(0x669)]();if(_0x50a0ae)_0x50a0ae[_0x43a1ac(0x9c8)](_0x24a19f);}else this[_0x43a1ac(0x1c6)]['x']=_0x3984a6[_0x43a1ac(0x366)]-(_0x4a3b5e[_0x43a1ac(0x366)]-_0x4903c3[_0x43a1ac(0x8b9)])/0x2-this[_0x43a1ac(0x1c6)]['width']-0x4;}},Game_Battler[_0x3df63e(0x655)]['startAttackWeaponAnimation']=function(){const _0x42a79e=_0x3df63e;if(SceneManager[_0x42a79e(0x2a9)]()){const _0x21581d=this[_0x42a79e(0x3b0)]();this['startWeaponAnimation'](_0x21581d);}},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x221)]=function(_0x29413d,_0x3aec6b){const _0x3d4260=_0x3df63e;if(!_0x29413d)return;if(!_0x29413d[_0x3d4260(0x918)]())return;if(_0x29413d[_0x3d4260(0x7f8)]())return;if(_0x29413d[_0x3d4260(0x247)]())return;if(_0x29413d[_0x3d4260(0x43d)]())return;let _0x57652b=0x0;const _0x3d428d=VisuMZ[_0x3d4260(0xa69)]['Settings']['ActionSequence'],_0x470edb=_0x29413d[_0x3d4260(0x918)]()[_0x3d4260(0x45f)];if(_0x470edb[_0x3d4260(0x64e)](/<CAST ANIMATION: (\d+)>/i))_0x57652b=Number(RegExp['$1']);else{if(_0x470edb[_0x3d4260(0x64e)](/<NO CAST ANIMATION>/i))return;else{if(_0x29413d[_0x3d4260(0x5c0)]()){if('UDHro'!=='wRexr')_0x57652b=_0x3d428d[_0x3d4260(0x430)];else return this[_0x3d4260(0x27e)][_0x5433f5];}else{if(_0x29413d['isPhysical']())_0x57652b=_0x3d428d[_0x3d4260(0x1f5)];else _0x29413d['isMagical']()&&(_0x57652b=_0x3d428d['CastMagical']);}}}if(_0x57652b>0x0){if(_0x3d4260(0x6dc)===_0x3d4260(0x6dc))$gameTemp[_0x3d4260(0x827)]([this],_0x57652b,!!_0x3aec6b);else{if(_0xe226b9[_0x3d4260(0x5c6)]()&&!_0x3da92e[_0x3d4260(0x8e3)]())return;const _0x1701d6=_0x16389b['battler']();if(_0x1701d6&&_0x1a24af[_0x3d4260(0x5c6)]())this['_battlerContainer'][_0x3d4260(0x699)](_0x1701d6);}}},Game_Battler[_0x3df63e(0x655)]['performReflection']=function(){const _0x11985a=_0x3df63e;SoundManager[_0x11985a(0xa29)]();let _0x4a94b3=VisuMZ[_0x11985a(0xa69)][_0x11985a(0x5eb)][_0x11985a(0x862)][_0x11985a(0x8ee)];_0x4a94b3>0x0&&('NHdcq'===_0x11985a(0xa23)?_0x2363f8=_0x370b92>=_0x54b598?_0x160e73:_0x249aff:Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x11985a(0x256)]([this],_0x4a94b3):$gameTemp[_0x11985a(0x827)]([this],_0x4a94b3));},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5cb)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x5e8)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x5e8)]=function(){const _0x534545=_0x3df63e;VisuMZ[_0x534545(0xa69)][_0x534545(0x5cb)]['call'](this),this['performFlinch']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x436)]=Game_Battler['prototype'][_0x3df63e(0x71d)],Game_Battler[_0x3df63e(0x655)]['performMiss']=function(){const _0x57fed4=_0x3df63e;VisuMZ[_0x57fed4(0xa69)]['Game_Battler_performMiss'][_0x57fed4(0x5d9)](this),this[_0x57fed4(0x3a4)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x852)]=Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x3d3)],Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x3d3)]=function(){const _0x909329=_0x3df63e;VisuMZ[_0x909329(0xa69)][_0x909329(0x852)][_0x909329(0x5d9)](this),this[_0x909329(0x3a4)]();},Game_Battler['prototype'][_0x3df63e(0x3a4)]=function(){const _0x37d0c6=_0x3df63e;if(!$gameSystem['isSideView']())return;if(this[_0x37d0c6(0x337)])return;this[_0x37d0c6(0x337)]=!![];const _0x263861=this[_0x37d0c6(0x669)]();if(_0x263861)_0x263861[_0x37d0c6(0x5e3)]();},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xbb2)]=function(){const _0x4fa8c5=_0x3df63e;if(this[_0x4fa8c5(0x9a0)]()&&this[_0x4fa8c5(0x91e)]!==_0x4fa8c5(0x881)){if(_0x4fa8c5(0x1e4)===_0x4fa8c5(0x1e4)){this[_0x4fa8c5(0x80b)](_0x4fa8c5(0x881));return;}else{const _0x2d26d4=_0x11367d[_0x4fa8c5(0x655)][_0x4fa8c5(0x3f6)][_0x4fa8c5(0x5d9)](arguments,0x1);this[_0x4fa8c5(0x9bf)]['unshift']({'name':_0x39f64b,'params':_0x2d26d4});}}if(this[_0x4fa8c5(0x9a0)]()&&this[_0x4fa8c5(0x91e)]===_0x4fa8c5(0x881))return;if(!!this[_0x4fa8c5(0x3b7)])return;if(this[_0x4fa8c5(0xaad)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x4fa8c5(0x8fd)]){if(_0x4fa8c5(0x754)===_0x4fa8c5(0x754)){if(this['battler']())this['battler']()[_0x4fa8c5(0x35b)]();}else this['addPartyCommand']();}this[_0x4fa8c5(0xb11)]();return;}if(this[_0x4fa8c5(0x91e)]==='victory')return;if(this['_motionType']===_0x4fa8c5(0xada)&&!BattleManager['isInputting']())return;if(this[_0x4fa8c5(0x91e)]===_0x4fa8c5(0x912)&&!BattleManager[_0x4fa8c5(0x4a2)]())return;this[_0x4fa8c5(0x1c8)]();if(this[_0x4fa8c5(0x669)]()&&BattleManager[_0x4fa8c5(0x4a2)]()){this['battler']()['refreshMotion'](),this[_0x4fa8c5(0xb11)]();return;}},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x9bd)]=function(){const _0x28cf4c=_0x3df63e;if(!this[_0x28cf4c(0x5c5)]())return![];const _0x53181c=this[_0x28cf4c(0x669)]();if(!_0x53181c)return![];const _0x211dca=_0x53181c[_0x28cf4c(0x431)];if(!_0x211dca)return![];const _0x5b97f2=_0x211dca[_0x28cf4c(0xb8d)];return _0x5b97f2&&!_0x5b97f2[_0x28cf4c(0x19c)];},Game_Battler['prototype'][_0x3df63e(0x8d4)]=function(){const _0x4905da=_0x3df63e;return this[_0x4905da(0x82e)];},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x390)]=function(_0x27f043){const _0x325809=_0x3df63e;if(!$gameSystem[_0x325809(0x8e3)]())return;this['_isBattlerFlipped']=_0x27f043;const _0x5c46e9=this[_0x325809(0x669)]();if(_0x5c46e9)_0x5c46e9[_0x325809(0x194)]();},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xb6f)]=function(_0x2b91e9,_0x20bfae,_0x28e9c5){const _0x988c7e=_0x3df63e;if(!$gameSystem['isSideView']())return;const _0x1bb631=this[_0x988c7e(0x669)]();if(!_0x1bb631)return;if(_0x2b91e9===_0x1bb631[_0x988c7e(0x924)])return;let _0x1e62fe=![];if(this[_0x988c7e(0x5c6)]()){if(_0x2b91e9>_0x1bb631['_baseX'])_0x1e62fe=!![];if(_0x2b91e9<_0x1bb631[_0x988c7e(0x924)])_0x1e62fe=![];}else{if(this[_0x988c7e(0xaad)]()){if(_0x2b91e9>_0x1bb631['_baseX'])_0x1e62fe=![];if(_0x2b91e9<_0x1bb631[_0x988c7e(0x924)])_0x1e62fe=!![];}};this[_0x988c7e(0x390)](_0x28e9c5?!_0x1e62fe:_0x1e62fe),_0x1bb631['updateFlip']();},Game_Battler[_0x3df63e(0x655)]['moveBattlerDistance']=function(_0x1dab02,_0x40f5f2,_0x4efc0d,_0x4126fc,_0x15c12f){const _0x49b678=_0x3df63e;if(!$gameSystem[_0x49b678(0x8e3)]())return;const _0x484646=this['battler']();if(!_0x484646)return;if(_0x4126fc)this[_0x49b678(0xb6f)](_0x1dab02+_0x484646['_baseX'],_0x40f5f2+_0x484646[_0x49b678(0x560)],![]);_0x1dab02+=_0x484646[_0x49b678(0x924)]-_0x484646[_0x49b678(0xa7d)],_0x40f5f2+=_0x484646[_0x49b678(0x560)]-_0x484646['_homeY'],_0x484646[_0x49b678(0xa97)](_0x1dab02,_0x40f5f2,_0x4efc0d);if(Imported[_0x49b678(0x1ec)])_0x484646[_0x49b678(0x2fa)](_0x15c12f||_0x49b678(0x25d));},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x3f1)]=function(_0x47141f,_0x2f4933,_0x485f28,_0x50d98b,_0x1fe147,_0x586695){const _0x26f085=_0x3df63e;if(!$gameSystem[_0x26f085(0x8e3)]())return;const _0x189b79=this[_0x26f085(0x669)]();if(!_0x189b79)return;_0x586695=_0x586695||0x0;if(_0x586695>0x0){if(_0x189b79[_0x26f085(0x924)]>_0x47141f)_0x47141f+=_0x189b79[_0x26f085(0x366)]/0x2+_0x586695;if(_0x189b79['_baseX']<_0x47141f)_0x47141f-=_0x189b79[_0x26f085(0x366)]/0x2+_0x586695;}if(_0x50d98b)this['setBattlerFacePoint'](_0x47141f,_0x2f4933,![]);_0x47141f-=_0x189b79[_0x26f085(0xa7d)],_0x2f4933-=_0x189b79[_0x26f085(0x17f)],_0x189b79[_0x26f085(0xa97)](_0x47141f,_0x2f4933,_0x485f28);if(Imported[_0x26f085(0x1ec)])_0x189b79['setMoveEasingType'](_0x1fe147||_0x26f085(0x25d));},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x910)]=function(_0x5e05fa,_0x247182,_0x37f6e2){const _0x465e02=_0x3df63e;if(!$gameSystem[_0x465e02(0x8e3)]())return;const _0x108b65=this[_0x465e02(0x669)]();if(!_0x108b65)return;_0x108b65[_0x465e02(0x7c4)](_0x5e05fa,_0x247182,_0x37f6e2);},Game_Battler['prototype'][_0x3df63e(0xa71)]=function(_0x12ead0,_0x429d66){const _0x32c430=_0x3df63e;if(!$gameSystem[_0x32c430(0x8e3)]())return;const _0x3bef04=this[_0x32c430(0x669)]();if(!_0x3bef04)return;_0x3bef04[_0x32c430(0x417)](_0x12ead0,_0x429d66);},Game_Battler['prototype'][_0x3df63e(0xb3d)]=function(_0x46f173,_0x48f5d7,_0x1b40f7,_0x5b7a9a){const _0x2b8093=_0x3df63e;if(!$gameSystem['isSideView']())return;const _0x2cc3bb=this[_0x2b8093(0x669)]();if(!_0x2cc3bb)return;_0x2cc3bb['startSpin'](_0x46f173,_0x48f5d7,_0x1b40f7,_0x5b7a9a);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x817)]=function(_0x304c95,_0x575f2a,_0x91f2e2,_0x98f23c){const _0x3b09da=_0x3df63e;if(!$gameSystem[_0x3b09da(0x8e3)]())return;const _0x72801e=this[_0x3b09da(0x669)]();if(!_0x72801e)return;this[_0x3b09da(0x5c6)]()&&(_0x304c95*=-0x1,_0x575f2a*=-0x1),_0x72801e['startSkew'](_0x304c95,_0x575f2a,_0x91f2e2,_0x98f23c);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x374)]=function(_0x3427a0,_0x4a6437,_0x1f15ed,_0x182f03){const _0x586d87=_0x3df63e;if(!$gameSystem[_0x586d87(0x8e3)]())return;const _0x50994e=this[_0x586d87(0x669)]();if(!_0x50994e)return;_0x50994e[_0x586d87(0x9e3)](_0x3427a0,_0x4a6437,_0x1f15ed,_0x182f03);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xaef)]=function(_0x458e04,_0x2daaa4,_0xb7bbee){const _0x23b616=_0x3df63e;if(!$gameSystem[_0x23b616(0x8e3)]())return;const _0x9a86c3=this['battler']();if(!_0x9a86c3)return;_0x9a86c3['startOpacity'](_0x458e04,_0x2daaa4,_0xb7bbee);},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0xb11)]=function(){const _0xa27ec=_0x3df63e,_0x2c3525=!!this[_0xa27ec(0x3b7)];this[_0xa27ec(0x3b7)]=undefined,_0x2c3525&&(this[_0xa27ec(0xbb2)](),this[_0xa27ec(0x4cf)]());},Game_Battler[_0x3df63e(0x655)]['clearFreezeMotionForWeapons']=function(){const _0x2e3204=_0x3df63e;if(!SceneManager['isSceneBattle']())return;const _0x432eba=this[_0x2e3204(0x669)]();if(!_0x432eba)return;let _0x287b9f=this[_0x2e3204(0x5c6)]()?_0x432eba[_0x2e3204(0xbb3)]:_0x432eba[_0x2e3204(0x431)][_0x2e3204(0xbb3)];_0x287b9f&&(_0x2e3204(0x4e9)!==_0x2e3204(0x4e9)?_0x3c0835[_0x2e3204(0xa69)][_0x2e3204(0x20b)][_0x2e3204(0x5d9)](this,_0x2addfd):_0x287b9f[_0x2e3204(0x265)](0x0));},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x94b)]=function(_0x4a6874,_0x44a096,_0x429ef9){const _0x5a7d34=_0x3df63e;if(this['isEnemy']()&&!this[_0x5a7d34(0x5c5)]())return;let _0x1fae92=0x0,_0x5d1967=0x0;_0x4a6874[_0x5a7d34(0x64e)](/ATTACK[ ](\d+)/i)&&(_0x5d1967=Number(RegExp['$1']),_0x5d1967--);if(this['isActor']()){const _0x2bc826=this['weapons']();_0x1fae92=_0x2bc826[_0x5d1967]?_0x2bc826[_0x5d1967][_0x5a7d34(0x5a5)]:0x0;}else this[_0x5a7d34(0xaad)]()&&(_0x5a7d34(0x79d)!=='OSYLj'?_0x1fae92=this[_0x5a7d34(0x4a3)]()[_0x5a7d34(0x5a5)]||0x0:(_0x3d2dba[_0x5a7d34(0x58a)]=_0x54cbad['_ptbActionCost']||{},_0x5b6c23[_0x5a7d34(0x58a)][_0x5a7d34(0x65b)]=0x0));const _0x22e02a=$dataSystem[_0x5a7d34(0x8ed)][_0x1fae92];if(_0x4a6874[_0x5a7d34(0x64e)](/attack/i)){if(_0x5a7d34(0xa89)!=='gyTnW')_0x4a6874=[_0x5a7d34(0xb45),'swing',_0x5a7d34(0x576)][_0x22e02a[_0x5a7d34(0x3ad)]]||_0x5a7d34(0x628);else{this[_0x5a7d34(0x9cd)]('performSubstitute',_0xc32eea,_0x56448f);if(!_0x5b3d0a[_0x5a7d34(0xa69)][_0x5a7d34(0x5eb)][_0x5a7d34(0x642)][_0x5a7d34(0xb58)])return;const _0x109432=_0x123249[_0x5a7d34(0xae2)](),_0x112040=_0x16d9aa[_0x5a7d34(0x747)]['format'](_0x109432,_0x21938a['name']());this[_0x5a7d34(0x9cd)](_0x5a7d34(0xbbc),_0x112040);}}this[_0x5a7d34(0x3b7)]={'motionType':_0x4a6874,'weaponImageId':_0x44a096?_0x22e02a[_0x5a7d34(0x32f)]:0x0,'pattern':_0x429ef9};},Game_Battler[_0x3df63e(0x655)][_0x3df63e(0x258)]=function(_0x4c64b1){const _0x44f01c=_0x3df63e;if(!_0x4c64b1)return![];return _0x4c64b1[_0x44f01c(0x5b6)]()===this[_0x44f01c(0x5b6)]();},Game_Battler[_0x3df63e(0x655)]['isOpponent']=function(_0x3e6749){const _0x286a23=_0x3df63e;if(!_0x3e6749)return![];return _0x3e6749[_0x286a23(0x40f)]()===this['friendsUnit']();},VisuMZ['BattleCore']['Game_Actor_setup']=Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x265)],Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x265)]=function(_0x3ffe63){const _0x2d284f=_0x3df63e;VisuMZ['BattleCore'][_0x2d284f(0x3aa)]['call'](this,_0x3ffe63),this['initBattlePortrait']();},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x82b)]=function(){const _0x482fea=_0x3df63e;this[_0x482fea(0x422)]='',this[_0x482fea(0x355)]()&&this['actor']()[_0x482fea(0x45f)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x482fea(0x422)]=String(RegExp['$1']));},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x193)]=function(){const _0x2b67df=_0x3df63e;if(this['getBattlePortrait']()!==''){if('xlmAO'===_0x2b67df(0x7f3))return this[_0x2b67df(0x31d)]();else{if(!_0x129109['isSideView']())return;const _0x5b7f32=this[_0x2b67df(0x669)]();if(!_0x5b7f32)return;if(_0x4076ca===_0x5b7f32[_0x2b67df(0x924)])return;let _0xa89573=![];if(this[_0x2b67df(0x5c6)]()){if(_0x2798b2>_0x5b7f32['_baseX'])_0xa89573=!![];if(_0x1dc148<_0x5b7f32['_baseX'])_0xa89573=![];}else{if(this[_0x2b67df(0xaad)]()){if(_0xbe9b26>_0x5b7f32[_0x2b67df(0x924)])_0xa89573=![];if(_0x3aba94<_0x5b7f32[_0x2b67df(0x924)])_0xa89573=!![];}};this['setBattlerFlip'](_0x4dfa14?!_0xa89573:_0xa89573),_0x5b7f32[_0x2b67df(0x194)]();}}else{if(Imported[_0x2b67df(0x306)]&&this[_0x2b67df(0x565)]()!=='')return _0x2b67df(0x6f4)!=='hpMEl'?_0x132bc5[_0x2b67df(0x2a9)]()?_0x50df3d[_0x2b67df(0x8e2)][_0x2b67df(0x449)]['_damageContainer']:this[_0x2b67df(0xb7b)]:this[_0x2b67df(0x565)]();}return'';},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x31d)]=function(){const _0x2ac5be=_0x3df63e;if(this[_0x2ac5be(0x422)]===undefined)this[_0x2ac5be(0x82b)]();return this[_0x2ac5be(0x422)];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x8c1)]=function(_0x59c6d8){const _0x5ed036=_0x3df63e;if(this[_0x5ed036(0x422)]===undefined)this[_0x5ed036(0x82b)]();this[_0x5ed036(0x422)]=_0x59c6d8;if(SceneManager[_0x5ed036(0x2a9)]()&&$gameParty['battleMembers']()[_0x5ed036(0xa22)](this)){const _0x46548a=SceneManager[_0x5ed036(0x8e2)][_0x5ed036(0x802)];if(_0x46548a)_0x46548a[_0x5ed036(0x456)](this);}},Game_Actor[_0x3df63e(0x655)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x495)]=function(){const _0x58ccef=_0x3df63e;if(!this['isConfused']()&&BattleManager[_0x58ccef(0x938)])return!![];return Game_Battler[_0x58ccef(0x655)][_0x58ccef(0x495)][_0x58ccef(0x5d9)](this);},VisuMZ['BattleCore'][_0x3df63e(0x28c)]=Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x273)],Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x273)]=function(){const _0x430324=_0x3df63e;if(BattleManager[_0x430324(0x938)]&&!ConfigManager[_0x430324(0xb64)]){if('HGZMA'==='HGZMA')return this[_0x430324(0x4ee)]();else{const _0x8ec50c=new _0x2d858a();_0x8ec50c['bitmap']=_0x4fe110[_0x430324(0x9d0)](_0x1125ee[_0x430324(0x408)]),_0x8ec50c['x']=_0x105a94['StatusWindowAttachmentBackOffsetX']||0x0,_0x8ec50c['y']=_0x33cfc1[_0x430324(0xb68)]||0x0,this[_0x430324(0x6df)](_0x8ec50c),this[_0x430324(0x630)]=_0x8ec50c;}}else{return VisuMZ[_0x430324(0xa69)]['Game_Actor_makeActionList']['call'](this);;}},Game_Actor['prototype']['makeActionListAutoAttack']=function(){const _0x60b225=_0x3df63e,_0x15f620=[],_0x48d49f=new Game_Action(this);return _0x48d49f[_0x60b225(0x16a)](),_0x15f620[_0x60b225(0x9cd)](_0x48d49f),_0x15f620;},Game_Actor['prototype'][_0x3df63e(0x20c)]=function(){const _0x5bdf47=_0x3df63e;return this[_0x5bdf47(0xbaa)]()[_0x5bdf47(0x45f)][_0x5bdf47(0x64e)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ['BattleCore'][_0x5bdf47(0x5eb)][_0x5bdf47(0x39a)][_0x5bdf47(0xa77)];},Game_Actor['prototype'][_0x3df63e(0x5d2)]=function(){const _0x256d6c=_0x3df63e;if(this[_0x256d6c(0xab0)][_0x256d6c(0x49e)]!==undefined)return this['_cache'][_0x256d6c(0x49e)];return this[_0x256d6c(0x355)]()[_0x256d6c(0x45f)][_0x256d6c(0x64e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x256d6c(0x49e)]=eval(RegExp['$1']),this[_0x256d6c(0xab0)][_0x256d6c(0x228)]=eval(RegExp['$2'])):this['_cache'][_0x256d6c(0x49e)]=Game_Battler[_0x256d6c(0x655)][_0x256d6c(0x5d2)][_0x256d6c(0x5d9)](this),this[_0x256d6c(0xab0)]['svAnchorX'];},Game_Actor['prototype'][_0x3df63e(0x952)]=function(){const _0x4edab5=_0x3df63e;if(this['_cache']['svAnchorY']!==undefined)return this[_0x4edab5(0xab0)][_0x4edab5(0x228)];if(this[_0x4edab5(0x355)]()[_0x4edab5(0x45f)][_0x4edab5(0x64e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))_0x4edab5(0x9e7)!==_0x4edab5(0xa17)?(this['_cache'][_0x4edab5(0x49e)]=eval(RegExp['$1']),this[_0x4edab5(0xab0)]['svAnchorY']=eval(RegExp['$2'])):(_0x3dbc7a[_0x4edab5(0xa69)][_0x4edab5(0x4fb)]['call'](this),this[_0x4edab5(0x77b)](),this[_0x4edab5(0x953)]());else{if(_0x4edab5(0xb8e)===_0x4edab5(0xb8e))this[_0x4edab5(0xab0)][_0x4edab5(0x228)]=Game_Battler[_0x4edab5(0x655)][_0x4edab5(0x952)][_0x4edab5(0x5d9)](this);else{const _0x2be04f=this['_commandNameWindow'],_0x53dc5e=_0x342db6[_0x4edab5(0x932)](),_0x123281=_0x38a5b9['x']+_0x342b68[_0x4edab5(0x49d)](_0x587ba9[_0x4edab5(0x366)]/0x2)+_0x53dc5e;_0x2be04f['x']=_0x2be04f['width']/-0x2+_0x123281,_0x2be04f['y']=_0x59554a[_0x4edab5(0x49d)](_0x599ce6[_0x4edab5(0xb78)]/0x2);}}return this[_0x4edab5(0xab0)][_0x4edab5(0x228)];},Game_Actor['prototype'][_0x3df63e(0xaf7)]=function(){const _0x5c7f9f=_0x3df63e;if(this[_0x5c7f9f(0xab0)][_0x5c7f9f(0x586)]!==undefined)return this['_cache'][_0x5c7f9f(0x586)];if(this[_0x5c7f9f(0x355)]()[_0x5c7f9f(0x45f)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x5c7f9f(0xab0)][_0x5c7f9f(0x586)]=!![];else{if(this[_0x5c7f9f(0x355)]()[_0x5c7f9f(0x45f)][_0x5c7f9f(0x64e)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x5c7f9f(0x2e5)!==_0x5c7f9f(0x2e5)){if(!this[_0x5c7f9f(0x4eb)])return;this[_0x5c7f9f(0x4eb)]['y']=this[_0x5c7f9f(0x560)]-this['y']-0x2;}else this['_cache'][_0x5c7f9f(0x586)]=![];}else this[_0x5c7f9f(0xab0)][_0x5c7f9f(0x586)]=Game_Battler[_0x5c7f9f(0x655)][_0x5c7f9f(0xaf7)][_0x5c7f9f(0x5d9)](this);}return this['_cache'][_0x5c7f9f(0x586)];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x5d4)]=function(){const _0xdf06f7=_0x3df63e;return VisuMZ[_0xdf06f7(0xa69)][_0xdf06f7(0x5eb)][_0xdf06f7(0x4d0)][_0xdf06f7(0xa11)];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x62f)]=function(){const _0x250567=_0x3df63e,_0x2a9447=this[_0x250567(0x234)](),_0x1b3b99=_0x2a9447[0x0]?_0x2a9447[0x0]['wtypeId']:0x0,_0x49540d=$dataSystem[_0x250567(0x8ed)][_0x1b3b99];_0x49540d&&this[_0x250567(0x23b)](_0x49540d[_0x250567(0x32f)]);},Game_Actor[_0x3df63e(0x655)]['performAction']=function(_0x18b22e){const _0x46142b=_0x3df63e;Game_Battler[_0x46142b(0x655)][_0x46142b(0x64f)]['call'](this,_0x18b22e),this['performActionMotions'](_0x18b22e);},Game_Actor['prototype'][_0x3df63e(0x88a)]=function(){const _0x1b7c6b=_0x3df63e,_0x18c97a=this[_0x1b7c6b(0x234)](),_0xbd57b7=_0x18c97a[0x0]?_0x18c97a[0x0][_0x1b7c6b(0x5a5)]:0x0;return $dataSystem['attackMotions'][_0xbd57b7];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x2ae)]=function(_0x2edcdf){const _0x39803a=_0x3df63e;_0x2edcdf=_0x2edcdf||0x1,_0x2edcdf--;const _0x1480f8=this[_0x39803a(0x234)]();return _0x1480f8[_0x2edcdf]?_0x1480f8[_0x2edcdf][_0x39803a(0x7fa)]:0x0;},Game_Actor['prototype'][_0x3df63e(0x7bc)]=function(_0x4a246b){const _0x17a840=_0x3df63e;_0x4a246b=_0x4a246b||0x1,_0x4a246b--;const _0x5e7671=this[_0x17a840(0x234)](),_0x16f1a2=_0x5e7671[_0x4a246b]?_0x5e7671[_0x4a246b]['wtypeId']:0x0;return $dataSystem[_0x17a840(0x8ed)][_0x16f1a2];},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x8b0)]=function(_0x4bbfa5){const _0x2542b4=_0x3df63e;_0x4bbfa5=_0x4bbfa5||0x1,_0x4bbfa5--;const _0x55c365=this['weapons'](),_0x268d1a=_0x55c365[_0x4bbfa5]?_0x55c365[_0x4bbfa5][_0x2542b4(0x5a5)]:0x0,_0x2ff7f4=$dataSystem[_0x2542b4(0x8ed)][_0x268d1a];if(_0x2ff7f4){if(_0x2542b4(0x9e2)===_0x2542b4(0x9e2)){if(_0x2ff7f4[_0x2542b4(0x3ad)]===0x0){if('YBpSh'!==_0x2542b4(0x20e))this['requestMotion'](_0x2542b4(0xb45));else{if(this[_0x2542b4(0x4a7)]())return _0x3ada09;return _0x44816b=this[_0x2542b4(0xac3)](_0x3a3fa1),_0x2b1405=this[_0x2542b4(0x3cc)](_0x179add),_0x4d340f;}}else{if(_0x2ff7f4[_0x2542b4(0x3ad)]===0x1)this[_0x2542b4(0x80b)](_0x2542b4(0x628));else _0x2ff7f4[_0x2542b4(0x3ad)]===0x2&&this[_0x2542b4(0x80b)](_0x2542b4(0x576));}this[_0x2542b4(0x23b)](_0x2ff7f4['weaponImageId']);}else _0x3cb38a=_0x23c734['GroupDigits'](_0xadb3b1);}},Game_Battler[_0x3df63e(0x655)]['setActiveWeaponSlot']=function(_0x5f2bca){this['_activeWeaponSlot']=_0x5f2bca||0x0;},Game_Battler[_0x3df63e(0x655)]['nextActiveWeaponSlot']=function(){const _0x3df8ea=_0x3df63e;this[_0x3df8ea(0xb18)]=this[_0x3df8ea(0xb18)]||0x0,this[_0x3df8ea(0xb18)]++;},Game_Battler['prototype']['clearActiveWeaponSlot']=function(){const _0x3f6b71=_0x3df63e;this[_0x3f6b71(0xb18)]=undefined;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x921)]=Game_Actor[_0x3df63e(0x655)]['equips'],Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x65c)]=function(){const _0x2f2594=_0x3df63e;let _0x176344=VisuMZ['BattleCore'][_0x2f2594(0x921)][_0x2f2594(0x5d9)](this);if(this[_0x2f2594(0x2b6)])return _0x176344;if(this[_0x2f2594(0xb18)]!==undefined){this[_0x2f2594(0x2b6)]=!![];const _0x4295ef=this[_0x2f2594(0x821)]();for(let _0x1bdb76=0x0;_0x1bdb76<_0x4295ef['length'];_0x1bdb76++){_0x4295ef[_0x1bdb76]===0x1&&this[_0x2f2594(0xb18)]!==_0x1bdb76&&(_0x176344[_0x1bdb76]=null);}this[_0x2f2594(0x2b6)]=undefined;}return _0x176344;},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xb75)]=function(_0x18ccb3){const _0x1ebf62=_0x3df63e;if(_0x18ccb3[_0x1ebf62(0x5c6)]()){if(_0x1ebf62(0x48d)!==_0x1ebf62(0x48d)){const _0x37abf2=_0x352335['actor'](),_0x45a94a=_0x37abf2[_0x1ebf62(0x669)]();if(_0x45a94a)_0x45a94a[_0x1ebf62(0x46e)]();const _0x4b0ab4=_0xe33740[_0x1ebf62(0x529)]()[_0x1ebf62(0xaaa)](_0x10e4fc=>_0x10e4fc[_0x1ebf62(0x26e)]()&&_0x10e4fc[_0x1ebf62(0x8aa)]()),_0x8fe116=_0x4b0ab4[_0x1ebf62(0x246)](_0x37abf2),_0x40072a=_0x4b0ab4[_0x8fe116+0x1];_0x4af32d[_0x1ebf62(0x7ce)]=_0x40072a||null;if(_0x40072a)_0x40072a[_0x1ebf62(0x413)](_0x1ebf62(0x854));_0x37abf2['setActionState'](_0x1ebf62(0x2c7)),this[_0x1ebf62(0x2b0)]();}else return _0x18ccb3[_0x1ebf62(0x234)]()['length']||0x1;}else{if(_0x1ebf62(0x795)==='hvbKV')return 0x1;else{const _0x58f492=this[_0x1ebf62(0x3b0)]();this['startWeaponAnimation'](_0x58f492);}}},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xb22)]=function(_0x559b4e,_0x52e435){const _0x4ad3d8=_0x3df63e;_0x559b4e&&_0x559b4e[_0x4ad3d8(0x5c6)]()&&_0x559b4e[_0x4ad3d8(0x348)](_0x52e435),this['callNextMethod']();},Window_BattleLog[_0x3df63e(0x655)]['clearActiveWeaponSet']=function(_0x481424){const _0x5187e4=_0x3df63e;_0x481424&&_0x481424[_0x5187e4(0x5c6)]()&&_0x481424[_0x5187e4(0x7d1)](),this[_0x5187e4(0x72b)]();},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x270)]=function(){const _0x3ccb0b=_0x3df63e;let _0x107e05=_0x3ccb0b(0x270);if(this[_0x3ccb0b(0xb67)](_0x107e05))return this['_cache'][_0x107e05];return this[_0x3ccb0b(0xab0)][_0x107e05]=this['createBattleUIOffsetX'](this['actor']()),this[_0x3ccb0b(0xab0)][_0x107e05];},Game_Actor[_0x3df63e(0x655)]['battleUIOffsetY']=function(){const _0x25dc1a=_0x3df63e;let _0x3e0cb4=_0x25dc1a(0x3da);if(this[_0x25dc1a(0xb67)](_0x3e0cb4))return this[_0x25dc1a(0xab0)][_0x3e0cb4];return this['_cache'][_0x3e0cb4]=this[_0x25dc1a(0x44b)](this[_0x25dc1a(0x355)]()),this[_0x25dc1a(0xab0)][_0x3e0cb4];},VisuMZ[_0x3df63e(0xa69)]['Game_Enemy_setup']=Game_Enemy['prototype'][_0x3df63e(0x265)],Game_Enemy[_0x3df63e(0x655)]['setup']=function(_0x997e08,_0x37a6e1,_0x5d2407){const _0x5d711d=_0x3df63e;_0x997e08=DataManager['swapEnemyIDs'](_0x997e08),VisuMZ['BattleCore'][_0x5d711d(0xbc7)][_0x5d711d(0x5d9)](this,_0x997e08,_0x37a6e1,_0x5d2407),Imported[_0x5d711d(0x44e)]&&(_0x5d711d(0x64b)===_0x5d711d(0x367)?_0x23ecba+=_0x189856:this['initElementStatusCore']()),this['clearBattleCoreData'](),this[_0x5d711d(0xa5d)](),Imported['VisuMZ_1_ElementStatusCore']&&(_0x5d711d(0xa21)===_0x5d711d(0xa21)?this[_0x5d711d(0x7b3)]():(this[_0x5d711d(0x924)]=0x0,this['_baseY']=0x0,this[_0x5d711d(0xb80)]=0x0,this[_0x5d711d(0x8a0)]=0x0,this[_0x5d711d(0x36a)]=0x0,this[_0x5d711d(0x9cc)]=0x0,this[_0x5d711d(0x902)]='Linear',this['_jumpHeight']=0x0,this[_0x5d711d(0x1cc)]=0x0,this['_jumpDuration']=0x0,this[_0x5d711d(0xa60)]=0x0,this[_0x5d711d(0x511)]=0xff,this[_0x5d711d(0x994)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x5d711d(0x7f7)]=_0x5d711d(0x25d),this[_0x5d711d(0x911)]=0x0,this[_0x5d711d(0x4ba)]=0x0,this['_angleDuration']=0x0,this[_0x5d711d(0x2e7)]=0x0,this['_angleEasing']=_0x5d711d(0x25d),this[_0x5d711d(0x85f)]=!![],this[_0x5d711d(0x248)]=0x0,this[_0x5d711d(0x458)]=0x0,this['_targetSkewX']=0x0,this[_0x5d711d(0xa83)]=0x0,this[_0x5d711d(0x223)]=0x0,this[_0x5d711d(0x440)]=0x0,this['_skewEasing']=_0x5d711d(0x25d),this['_growX']=0x1,this[_0x5d711d(0x6fc)]=0x1,this[_0x5d711d(0x52a)]=0x1,this[_0x5d711d(0x575)]=0x1,this[_0x5d711d(0x7c1)]=0x0,this[_0x5d711d(0x843)]=0x0,this[_0x5d711d(0x9b0)]=_0x5d711d(0x25d),this[_0x5d711d(0x208)]=0x1));},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x5f7)]=function(){const _0x293f17=_0x3df63e,_0x253b59=VisuMZ[_0x293f17(0xa69)][_0x293f17(0x5eb)][_0x293f17(0x580)];this[_0x293f17(0x6ec)]=_0x253b59[_0x293f17(0x386)],this[_0x293f17(0x204)]={};},Game_Enemy[_0x3df63e(0x655)]['setupBattleCoreData']=function(){const _0x26022a=_0x3df63e,_0x2f6fe1=VisuMZ[_0x26022a(0xa69)][_0x26022a(0x5eb)][_0x26022a(0x580)],_0x56d621=this['enemy']()[_0x26022a(0x45f)];this['_svBattlerData']={'name':'','wtypeId':_0x2f6fe1[_0x26022a(0x40b)],'collapse':_0x2f6fe1[_0x26022a(0x991)],'motionIdle':_0x2f6fe1[_0x26022a(0x864)],'width':_0x2f6fe1['Width']||0x40,'height':_0x2f6fe1[_0x26022a(0x71a)]||0x40,'anchorX':_0x2f6fe1[_0x26022a(0xace)]||0x0,'anchorY':_0x2f6fe1['AnchorY']||0x0,'shadow':_0x2f6fe1[_0x26022a(0x347)]};_0x56d621[_0x26022a(0x64e)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x26022a(0x6ec)]=Number(RegExp['$1']));const _0x5474e6=this[_0x26022a(0x204)];if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW BATTLER: (.*)>/i))'treAI'!==_0x26022a(0xb28)?_0xece89c[_0x26022a(0x1ec)]?_0x281b55[_0x26022a(0x256)]([this],_0x1070cd):_0x15a94d[_0x26022a(0x827)]([this],_0x449c02):_0x5474e6[_0x26022a(0xae2)]=String(RegExp['$1']);else{if(_0x56d621['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3e7b54=String(RegExp['$1'])[_0x26022a(0xaa8)](/[\r\n]+/)[_0x26022a(0x44f)]('');_0x5474e6[_0x26022a(0xae2)]=DataManager[_0x26022a(0xa27)](_0x3e7b54);}}_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x5474e6['anchorX']=eval(RegExp['$1']),_0x5474e6[_0x26022a(0x2f5)]=eval(RegExp['$2']));if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW COLLAPSE>/i))_0x5474e6[_0x26022a(0x948)]=!![];else _0x56d621[_0x26022a(0x64e)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x5474e6[_0x26022a(0x948)]=![]);if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x26022a(0x74f)!==_0x26022a(0x618))_0x5474e6['shadow']=!![];else{if(!_0x163fe3['visualHpGauge'])return;if(this[_0x26022a(0x1da)]===_0x19fedf)return;const _0x48a573=_0x41c91c[_0x26022a(0xa69)][_0x26022a(0x5eb)][_0x26022a(0x9c4)],_0x278b95=new _0x13ad4b();_0x278b95[_0x26022a(0x1dd)]['x']=_0x48a573[_0x26022a(0xace)],_0x278b95['anchor']['y']=_0x48a573[_0x26022a(0x735)],_0x278b95[_0x26022a(0x5c3)]['x']=_0x278b95[_0x26022a(0x5c3)]['y']=_0x48a573[_0x26022a(0x56c)],this[_0x26022a(0x889)]=_0x278b95,this[_0x26022a(0x699)](this[_0x26022a(0x889)]);}}else _0x56d621[_0x26022a(0x64e)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x26022a(0x8f1)!=='evSBn'?_0x5cb9f5[_0x26022a(0x45f)]+=_0x26022a(0xa8b):_0x5474e6[_0x26022a(0x385)]=![]);if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x5474e6[_0x26022a(0x5bc)]=String(RegExp['$1'])[_0x26022a(0x782)]()[_0x26022a(0x9d2)]();else{if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xd9689b=String(RegExp['$1'])[_0x26022a(0xaa8)](/[\r\n]+/)[_0x26022a(0x44f)]('');_0x5474e6[_0x26022a(0x5bc)]=DataManager[_0x26022a(0xa27)](_0xd9689b);}}_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x5474e6[_0x26022a(0x366)]=Number(RegExp['$1']),_0x5474e6[_0x26022a(0xb78)]=Number(RegExp['$2']));if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW WEAPON: (.*)>/i))_0x5474e6['wtypeId']=DataManager[_0x26022a(0x97f)](RegExp['$1']);else{if(_0x56d621[_0x26022a(0x64e)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x26022a(0x4e0)===_0x26022a(0x4e0)){const _0x5b520f=String(RegExp['$1'])[_0x26022a(0xaa8)](/[\r\n]+/)[_0x26022a(0x44f)](''),_0x4d7857=DataManager[_0x26022a(0xa27)](_0x5b520f);_0x5474e6[_0x26022a(0x5a5)]=DataManager[_0x26022a(0x97f)](_0x4d7857);}else{this['width']=_0x556b0c[_0x26022a(0x366)],this[_0x26022a(0xb78)]=_0x352d82['height'];const _0xbfeec4=_0x371bfd[_0x26022a(0x7a7)](0x1,this['width']/this['bitmap']['width']),_0x3bfda3=_0x23e10c[_0x26022a(0x7a7)](0x1,this['height']/this[_0x26022a(0xa39)][_0x26022a(0xb78)]),_0x14477f=_0x3574f2['max'](_0xbfeec4,_0x3bfda3);this['scale']['x']=_0x14477f,this[_0x26022a(0x5c3)]['y']=_0x14477f,this['x']=(_0x5b040a[_0x26022a(0x366)]-this[_0x26022a(0x366)])/0x2,this['y']=_0x5ccb62['height']-this[_0x26022a(0xb78)];}}}if(Imported[_0x26022a(0x44e)]){if(_0x26022a(0x161)==='wbVhk')_0x2543b4--;else{const _0xc26598=this[_0x26022a(0x510)]();for(const _0x5656dc of _0xc26598){if(_0x26022a(0x6f8)==='JzqdM'){const _0x37be5e=this[_0x26022a(0x9fa)](_0x5656dc)[_0x26022a(0x579)][_0x26022a(0x17c)]()[_0x26022a(0x9d2)](),_0x26477c=_0x5656dc['toUpperCase']()[_0x26022a(0x9d2)]();if(_0x56d621[_0x26022a(0x64e)](VisuMZ[_0x26022a(0x1b5)][_0x26022a(0x45a)][_0x26022a(0x6db)[_0x26022a(0x4f8)](_0x26477c,_0x37be5e)]))_0x5474e6[_0x26022a(0xae2)]=String(RegExp['$1']);else{if(_0x56d621[_0x26022a(0x64e)](VisuMZ[_0x26022a(0x1b5)][_0x26022a(0x45a)][_0x26022a(0x22f)[_0x26022a(0x4f8)](_0x26477c,_0x37be5e)])){if('PrPGD'==='PrPGD'){const _0x491767=String(RegExp['$1'])[_0x26022a(0xaa8)](/[\r\n]+/)[_0x26022a(0x44f)]('');_0x5474e6['name']=DataManager[_0x26022a(0xa27)](_0x491767);}else _0x3f04b6=_0x39b330['GroupDigits'](_0xa057ef);}}if(_0x56d621[_0x26022a(0x64e)](VisuMZ['ElementStatusCore'][_0x26022a(0x45a)][_0x26022a(0x9f5)['format'](_0x26477c,_0x37be5e)]))'pxrlz'===_0x26022a(0x1d4)?_0x5474e6['wtypeId']=DataManager[_0x26022a(0x97f)](RegExp['$1']):_0x2efdfc['clearActiveWeaponSlot']();else{if(_0x56d621[_0x26022a(0x64e)](VisuMZ[_0x26022a(0x1b5)][_0x26022a(0x45a)][_0x26022a(0x709)[_0x26022a(0x4f8)](_0x26477c,_0x37be5e)])){const _0x5b3c62=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x26022a(0x44f)](''),_0x12a2be=DataManager['processRandomizedData'](_0x5b3c62);_0x5474e6[_0x26022a(0x5a5)]=DataManager['getWtypeIdWithName'](_0x12a2be);}}if(_0x56d621[_0x26022a(0x64e)](VisuMZ[_0x26022a(0x1b5)]['RegExp'][_0x26022a(0x2b3)['format'](_0x26477c,_0x37be5e)]))_0x5474e6[_0x26022a(0x5bc)]=String(RegExp['$1'])[_0x26022a(0x782)]()[_0x26022a(0x9d2)]();else{if(_0x56d621[_0x26022a(0x64e)](VisuMZ[_0x26022a(0x1b5)][_0x26022a(0x45a)][_0x26022a(0x964)['format'](_0x26477c,_0x37be5e)])){const _0x42f34d=String(RegExp['$1'])[_0x26022a(0xaa8)](/[\r\n]+/)[_0x26022a(0x44f)]('');_0x5474e6[_0x26022a(0x5bc)]=DataManager[_0x26022a(0xa27)](_0x42f34d);}}}else _0x512bc2='right';}}}},Game_Enemy['prototype'][_0x3df63e(0xa93)]=function(){const _0x1207c7=_0x3df63e;return this[_0x1207c7(0x6ec)]||0x0;},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x451)]=function(){const _0x3ed66f=_0x3df63e;return this[_0x3ed66f(0xa93)]();},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x2ae)]=function(_0x325d8d){const _0x4fb0c6=_0x3df63e;return this[_0x4fb0c6(0xa93)]();},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x2f4)]=function(){const _0x387ea4=_0x3df63e;if(this[_0x387ea4(0x7d7)]()[_0x387ea4(0x45f)][_0x387ea4(0x64e)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x387ea4(0x2f4)][_0x387ea4(0x5d9)](this);},Game_Enemy[_0x3df63e(0x655)]['isBattlerGrounded']=function(){const _0x5288f6=_0x3df63e;if(this[_0x5288f6(0x7d7)]()[_0x5288f6(0x45f)][_0x5288f6(0x64e)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0xb89)]=function(){const _0xcc5714=_0x3df63e,_0x138fd0=[];for(const _0x53532b of this[_0xcc5714(0x7d7)]()[_0xcc5714(0x656)]){const _0x168861=$dataSkills[_0x53532b[_0xcc5714(0x631)]];if(_0x168861&&!_0x138fd0[_0xcc5714(0xa22)](_0x168861))_0x138fd0['push'](_0x168861);}return _0x138fd0;},Game_Enemy['prototype'][_0x3df63e(0x270)]=function(){const _0x5d0128=_0x3df63e;let _0x1d3048='battleUIOffsetX';if(this[_0x5d0128(0xb67)](_0x1d3048))return this[_0x5d0128(0xab0)][_0x1d3048];return this[_0x5d0128(0xab0)][_0x1d3048]=this['createBattleUIOffsetX'](this['enemy']()),this[_0x5d0128(0xab0)][_0x1d3048];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x3da)]=function(){const _0x2af570=_0x3df63e;let _0x188ed6=_0x2af570(0x3da);if(this[_0x2af570(0xb67)](_0x188ed6))return this[_0x2af570(0xab0)][_0x188ed6];return this[_0x2af570(0xab0)][_0x188ed6]=this[_0x2af570(0x44b)](this[_0x2af570(0x7d7)]()),this['_cache'][_0x188ed6];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x4a3)]=function(){const _0x592df3=_0x3df63e;if(this[_0x592df3(0x204)]!==undefined)return this[_0x592df3(0x204)];return this[_0x592df3(0xa5d)](),this['_svBattlerData'];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x5c5)]=function(){const _0xbcdac9=_0x3df63e;return this[_0xbcdac9(0x4a3)]()['name']!=='';},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x99b)]=function(){const _0x1e5a26=_0x3df63e;return this[_0x1e5a26(0x4a3)]()['name'];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x5d4)]=function(){const _0x3268e4=_0x3df63e;if(this[_0x3268e4(0x5c5)]())return VisuMZ[_0x3268e4(0xa69)][_0x3268e4(0x5eb)][_0x3268e4(0x4d0)][_0x3268e4(0xa11)];else{if(_0x3268e4(0x18e)===_0x3268e4(0x18e))return VisuMZ[_0x3268e4(0xa69)][_0x3268e4(0x5eb)][_0x3268e4(0x580)][_0x3268e4(0xa11)];else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}},Game_Enemy['prototype']['performAction']=function(_0x4b7175){const _0x30ea51=_0x3df63e;Game_Battler[_0x30ea51(0x655)][_0x30ea51(0x64f)][_0x30ea51(0x5d9)](this,_0x4b7175);if(this[_0x30ea51(0x5c5)]())this[_0x30ea51(0xafd)](_0x4b7175);},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0xb49)]=function(){const _0x5e54f6=_0x3df63e,_0x34ce0b=this[_0x5e54f6(0x4a3)]()['wtypeId']||0x0,_0x24dbcb=$dataSystem[_0x5e54f6(0x8ed)][_0x34ce0b];if(_0x24dbcb){if(_0x5e54f6(0x5db)===_0x5e54f6(0x5db)){if(_0x24dbcb[_0x5e54f6(0x3ad)]===0x0)this['requestMotion'](_0x5e54f6(0xb45));else{if(_0x24dbcb[_0x5e54f6(0x3ad)]===0x1)this['requestMotion']('swing');else{if(_0x24dbcb[_0x5e54f6(0x3ad)]===0x2){if('seEcc'!==_0x5e54f6(0x8b1)){const _0x295276=this[_0x5e54f6(0x581)];_0x295276['setHandler'](_0x5e54f6(0xada),this['actorCommandEscape'][_0x5e54f6(0x96b)](this)),_0x295276[_0x5e54f6(0x734)](_0x5e54f6(0xafe),this['actorCommandAutoBattle'][_0x5e54f6(0x96b)](this)),_0x295276[_0x5e54f6(0x734)](_0x5e54f6(0x3d0),this['actorCommandSingleSkill'][_0x5e54f6(0x96b)](this)),_0x5e7232['isTpb']()&&(this['isPartyCommandWindowDisabled']()?delete _0x295276[_0x5e54f6(0x168)][_0x5e54f6(0x794)]:_0x295276[_0x5e54f6(0x734)](_0x5e54f6(0x794),this[_0x5e54f6(0x6c2)]['bind'](this)));}else this[_0x5e54f6(0x80b)](_0x5e54f6(0x576));}}}}else _0x3b3cd2[_0x5e54f6(0x1ca)]['x']=(_0x320acd['skew']['x']*(_0x5c6992-0x1)+this[_0x5e54f6(0xa2a)])/_0x2b2f41,_0x2f769b['skew']['y']=(_0x42d439['skew']['y']*(_0x43a9b0-0x1)+this[_0x5e54f6(0xa83)])/_0x34569a;}},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x62f)]=function(){const _0x2dd645=_0x3df63e,_0x3fe2bc=this[_0x2dd645(0x4a3)]()[_0x2dd645(0x5a5)]||0x0,_0xc10187=$dataSystem[_0x2dd645(0x8ed)][_0x3fe2bc];_0xc10187&&this[_0x2dd645(0x23b)](_0xc10187['weaponImageId']);},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x88a)]=function(){const _0x23b337=_0x3df63e,_0x5938af=this[_0x23b337(0x4a3)]()[_0x23b337(0x5a5)]||0x0;return $dataSystem['attackMotions'][_0x5938af];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x7bc)]=function(_0xe50be0){return this['getAttackMotion']();},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x5e8)]=function(){const _0x579009=_0x3df63e;Game_Battler['prototype'][_0x579009(0x5e8)][_0x579009(0x5d9)](this),this[_0x579009(0xb5c)]()&&this[_0x579009(0x5c5)]()&&(_0x579009(0xb85)===_0x579009(0xb85)?this[_0x579009(0x80b)](_0x579009(0x9e0)):(_0x2b1734[_0x579009(0x366)]=_0x2de0cd(_0x543487['$1']),_0x4fe2c3[_0x579009(0xb78)]=_0x5e9403(_0x485049['$2']))),SoundManager[_0x579009(0x4bd)]();},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x3d3)]=function(){const _0x4030fc=_0x3df63e;Game_Battler['prototype']['performEvasion'][_0x4030fc(0x5d9)](this),this['requestMotion'](_0x4030fc(0xb5e));},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x2f2)]=function(){const _0x1187f6=_0x3df63e;Game_Battler[_0x1187f6(0x655)][_0x1187f6(0x2f2)]['call'](this),this[_0x1187f6(0x80b)]('evade');},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x3b2)]=function(){const _0x1aaf41=_0x3df63e;Game_Battler['prototype'][_0x1aaf41(0x3b2)][_0x1aaf41(0x5d9)](this),this['performAttack']();},Game_Enemy['prototype']['allowCollapse']=function(){const _0x57767a=_0x3df63e;if(this[_0x57767a(0x5c5)]()){if(this[_0x57767a(0xa8a)]()>=0x1)return!![];return this[_0x57767a(0x4a3)]()[_0x57767a(0x948)];}else{if('aKjuJ'!==_0x57767a(0x9bc)){if(!_0x56e3b6[_0x57767a(0xa69)][_0x57767a(0x5eb)][_0x57767a(0x642)][_0x57767a(0x437)])return;_0x2651cc[_0x57767a(0xa69)][_0x57767a(0x519)]['call'](this,_0x1f37d1);}else return!![];}},Game_Enemy['prototype']['svBattlerAnchorX']=function(){const _0x3c6c6e=_0x3df63e;return this['svBattlerData']()[_0x3c6c6e(0xa88)];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x952)]=function(){const _0x2c4ef6=_0x3df63e;return this[_0x2c4ef6(0x4a3)]()[_0x2c4ef6(0x2f5)];},Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0xaf7)]=function(){const _0x3332af=_0x3df63e;return this[_0x3332af(0x4a3)]()['shadow'];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5c9)]=Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x760)],Game_Enemy[_0x3df63e(0x655)][_0x3df63e(0x760)]=function(_0x2feaf7){const _0x57cf6b=_0x3df63e;VisuMZ['BattleCore']['Game_Enemy_transform'][_0x57cf6b(0x5d9)](this,_0x2feaf7),this[_0x57cf6b(0x5f7)](),this[_0x57cf6b(0xa5d)]();const _0xa8462=this[_0x57cf6b(0x669)]();if(_0xa8462)_0xa8462[_0x57cf6b(0x36c)](this);},Game_Unit['prototype'][_0x3df63e(0xaba)]=function(_0x2fabf6){const _0x9f086b=_0x3df63e;for(const _0x34b880 of this['members']()){if(_0x9f086b(0x8de)===_0x9f086b(0x8de)){if(_0x34b880)_0x34b880[_0x9f086b(0xaba)](_0x2fabf6);}else this[_0x9f086b(0x4c9)]();}},Game_Unit[_0x3df63e(0x655)][_0x3df63e(0x32b)]=function(){const _0x17d5bd=_0x3df63e,_0x4d12d0=this['aliveMembers']();return _0x4d12d0[Math[_0x17d5bd(0xa4d)](_0x4d12d0[_0x17d5bd(0xb02)])];},VisuMZ['BattleCore'][_0x3df63e(0x38d)]=Game_Party[_0x3df63e(0x655)][_0x3df63e(0x9ec)],Game_Party[_0x3df63e(0x655)][_0x3df63e(0x9ec)]=function(_0x5c1183){const _0x3649ac=_0x3df63e;VisuMZ[_0x3649ac(0xa69)][_0x3649ac(0x38d)][_0x3649ac(0x5d9)](this,_0x5c1183),BattleManager[_0x3649ac(0x329)]();},VisuMZ['BattleCore'][_0x3df63e(0x597)]=Game_Party['prototype'][_0x3df63e(0x34f)],Game_Party[_0x3df63e(0x655)][_0x3df63e(0x34f)]=function(_0x2a86b9){const _0x2d60f6=_0x3df63e;VisuMZ[_0x2d60f6(0xa69)][_0x2d60f6(0x597)][_0x2d60f6(0x5d9)](this,_0x2a86b9),BattleManager[_0x2d60f6(0x329)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x69b)]=Game_Troop[_0x3df63e(0x655)][_0x3df63e(0x265)],Game_Troop['prototype'][_0x3df63e(0x265)]=function(_0x271528){const _0x4abb45=_0x3df63e;$gameTemp[_0x4abb45(0xb35)](),$gameTemp[_0x4abb45(0x198)](_0x271528),VisuMZ[_0x4abb45(0xa69)][_0x4abb45(0x69b)][_0x4abb45(0x5d9)](this,_0x271528);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x748)]=Game_Troop['prototype'][_0x3df63e(0x6d9)],Game_Troop[_0x3df63e(0x655)]['expTotal']=function(){const _0x5b8ab8=_0x3df63e;let _0x206275=VisuMZ[_0x5b8ab8(0xa69)]['Game_Troop_expTotal']['call'](this);return this[_0x5b8ab8(0xa3f)]&&(_0x206275*=this[_0x5b8ab8(0xa3f)]()),Math[_0x5b8ab8(0x3dd)](_0x206275);},Game_Troop[_0x3df63e(0x655)][_0x3df63e(0xa3f)]=function(){return 0x1;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x8ef)]=Game_Map[_0x3df63e(0x655)][_0x3df63e(0x595)],Game_Map[_0x3df63e(0x655)][_0x3df63e(0x595)]=function(){const _0x3453f7=_0x3df63e;VisuMZ[_0x3453f7(0xa69)][_0x3453f7(0x8ef)][_0x3453f7(0x5d9)](this),this[_0x3453f7(0x6fb)]();},Game_Map[_0x3df63e(0x655)]['setupBattlebackBattleCore']=function(){const _0x21acb7=_0x3df63e;this[_0x21acb7(0x27e)]={},this[_0x21acb7(0x949)]={};if(!$dataMap)return;const _0x113bcf=$dataMap[_0x21acb7(0x45f)];if(!_0x113bcf)return;const _0x469705=_0x113bcf['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x469705){if(_0x21acb7(0xa07)!=='zBjdj'){if(this['item']()[_0x21acb7(0x45f)][_0x21acb7(0x64e)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5a2e53=_0x3ae971(_0x5e1bf9['$1'])[_0x21acb7(0x17c)]()[_0x21acb7(0x9d2)]();return _0x5a2e53;}return _0x21acb7(0xbb0);}else for(const _0x1661b1 of _0x469705){if(_0x21acb7(0x43c)!==_0x21acb7(0x927)){_0x1661b1[_0x21acb7(0x64e)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x262495=Number(RegExp['$1']),_0x93ead9=Number(RegExp['$2']),_0x4ce5d8=_0x93ead9===0x1?this[_0x21acb7(0x27e)]:this['_regionBattleback2'],_0x143052=String(RegExp['$3']);_0x4ce5d8[_0x262495]=_0x143052;}else{const _0x3e34c9='actor%1-portrait'['format'](_0x1a27c6[_0x21acb7(0x45e)]()),_0x5303de=this['createInnerPortrait'](_0x3e34c9,_0x9f1118),_0x22daa9=_0x263703[_0x21acb7(0x193)]();_0x22daa9!==''?_0x5303de['bitmap']=_0x231ef1[_0x21acb7(0x5e5)](_0x22daa9):_0x5303de['bitmap']=_0x296ca6['_emptyBitmap'];const _0x1de050=this[_0x21acb7(0x6cd)](_0x1e6512);_0x5303de['anchor']['x']=0.5,_0x5303de[_0x21acb7(0x1dd)]['y']=0x1;let _0x453462=_0x5a259e[_0x21acb7(0x76b)](_0x1de050['x']+_0x1de050[_0x21acb7(0x366)]/0x2)+this['padding'];_0x453462+=_0x13159['getBattlePortraitOffsetX']();let _0x15b56b=_0x5d7632[_0x21acb7(0x76b)](this[_0x21acb7(0xb78)]);_0x15b56b+=_0x2f0273[_0x21acb7(0x6ff)](),_0x5303de[_0x21acb7(0xabe)](_0x453462,_0x15b56b);const _0xc75553=_0x436654[_0x21acb7(0xa69)]['Settings'][_0x21acb7(0x742)][_0x21acb7(0xb10)];_0x5303de['scale']['x']=_0xc75553,_0x5303de[_0x21acb7(0x5c3)]['y']=_0xc75553,_0x5303de['show']();}}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5e0)]=Game_Map[_0x3df63e(0x655)][_0x3df63e(0x890)],Game_Map['prototype'][_0x3df63e(0x890)]=function(){const _0x319cf4=_0x3df63e;if(!BattleManager[_0x319cf4(0x421)]()){if('sSEsl'===_0x319cf4(0xaf5)){const _0x2fe1df=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x319cf4(0x27e)]&&this[_0x319cf4(0x27e)][_0x2fe1df])return this['_regionBattleback1'][_0x2fe1df];}else _0x1b6f6e[_0x319cf4(0x2f3)]([_0x49fe05]);}return VisuMZ[_0x319cf4(0xa69)][_0x319cf4(0x5e0)][_0x319cf4(0x5d9)](this);},VisuMZ['BattleCore']['Game_Map_battleback2Name']=Game_Map[_0x3df63e(0x655)][_0x3df63e(0x95e)],Game_Map[_0x3df63e(0x655)][_0x3df63e(0x95e)]=function(){const _0x43f638=_0x3df63e;if(!BattleManager['isBattleTest']()){const _0xdaadac=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x43f638(0x949)][_0xdaadac]){if(_0x43f638(0x64a)===_0x43f638(0x64a))return this[_0x43f638(0x949)][_0xdaadac];else this[_0x43f638(0x620)]&&this[_0x43f638(0x620)][_0x43f638(0x722)](_0x2829b4);}}return VisuMZ['BattleCore']['Game_Map_battleback2Name'][_0x43f638(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x27f)]=Game_Map[_0x3df63e(0x655)][_0x3df63e(0x395)],Game_Map[_0x3df63e(0x655)][_0x3df63e(0x395)]=function(){const _0x2ac094=_0x3df63e;let _0x15fe78=JsonEx[_0x2ac094(0x480)](VisuMZ['BattleCore'][_0x2ac094(0x27f)][_0x2ac094(0x5d9)](this));return VisuMZ[_0x2ac094(0xa69)][_0x2ac094(0x7b4)](_0x15fe78);},VisuMZ['BattleCore'][_0x3df63e(0x7b4)]=function(_0x596411){const _0x4d87e7=_0x3df63e;var _0x525e1d,_0xa6eb63,_0x11d212;for(_0x11d212=_0x596411[_0x4d87e7(0xb02)]-0x1;_0x11d212>0x0;_0x11d212--){_0x525e1d=Math['floor'](Math['random']()*(_0x11d212+0x1)),_0xa6eb63=_0x596411[_0x11d212],_0x596411[_0x11d212]=_0x596411[_0x525e1d],_0x596411[_0x525e1d]=_0xa6eb63;}return _0x596411;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x816)]=Game_Interpreter['prototype'][_0x3df63e(0x3ca)],Game_Interpreter['prototype'][_0x3df63e(0x3ca)]=function(_0x4fa85e){const _0x109d18=_0x3df63e;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore'][_0x109d18(0x816)][_0x109d18(0x5d9)](this,_0x4fa85e);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x969)]=Game_Interpreter['prototype'][_0x3df63e(0x93c)],Game_Interpreter['prototype'][_0x3df63e(0x93c)]=function(){const _0x10e7d2=_0x3df63e;if(SceneManager[_0x10e7d2(0x2a9)]())switch(this[_0x10e7d2(0x85d)]){case'battleAngle':if(Imported[_0x10e7d2(0x808)]){if($gameScreen[_0x10e7d2(0x2e1)]()[_0x10e7d2(0x183)]>0x0)return!![];this[_0x10e7d2(0x85d)]='';}break;case'battleAnimation':if(BattleManager[_0x10e7d2(0x449)][_0x10e7d2(0x544)]())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0x189):if(Imported[_0x10e7d2(0x808)]){if(_0x10e7d2(0xa73)!==_0x10e7d2(0x4ca)){if($gameScreen[_0x10e7d2(0x2e1)]()[_0x10e7d2(0x6f6)]>0x0)return!![];if($gameScreen[_0x10e7d2(0x2e1)]()[_0x10e7d2(0xb1d)]>0x0)return!![];this[_0x10e7d2(0x85d)]='';}else{const _0x29009f=_0x1dc8df[_0x6d9fb];if(!_0x29009f)return'';let _0x317b73='';_0x317b73+=_0x29009f[_0x10e7d2(0xae2)];for(const _0x217f53 of _0x29009f[_0x10e7d2(0x9a3)]){for(const _0x50fefb of _0x217f53[_0x10e7d2(0x672)]){[0x6c,0x198]['includes'](_0x50fefb[_0x10e7d2(0xb96)])&&(_0x317b73+='\x0a',_0x317b73+=_0x50fefb[_0x10e7d2(0x547)][0x0]);}}return _0x317b73;}}break;case'battleEffect':if(BattleManager[_0x10e7d2(0x449)]['isEffecting']())return!![];this[_0x10e7d2(0x85d)]='';break;case'battleFloat':if(BattleManager['_spriteset'][_0x10e7d2(0xb2c)]())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0x8a7):if(BattleManager['_spriteset']['isAnyoneJumping']())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0x379):if(BattleManager[_0x10e7d2(0x3fa)]['isBusy']())return!![];this[_0x10e7d2(0x85d)]='';break;case'battleMove':if(BattleManager[_0x10e7d2(0x449)][_0x10e7d2(0x24d)]())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0x1c0):if(BattleManager[_0x10e7d2(0x449)][_0x10e7d2(0x2da)]())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0x1a9):if(BattleManager[_0x10e7d2(0x449)]['isAnyoneGrowing']())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0xb15):if(BattleManager[_0x10e7d2(0x449)][_0x10e7d2(0xa9e)]())return!![];this[_0x10e7d2(0x85d)]='';break;case'battleProjectiles':if(Imported[_0x10e7d2(0x305)]){if(_0x10e7d2(0x695)!==_0x10e7d2(0x695)){return;this[_0x10e7d2(0x370)]&&(this['_effectsContainer']['x']=this['x'],this[_0x10e7d2(0x370)]['y']=this['y']),this[_0x10e7d2(0x8ad)]&&(this[_0x10e7d2(0x8ad)]['x']=this['x'],this[_0x10e7d2(0x8ad)]['y']=this['y']);}else{if(BattleManager[_0x10e7d2(0x449)]['isAnyProjectilePresent']())return!![];this['_waitMode']='';}}break;case _0x10e7d2(0x564):if(Imported[_0x10e7d2(0x808)]){if('OzOFK'!=='OzOFK'){const _0x419191=this[_0x10e7d2(0xbae)],_0x42cdba=this[_0x10e7d2(0x8fd)];_0x419191&&_0x419191!==this[_0x10e7d2(0x81f)]&&_0x419191[_0x10e7d2(0x473)]()===_0x42cdba&&_0x419191['actionBattleCoreJS'](_0x10e7d2(0x267)),_0x3b8656[_0x10e7d2(0xa69)][_0x10e7d2(0x848)][_0x10e7d2(0x5d9)](this),_0x419191&&_0x419191!==this[_0x10e7d2(0x81f)]&&_0x419191[_0x10e7d2(0x473)]()===_0x42cdba&&_0x419191[_0x10e7d2(0x31a)](_0x10e7d2(0x609)),this[_0x10e7d2(0x42d)](this['allBattleMembers']()),this['_lastAction']=this['_action'];}else{if($gameScreen[_0x10e7d2(0x2e1)]()[_0x10e7d2(0x800)]>0x0)return!![];this[_0x10e7d2(0x85d)]='';}}break;case _0x10e7d2(0x551):if(BattleManager['_spriteset'][_0x10e7d2(0x6aa)]())return!![];this[_0x10e7d2(0x85d)]='';break;case _0x10e7d2(0xafb):if(Imported['VisuMZ_3_ActSeqCamera']){if('nbiRo'!==_0x10e7d2(0x1d6)){if($gameScreen[_0x10e7d2(0x2e1)]()[_0x10e7d2(0x63f)]>0x0)return!![];this['_waitMode']='';}else return this[_0x10e7d2(0x4a3)]()[_0x10e7d2(0x2f5)];}break;}return VisuMZ[_0x10e7d2(0xa69)]['Game_Interpreter_updateWaitMode'][_0x10e7d2(0x5d9)](this);},VisuMZ['BattleCore'][_0x3df63e(0x6ca)]=Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x619)],Game_Interpreter[_0x3df63e(0x655)]['command301']=function(_0x3375b0){const _0x47c105=_0x3df63e;if(!$gameParty[_0x47c105(0x8bf)]()){if(_0x47c105(0x6ef)===_0x47c105(0x6ef))return this['command301_PreBattleEvent'](_0x3375b0);else _0xd5260c['addBuff'](_0x2afc22,_0x2a5f53);}else{if(_0x47c105(0x550)!==_0x47c105(0x474))return VisuMZ[_0x47c105(0xa69)][_0x47c105(0x6ca)][_0x47c105(0x5d9)](this,_0x3375b0);else this[_0x47c105(0xab8)]=!![],_0x599ce7[_0x47c105(0x26d)](_0x399361[_0x47c105(0xb2d)]),_0x417521[_0x47c105(0x1f8)](),_0x8a0adb[_0x47c105(0x1f9)][_0x47c105(0x79c)]=!![];}},Game_Interpreter[_0x3df63e(0x655)]['command3011']=function(_0x50197f){const _0x4186cc=_0x3df63e;return VisuMZ['BattleCore'][_0x4186cc(0x6ca)][_0x4186cc(0x5d9)](this,_0x50197f),BattleManager[_0x4186cc(0x80f)](_0x46cba9=>{const _0x1d735e=_0x4186cc;this[_0x1d735e(0x1c2)][this['_indent']]=_0x46cba9;}),!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x35d)]=function(_0x2f2f0a){const _0x35d0bc=_0x3df63e,_0x230f43=$dataCommonEvents[_0x2f2f0a];if(!_0x230f43)return![];if(_0x230f43[_0x35d0bc(0x672)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x3df63e(0x655)]['command301_PreBattleEvent']=function(_0x46c206){const _0x736b62=_0x3df63e,_0x3be0ab=VisuMZ['BattleCore'][_0x736b62(0x5eb)][_0x736b62(0x688)],_0x12c789=_0x3be0ab[_0x736b62(0xb2d)],_0x367e22=$dataCommonEvents[_0x12c789];if(_0x367e22&&VisuMZ[_0x736b62(0xa69)]['CheckMapBattleEventValid'](_0x12c789)){const _0xc9b61c=this['isOnCurrentMap']()?this[_0x736b62(0xbba)]:0x0,_0x3fc923=_0x367e22[_0x736b62(0x672)];this[_0x736b62(0x41a)](_0x3fc923,_0xc9b61c),this[_0x736b62(0x89b)]=JsonEx['makeDeepCopy'](this[_0x736b62(0x89b)]);const _0x35e5d1={'code':0xbc3,'indent':this[_0x736b62(0x5e7)],'parameters':JsonEx[_0x736b62(0x480)](_0x46c206)};return this['_list'][_0x736b62(0x404)](this[_0x736b62(0x1ea)]+0x1,0x0,_0x35e5d1),!![];}else{if(_0x736b62(0x770)!==_0x736b62(0x770)){if(!_0x16a8b0[_0x736b62(0x8e3)]())return;const _0x195c86=this['battler']();if(!_0x195c86)return;_0x195c86[_0x736b62(0x4db)](_0x1bc3ce,_0x5ef30c,_0x3c2891);}else return VisuMZ[_0x736b62(0xa69)]['Game_Interpreter_command301']['call'](this,_0x46c206);}},VisuMZ['BattleCore'][_0x3df63e(0x186)]=BattleManager[_0x3df63e(0x990)],BattleManager[_0x3df63e(0x990)]=function(){const _0xde6442=_0x3df63e;VisuMZ[_0xde6442(0xa69)][_0xde6442(0x186)]['call'](this),this['onEncounterBattleCore']();},BattleManager['onEncounterBattleCore']=function(){const _0x37bb52=_0x3df63e,_0xa3cb97=VisuMZ[_0x37bb52(0xa69)][_0x37bb52(0x5eb)][_0x37bb52(0x688)],_0x4f70c7=_0xa3cb97['BattleStartEvent'];_0x4f70c7&&VisuMZ[_0x37bb52(0xa69)][_0x37bb52(0x35d)](_0x4f70c7)&&(this[_0x37bb52(0xab8)]=!![],$gameTemp['reserveCommonEvent'](_0xa3cb97[_0x37bb52(0xb2d)]),$gameMap['updateInterpreter'](),$gameMap[_0x37bb52(0x1f9)][_0x37bb52(0x79c)]=!![]);if(_0xa3cb97[_0x37bb52(0x2be)]>0x0){if(_0x37bb52(0xbc0)!==_0x37bb52(0xbc0)){if(!_0x22524e['isSideView']())return;const _0x1b6e52=this[_0x37bb52(0x669)](),_0x393e21=_0x24f8b6[_0x37bb52(0x669)]();if(!_0x1b6e52||!_0x393e21)return;const _0x52b177=_0x393e21['_baseX'],_0x3dc0ac=_0x393e21[_0x37bb52(0x560)];this['moveBattlerToPoint'](_0x52b177,_0x3dc0ac,0x0,![],_0x37bb52(0x25d),-0x1),_0x1b6e52[_0x37bb52(0x3f3)]();const _0x18c4a9=_0x2eabd7[_0x37bb52(0xa69)][_0x37bb52(0x5eb)][_0x37bb52(0x862)];let _0x191a10=(_0x393e21[_0x37bb52(0x366)]+_0x1b6e52['width'])/0x2;_0x191a10*=this['isActor']()?0x1:-0x1;let _0x4bb442=_0x18c4a9[_0x37bb52(0x80c)]*(this[_0x37bb52(0x5c6)]()?0x1:-0x1);_0x12c3a5[_0x37bb52(0x61a)](_0x191a10,_0x4bb442,0x0,![],_0x37bb52(0x25d)),_0x393e21[_0x37bb52(0x3f3)]();}else this['_canLose']=!![];}},VisuMZ['BattleCore']['Scene_Map_updateCallMenu']=Scene_Map[_0x3df63e(0x655)][_0x3df63e(0xa70)],Scene_Map[_0x3df63e(0x655)][_0x3df63e(0xa70)]=function(){const _0x1161f4=_0x3df63e;if(BattleManager[_0x1161f4(0xab8)])return;VisuMZ[_0x1161f4(0xa69)][_0x1161f4(0xa05)][_0x1161f4(0x5d9)](this);},VisuMZ['BattleCore']['Scene_Map_launchBattle']=Scene_Map[_0x3df63e(0x655)][_0x3df63e(0x942)],Scene_Map[_0x3df63e(0x655)][_0x3df63e(0x942)]=function(){const _0x40c45e=_0x3df63e;BattleManager[_0x40c45e(0xab8)]?this[_0x40c45e(0x299)]():VisuMZ[_0x40c45e(0xa69)][_0x40c45e(0x4c7)]['call'](this);},Scene_Map[_0x3df63e(0x655)]['battleCorePreBattleCommonEvent']=function(){const _0x29569e=_0x3df63e;this[_0x29569e(0x818)]=!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4e7)]=SceneManager[_0x3df63e(0x5a2)],SceneManager[_0x3df63e(0x5a2)]=function(){const _0x4bc1f3=_0x3df63e;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x4bc1f3(0xa69)][_0x4bc1f3(0x4e7)][_0x4bc1f3(0x5d9)](this);},VisuMZ['BattleCore'][_0x3df63e(0x863)]=Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x3b6)],Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x3b6)]=function(){const _0x57a279=_0x3df63e;VisuMZ[_0x57a279(0xa69)][_0x57a279(0x863)][_0x57a279(0x5d9)](this);if(this[_0x57a279(0x79c)]){if(_0x57a279(0x6ea)===_0x57a279(0x806)){if(!_0x1ab2f2[_0x57a279(0x2a9)]())return;const _0x3afc39=_0x71469e['_logWindow'];_0x3afc39[_0x57a279(0xba8)]();}else this[_0x57a279(0x79c)]=undefined,SceneManager[_0x57a279(0x8e2)]['battleCoreResumeLaunchBattle']();}},Scene_Map['prototype'][_0x3df63e(0x954)]=function(){const _0x194861=_0x3df63e;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x194861(0x9b4)]=!![],this[_0x194861(0x4f9)]();},VisuMZ['BattleCore'][_0x3df63e(0x7e0)]=Scene_Map[_0x3df63e(0x655)][_0x3df63e(0xb26)],Scene_Map['prototype']['initialize']=function(){const _0x58f6f5=_0x3df63e;VisuMZ[_0x58f6f5(0xa69)][_0x58f6f5(0x7e0)][_0x58f6f5(0x5d9)](this),BattleManager[_0x58f6f5(0x9b4)]&&(this[_0x58f6f5(0x818)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x3df63e(0xa69)]['Scene_Map_initialize']=Scene_Map['prototype'][_0x3df63e(0xb26)],Scene_Map[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(){const _0x518f94=_0x3df63e;VisuMZ[_0x518f94(0xa69)]['Scene_Map_initialize'][_0x518f94(0x5d9)](this),$gameTemp[_0x518f94(0xb35)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x450)]=Scene_ItemBase[_0x3df63e(0x655)][_0x3df63e(0x4fd)],Scene_ItemBase[_0x3df63e(0x655)][_0x3df63e(0x4fd)]=function(){const _0xcf0a3d=_0x3df63e;VisuMZ[_0xcf0a3d(0xa69)][_0xcf0a3d(0x450)][_0xcf0a3d(0x5d9)](this),this[_0xcf0a3d(0x918)]()[_0xcf0a3d(0x45f)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xcf0a3d(0x6a9)!==_0xcf0a3d(0x6a9)?_0x5d9f1f[_0xcf0a3d(0xa69)]['Scene_Battle_stop'][_0xcf0a3d(0x5d9)](this):$gameTemp[_0xcf0a3d(0x500)]=[]),DataManager[_0xcf0a3d(0x836)](this['item']())&&('REyQT'===_0xcf0a3d(0x2e0)?$gameTemp[_0xcf0a3d(0x500)]=[]:this[_0xcf0a3d(0x7a6)]=0x0);},VisuMZ['BattleCore'][_0x3df63e(0x35e)]=Scene_Options[_0x3df63e(0x655)][_0x3df63e(0x888)],Scene_Options[_0x3df63e(0x655)][_0x3df63e(0x888)]=function(){const _0x3ff5b9=_0x3df63e;let _0x10c1b2=VisuMZ['BattleCore'][_0x3ff5b9(0x35e)][_0x3ff5b9(0x5d9)](this);const _0x2321a1=VisuMZ['BattleCore']['Settings'];if(_0x2321a1[_0x3ff5b9(0xb3c)]['AddOption']&&_0x2321a1[_0x3ff5b9(0xb3c)][_0x3ff5b9(0x4e5)])_0x10c1b2+=0x2;if(_0x2321a1[_0x3ff5b9(0x9c4)][_0x3ff5b9(0x504)]&&_0x2321a1[_0x3ff5b9(0x9c4)][_0x3ff5b9(0x4e5)])_0x10c1b2+=0x1;return _0x10c1b2;},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_start']=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x9fe)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x9fe)]=function(){const _0x5d43bc=_0x3df63e;SceneManager[_0x5d43bc(0x489)]()?_0x5d43bc(0x7d3)!==_0x5d43bc(0x7d3)?(_0x21a20b['BattleCore'][_0x5d43bc(0x180)]['call'](this),this[_0x5d43bc(0x331)]&&(this[_0x5d43bc(0x62d)](),this[_0x5d43bc(0x354)]())):(Scene_Message[_0x5d43bc(0x655)]['start'][_0x5d43bc(0x5d9)](this),this['_spriteset']&&this[_0x5d43bc(0x449)][_0x5d43bc(0x54e)](),BattleManager[_0x5d43bc(0x606)]&&BattleManager[_0x5d43bc(0x441)]()):_0x5d43bc(0x210)!==_0x5d43bc(0x210)?_0x5ea0e0[_0x5d43bc(0xa69)][_0x5d43bc(0x47c)][_0x5d43bc(0x5d9)](this):VisuMZ[_0x5d43bc(0xa69)][_0x5d43bc(0x205)][_0x5d43bc(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_stop']=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x4f9)],Scene_Battle['prototype'][_0x3df63e(0x4f9)]=function(){const _0x11fdb7=_0x3df63e;SceneManager[_0x11fdb7(0x31e)]()?'EIzNS'==='HQJph'?(_0x35f399[_0x11fdb7(0x51e)]=!![],this[_0x11fdb7(0x332)](_0x1fc9d2)):Scene_Message['prototype'][_0x11fdb7(0x4f9)][_0x11fdb7(0x5d9)](this):_0x11fdb7(0x8e7)==='kyrhn'?VisuMZ[_0x11fdb7(0xa69)]['Scene_Battle_stop'][_0x11fdb7(0x5d9)](this):_0x40adba=(_0x179462+_0x31a68a)/0x2;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xa4c)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x3b6)],Scene_Battle[_0x3df63e(0x655)]['terminate']=function(){const _0x23b1b1=_0x3df63e;SceneManager[_0x23b1b1(0x31e)]()?_0x23b1b1(0x86f)!=='NnLOs'?Scene_Message[_0x23b1b1(0x655)][_0x23b1b1(0x3b6)][_0x23b1b1(0x5d9)](this):(_0x2951de[_0x23b1b1(0xa69)][_0x23b1b1(0x880)]['call'](this,_0xc7a6a8),this[_0x23b1b1(0x533)](),this[_0x23b1b1(0x3fc)]()):VisuMZ[_0x23b1b1(0xa69)][_0x23b1b1(0xa4c)][_0x23b1b1(0x5d9)](this);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x9ae)]=function(){const _0x48d4dc=_0x3df63e;if(ConfigManager[_0x48d4dc(0x548)]&&ConfigManager[_0x48d4dc(0x91d)]!==undefined)return ConfigManager[_0x48d4dc(0x91d)];else{if(this[_0x48d4dc(0xb6b)]()===_0x48d4dc(0x84a)){if('qyakA'===_0x48d4dc(0xaee)){const _0x34884d='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x48d4dc(0x4f8)](_0x23ccd0);_0x86214a[_0x48d4dc(0xa69)]['JS'][_0x288d67]=new _0x454356(_0x34884d);}else return![];}else{if(_0x48d4dc(0x5fd)!=='xEBBT'){return Scene_Message[_0x48d4dc(0x655)][_0x48d4dc(0x9ae)][_0x48d4dc(0x5d9)](this);;}else _0x519875['prototype'][_0x48d4dc(0x6e2)][_0x48d4dc(0x5d9)](this),this[_0x48d4dc(0x442)]();}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4d4)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x6ba)],Scene_Battle['prototype'][_0x3df63e(0x6ba)]=function(){const _0x2c13d1=_0x3df63e;this[_0x2c13d1(0x7c2)](),VisuMZ[_0x2c13d1(0xa69)][_0x2c13d1(0x4d4)][_0x2c13d1(0x5d9)](this),this['createAutoBattleWindow']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x1e8)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x2c1)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x2c1)]=function(){const _0x208a52=_0x3df63e;VisuMZ['BattleCore'][_0x208a52(0x1e8)][_0x208a52(0x5d9)](this),this['battleLayoutStyle']()===_0x208a52(0x84a)&&(_0x208a52(0xb61)!==_0x208a52(0xb61)?this[_0x208a52(0x916)]():this[_0x208a52(0xa8d)]());},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x45c)]=function(_0x3845a2){const _0x845eb3=_0x3df63e;if(_0x3845a2)this[_0x845eb3(0x998)]['x']=(Graphics[_0x845eb3(0x366)]-Graphics[_0x845eb3(0x8b9)])/0x2,this[_0x845eb3(0x998)]['y']=(Graphics[_0x845eb3(0xb78)]-Graphics['boxHeight'])/0x2;else{if('iPWtf'===_0x845eb3(0x8ce)){const _0x54a56b=this[_0x845eb3(0x470)](_0x14bd2f),_0x3d4a6e=new(_0x54a56b?_0x406352:_0x1daaf1)(),_0x4afef6=this[_0x845eb3(0xb4e)](_0x41b8cf);this[_0x845eb3(0x521)](_0x4004cb[0x0])&&(_0x76241e=!_0xad7845),_0x3d4a6e[_0x845eb3(0x7b8)]=_0x22f975,_0x3d4a6e[_0x845eb3(0x265)](_0x4afef6,_0x48675c,_0x1aeb20,_0x261fdd),this[_0x845eb3(0x8f5)](_0x3d4a6e);}else this['_windowLayer']['x']=Graphics[_0x845eb3(0x366)]*0xa,this[_0x845eb3(0x998)]['y']=Graphics['height']*0xa;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xac5)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x259)],Scene_Battle[_0x3df63e(0x655)]['selectNextCommand']=function(){const _0x6bfd7=_0x3df63e,_0xd80431=BattleManager['actor']();VisuMZ[_0x6bfd7(0xa69)]['Scene_Battle_selectNextCommand'][_0x6bfd7(0x5d9)](this);if(_0xd80431){if(_0xd80431===BattleManager['actor']())return;if(_0xd80431===BattleManager['_subject'])return;if(_0xd80431['battler']())_0xd80431[_0x6bfd7(0x669)]()[_0x6bfd7(0x46e)]();}},VisuMZ['BattleCore'][_0x3df63e(0x9ba)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x45d)],Scene_Battle['prototype'][_0x3df63e(0x45d)]=function(){const _0x555bbc=_0x3df63e,_0x52a42e=BattleManager[_0x555bbc(0x355)]();if(_0x52a42e&&_0x52a42e[_0x555bbc(0x669)])_0x52a42e[_0x555bbc(0x669)]()[_0x555bbc(0x46e)]();VisuMZ['BattleCore'][_0x555bbc(0x9ba)]['call'](this);},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x3df63e(0x655)]['logWindowRect'],Scene_Battle['prototype'][_0x3df63e(0xb3a)]=function(){const _0x199603=_0x3df63e;if(VisuMZ['BattleCore'][_0x199603(0x5eb)][_0x199603(0x642)][_0x199603(0x978)])return VisuMZ[_0x199603(0xa69)][_0x199603(0x5eb)][_0x199603(0x642)]['BattleLogRectJS'][_0x199603(0x5d9)](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect'][_0x199603(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x343)],Scene_Battle['prototype'][_0x3df63e(0x343)]=function(){const _0x138906=_0x3df63e;VisuMZ[_0x138906(0xa69)][_0x138906(0x465)][_0x138906(0x5d9)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0xa5c)]=function(){const _0x496235=_0x3df63e,_0x23e3b8=this['_partyCommandWindow'];_0x23e3b8[_0x496235(0x734)](_0x496235(0xafe),this[_0x496235(0x674)][_0x496235(0x96b)](this)),_0x23e3b8[_0x496235(0x734)](_0x496235(0x505),this[_0x496235(0x757)][_0x496235(0x96b)](this));const _0x1ab15d=this[_0x496235(0xb6b)]();switch(_0x1ab15d){case'xp':case _0x496235(0xbc2):return this[_0x496235(0x9b6)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x674)]=function(){const _0xa57650=_0x3df63e;BattleManager['_autoBattle']=!![],$gameParty[_0xa57650(0x6e8)](),this[_0xa57650(0x259)](),BattleManager['isTpb']()&&(BattleManager[_0xa57650(0x187)]=![]);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x757)]=function(){const _0x2e8a36=_0x3df63e;if(this[_0x2e8a36(0x7f9)]()){if(_0x2e8a36(0x60b)!==_0x2e8a36(0xa7f))this[_0x2e8a36(0x931)]=!![],this[_0x2e8a36(0x3fa)][_0x2e8a36(0x9cd)](_0x2e8a36(0xbbc),VisuMZ[_0x2e8a36(0xa69)][_0x2e8a36(0x5eb)][_0x2e8a36(0x5d0)][_0x2e8a36(0x1bc)]);else return this[_0x2e8a36(0x879)]()['some'](_0x21decd=>_0x21decd[_0x2e8a36(0x663)]());}else{if('HLiqs'===_0x2e8a36(0x460))this[_0x2e8a36(0x48a)]();else return![];}},Scene_Battle['prototype'][_0x3df63e(0x7f9)]=function(){const _0xf1ae35=_0x3df63e;return BattleManager[_0xf1ae35(0xb71)]();},Scene_Battle['prototype'][_0x3df63e(0x48a)]=function(){const _0x4a640d=_0x3df63e;this[_0x4a640d(0x931)]=![],this[_0x4a640d(0x449)][_0x4a640d(0x54e)](),this[_0x4a640d(0x998)][_0x4a640d(0x7ad)]=![];if(BattleManager[_0x4a640d(0x421)]()){if(_0x4a640d(0x179)!==_0x4a640d(0x209))($dataSystem[_0x4a640d(0x890)]||$dataSystem[_0x4a640d(0x95e)])&&(_0x4a640d(0x73e)===_0x4a640d(0x73e)?SceneManager[_0x4a640d(0x729)]():this[_0x4a640d(0x9ca)]()?this[_0x4a640d(0x63e)]():this['processActorCommandCancelTPB']());else{if(!_0x3f6a72['isSideView']())return;const _0x3debfc=this[_0x4a640d(0x669)]();if(!_0x3debfc)return;_0x3debfc[_0x4a640d(0x7c4)](_0x4bdb94,_0x56db17,_0x2b6060);}}else($gameMap[_0x4a640d(0x890)]()||$gameMap[_0x4a640d(0x95e)]())&&(_0x4a640d(0x96a)!==_0x4a640d(0x93f)?SceneManager[_0x4a640d(0x729)]():(_0x58613d[_0x4a640d(0xab8)]=_0x4bd181,_0x5cc884[_0x4a640d(0x9b4)]=!![],this[_0x4a640d(0x4f9)]()));SceneManager['push'](Scene_Options),BattleManager[_0x4a640d(0x9a8)]()&&(BattleManager[_0x4a640d(0x606)]=BattleManager['actor']());},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x2d8)]=Scene_Battle[_0x3df63e(0x655)]['updateBattleProcess'],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x1f1)]=function(){const _0x56b1a9=_0x3df63e;VisuMZ[_0x56b1a9(0xa69)][_0x56b1a9(0x2d8)]['call'](this);if(this['_callSceneOptions']&&!BattleManager[_0x56b1a9(0x8fd)])this[_0x56b1a9(0x48a)]();},Scene_Battle['prototype'][_0x3df63e(0x2d2)]=function(){const _0xc76d83=_0x3df63e,_0x3ca101=this[_0xc76d83(0x815)]();this[_0xc76d83(0x17b)]=new Window_AutoBattleCancel(_0x3ca101),this[_0xc76d83(0x17b)][_0xc76d83(0x2ea)](),this[_0xc76d83(0x699)](this['_autoBattleWindow']);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x815)]=function(){const _0x2bf029=_0x3df63e;return VisuMZ[_0x2bf029(0xa69)][_0x2bf029(0x5eb)]['AutoBattle']['AutoBattleRect'][_0x2bf029(0x5d9)](this);},Scene_Battle['prototype']['isPartyCommandWindowDisabled']=function(){const _0xbf0f6a=_0x3df63e;return VisuMZ['BattleCore'][_0xbf0f6a(0x5eb)]['PartyCmd'][_0xbf0f6a(0xb24)];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x47c)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x537)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x537)]=function(){const _0x413df8=_0x3df63e;this['isPartyCommandWindowDisabled']()?_0x413df8(0x4b4)===_0x413df8(0x4b4)?this[_0x413df8(0x833)]():(_0x3cc0f1=_0xe0f0c9(_0x40daa['$1']),_0x590df4--):'iPGtg'!=='iPGtg'?this[_0x413df8(0x939)]=_0x413df8(0x834):VisuMZ[_0x413df8(0xa69)][_0x413df8(0x47c)][_0x413df8(0x5d9)](this);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x833)]=function(){const _0x33e096=_0x3df63e;if(BattleManager[_0x33e096(0x344)]()){if(_0x33e096(0x654)===_0x33e096(0x654))this[_0x33e096(0x259)]();else{this[_0x33e096(0x9c5)][_0x33e096(0x44f)](_0x444b9d);if(_0xc5fcdf===this[_0x33e096(0x8fd)])return;const _0x253a74=_0x4df668['makeDeepCopy'](_0x53b7ba[_0x33e096(0x17e)]());this[_0x33e096(0x1ae)][_0x33e096(0x9cd)]([_0x4f2204,_0x253a74]);}}else{if(BattleManager['isTpb']()){if(_0x33e096(0x44d)==='mwgzR')VisuMZ['BattleCore'][_0x33e096(0x47c)][_0x33e096(0x5d9)](this);else{if(!_0x2ac764[_0x33e096(0x2a9)]())return;const _0x22acfc=_0x46b997['getLastPluginCommandInterpreter']();if(!_0x22acfc)return;_0x22acfc[_0x33e096(0x671)](_0x33e096(0x811));}}}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb39)]=Scene_Battle['prototype'][_0x3df63e(0x8ca)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x8ca)]=function(){const _0x4ea6f1=_0x3df63e;if(BattleManager[_0x4ea6f1(0x9a8)]())this[_0x4ea6f1(0x727)](),this[_0x4ea6f1(0xb88)]();else{if(_0x4ea6f1(0x3c7)==='mCrkp')VisuMZ['BattleCore']['Scene_Battle_commandFight'][_0x4ea6f1(0x5d9)](this);else{if(!this['_battler'])return![];return _0xec07d7['BattleCore']['Sprite_Battler_isMoving'][_0x4ea6f1(0x5d9)](this);}}},Scene_Battle[_0x3df63e(0x655)]['tpbCommandFight']=function(){const _0x5cd39a=_0x3df63e;if(!VisuMZ[_0x5cd39a(0xa69)][_0x5cd39a(0x428)])return;if(Imported[_0x5cd39a(0x627)]&&BattleManager['isCTB']())return;const _0x56b2e2=$gameParty['aliveMembers']()['filter'](_0x1cbaf7=>_0x1cbaf7[_0x5cd39a(0x26e)]()&&_0x1cbaf7[_0x5cd39a(0x8aa)]());BattleManager[_0x5cd39a(0x7ce)]=_0x56b2e2[0x0]||null;if(BattleManager[_0x5cd39a(0x7ce)]){if(_0x5cd39a(0x79e)===_0x5cd39a(0x9af)){if(!this[_0x5cd39a(0x8cb)]())return;if(!this[_0x5cd39a(0x720)])return;if(this['_targetSkewX']===_0x481f63&&this[_0x5cd39a(0xa83)]===_0x591eb6)return;this[_0x5cd39a(0xa2a)]=_0x4d1e5d,this[_0x5cd39a(0xa83)]=_0x12ddea,this[_0x5cd39a(0x223)]=_0x3031d2,this[_0x5cd39a(0x440)]=_0x5db89d,this['_skewEasing']=_0x2f8cbf||_0x5cd39a(0x25d),_0x5d3997<=0x0&&(this[_0x5cd39a(0x720)][_0x5cd39a(0x1ca)]['x']=this[_0x5cd39a(0xa2a)],this[_0x5cd39a(0x720)][_0x5cd39a(0x1ca)]['y']=this[_0x5cd39a(0xa83)]);}else BattleManager[_0x5cd39a(0x7ce)][_0x5cd39a(0x413)](_0x5cd39a(0x854));}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x3bf)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x960)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x960)]=function(){const _0x586067=_0x3df63e;VisuMZ[_0x586067(0xa69)][_0x586067(0x3bf)][_0x586067(0x5d9)](this),this[_0x586067(0x25f)]();},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x25f)]=function(){const _0x395ef9=_0x3df63e,_0x1bfb24=this[_0x395ef9(0x581)];_0x1bfb24[_0x395ef9(0x734)]('escape',this[_0x395ef9(0xb7e)][_0x395ef9(0x96b)](this)),_0x1bfb24[_0x395ef9(0x734)]('autoBattle',this['actorCommandAutoBattle'][_0x395ef9(0x96b)](this)),_0x1bfb24[_0x395ef9(0x734)]('singleSkill',this[_0x395ef9(0x554)][_0x395ef9(0x96b)](this));if(BattleManager[_0x395ef9(0x9a8)]()){if('QTrUr'!==_0x395ef9(0x200))return this[_0x395ef9(0x31d)]();else{if(this[_0x395ef9(0x8c5)]())delete _0x1bfb24[_0x395ef9(0x168)][_0x395ef9(0x794)];else{if(_0x395ef9(0x4a1)!==_0x395ef9(0x4a1))return _0x3555b8['BattleCore'][_0x395ef9(0x6ca)][_0x395ef9(0x5d9)](this,_0x46302a);else _0x1bfb24[_0x395ef9(0x734)](_0x395ef9(0x794),this[_0x395ef9(0x6c2)][_0x395ef9(0x96b)](this));}}}},Scene_Battle['prototype'][_0x3df63e(0xb7e)]=function(){const _0x340022=_0x3df63e;this[_0x340022(0x4f0)]();},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x87d)]=function(){const _0x611517=_0x3df63e;BattleManager[_0x611517(0x355)]()[_0x611517(0x7f1)](),BattleManager[_0x611517(0x38e)](),BattleManager[_0x611517(0x6e0)](),this['changeInputWindow']();},Scene_Battle[_0x3df63e(0x655)]['actorCommandSingleSkill']=function(){const _0x3db638=_0x3df63e,_0x32b778=BattleManager[_0x3db638(0x280)]();_0x32b778['setSkill'](this[_0x3db638(0x581)][_0x3db638(0x307)]()),this[_0x3db638(0x38f)]();},Scene_Battle[_0x3df63e(0x655)]['actorCommandCancelTPB']=function(){const _0x168c28=_0x3df63e;if(this[_0x168c28(0x9ca)]()){if('CZrne'===_0x168c28(0x712))this[_0x168c28(0x63e)]();else{if(_0x27300c[_0x168c28(0x957)]&&_0x5ccaae[_0x168c28(0x957)]){if(_0x5c9cac[_0x168c28(0x957)][_0x168c28(0x5c6)]()&&_0x68a3de[_0x168c28(0x957)]['isEnemy']())return 0x1;else{if(_0x254ca0['_battler'][_0x168c28(0x5c6)]()&&_0xddcfbe[_0x168c28(0x957)][_0x168c28(0xaad)]())return-0x1;}}}}else this[_0x168c28(0x55a)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x428)]=![],Scene_Battle[_0x3df63e(0x655)]['tpbActorSwitchConditionsMet']=function(){const _0x71a88e=_0x3df63e;if(Imported[_0x71a88e(0x627)]&&BattleManager[_0x71a88e(0xb4a)]())return![];else{if(_0x71a88e(0xb21)!==_0x71a88e(0xb21))return _0x48f99e[_0x71a88e(0x655)]['isOkEnabled'][_0x71a88e(0x5d9)](this)&&this[_0x71a88e(0x394)]();else{if(!VisuMZ['BattleCore'][_0x71a88e(0x428)])return![];const _0x23de7c=$gameParty[_0x71a88e(0x529)]()[_0x71a88e(0xaaa)](_0x475e78=>_0x475e78[_0x71a88e(0x26e)]()&&_0x475e78['canInput']());return _0x23de7c['length']>0x0&&BattleManager['actor']()!==_0x23de7c[_0x23de7c[_0x71a88e(0xb02)]-0x1];}}},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x63e)]=function(){const _0x5ab596=_0x3df63e,_0x147e12=BattleManager[_0x5ab596(0x355)](),_0x1a88f2=_0x147e12[_0x5ab596(0x669)]();if(_0x1a88f2)_0x1a88f2[_0x5ab596(0x46e)]();const _0x1a5567=$gameParty[_0x5ab596(0x529)]()[_0x5ab596(0xaaa)](_0xc65092=>_0xc65092['isTpbCharged']()&&_0xc65092[_0x5ab596(0x8aa)]()),_0x501eb7=_0x1a5567['indexOf'](_0x147e12),_0xdc0343=_0x1a5567[_0x501eb7+0x1];BattleManager[_0x5ab596(0x7ce)]=_0xdc0343||null;if(_0xdc0343)_0xdc0343[_0x5ab596(0x413)](_0x5ab596(0x854));_0x147e12[_0x5ab596(0x413)]('undecided'),this[_0x5ab596(0x2b0)]();},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x55a)]=function(){const _0x1a23c9=_0x3df63e;this[_0x1a23c9(0x9b6)][_0x1a23c9(0x265)](),this['_actorCommandWindow'][_0x1a23c9(0x689)]();if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported[_0x1a23c9(0x627)]&&BattleManager['isCTB']())return;if(BattleManager[_0x1a23c9(0x7ce)]){if(_0x1a23c9(0x929)!==_0x1a23c9(0x4bb)){BattleManager[_0x1a23c9(0x7ce)][_0x1a23c9(0x413)](_0x1a23c9(0x2c7));const _0x4f10f8=BattleManager[_0x1a23c9(0x7ce)][_0x1a23c9(0x669)]();if(_0x4f10f8)_0x4f10f8[_0x1a23c9(0x46e)]();}else _0x2e8261=_0x18cfaf[_0x1a23c9(0x49d)](_0x4886da[_0x1a23c9(0x9eb)]()*(_0x319a82+0x1)),_0x1e5824=_0x4497c9[_0x4d3dc3],_0x52e501[_0x24b3c2]=_0x1a5c28[_0x5ab2fe],_0x155d83[_0x70b767]=_0x33970e;}BattleManager[_0x1a23c9(0x7ce)]=null;},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x3df63e(0x3c5)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x3c5)]=function(){const _0x6d70f1=_0x3df63e;VisuMZ[_0x6d70f1(0xa69)][_0x6d70f1(0x3e5)][_0x6d70f1(0x5d9)](this),this[_0x6d70f1(0x8a1)]();},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x8a1)]=function(){const _0x16dbab=_0x3df63e;this['_actorCommandWindow'][_0x16dbab(0x513)](this[_0x16dbab(0xa49)]),this['_partyCommandWindow']['setHelpWindow'](this['_helpWindow']);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0xb6b)]=function(){const _0x3a0aa6=_0x3df63e;if($gameTemp[_0x3a0aa6(0x46b)]!==undefined)return $gameTemp[_0x3a0aa6(0x46b)];if(this[_0x3a0aa6(0xb2b)])return this[_0x3a0aa6(0xb2b)];return this[_0x3a0aa6(0xb2b)]=VisuMZ[_0x3a0aa6(0xa69)]['Settings'][_0x3a0aa6(0x742)][_0x3a0aa6(0x9e1)]['toLowerCase']()[_0x3a0aa6(0x9d2)](),this['_battleLayoutStyle']===_0x3a0aa6(0x4a0)&&!Imported[_0x3a0aa6(0x2a8)]&&(this['_battleLayoutStyle']=_0x3a0aa6(0xbb7)),this['_battleLayoutStyle'];},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_windowAreaHeight']=Scene_Battle['prototype']['windowAreaHeight'],Scene_Battle['prototype']['windowAreaHeight']=function(){const _0x4ffb27=_0x3df63e,_0xc2ce23=this['battleLayoutStyle']();switch(_0xc2ce23){case _0x4ffb27(0x672):return this[_0x4ffb27(0x3d7)](Math[_0x4ffb27(0x7a7)](0x1,$gameParty[_0x4ffb27(0x49b)]()),!![]);break;default:return VisuMZ[_0x4ffb27(0xa69)]['Scene_Battle_windowAreaHeight'][_0x4ffb27(0x5d9)](this);break;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x384)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x926)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x926)]=function(){const _0x3c49c7=_0x3df63e,_0x3cc5cb=this['battleLayoutStyle']();switch(_0x3cc5cb){case _0x3c49c7(0x84a):return this[_0x3c49c7(0x9e8)]();break;case'default':case _0x3c49c7(0x672):case'xp':case'portrait':default:return VisuMZ['BattleCore']['Scene_Battle_helpWindowRect'][_0x3c49c7(0x5d9)](this);break;}},Scene_Battle['prototype'][_0x3df63e(0x375)]=function(){const _0x55a3d7=_0x3df63e,_0x26ee12=this[_0x55a3d7(0xb6b)]();switch(_0x26ee12){case'xp':case'portrait':return this['statusWindowRectXPStyle']();break;case'border':return this[_0x55a3d7(0x4b5)]();break;case _0x55a3d7(0xbb7):case'list':default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x8a6)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x3d5)],Scene_Battle['prototype'][_0x3df63e(0x3d5)]=function(){const _0x629cc4=_0x3df63e,_0x27d114=this[_0x629cc4(0xb6b)]();switch(_0x27d114){case'xp':case'portrait':return this[_0x629cc4(0x399)]();break;case _0x629cc4(0x84a):return this[_0x629cc4(0x778)]();case _0x629cc4(0xbb7):case _0x629cc4(0x672):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle['prototype']['partyCommandWindowRectDefaultStyle']=function(){const _0xc3cb3f=_0x3df63e,_0x39482b=VisuMZ[_0xc3cb3f(0xa69)][_0xc3cb3f(0x5eb)][_0xc3cb3f(0x742)],_0x3ab196=_0x39482b[_0xc3cb3f(0x6eb)]||0xc0,_0xae518=this[_0xc3cb3f(0x6da)](),_0x173e82=this[_0xc3cb3f(0x9ae)]()?Graphics[_0xc3cb3f(0x8b9)]-_0x3ab196:0x0,_0x146e57=Graphics['boxHeight']-_0xae518;return new Rectangle(_0x173e82,_0x146e57,_0x3ab196,_0xae518);},Scene_Battle['prototype'][_0x3df63e(0x9dd)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle['prototype'][_0x3df63e(0x23e)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x23e)]=function(){const _0x408cb2=_0x3df63e,_0x5ac262=this['battleLayoutStyle']();switch(_0x5ac262){case'xp':case _0x408cb2(0xbc2):case _0x408cb2(0x84a):break;case _0x408cb2(0xbb7):case _0x408cb2(0x672):default:VisuMZ[_0x408cb2(0xa69)]['Scene_Battle_updateStatusWindowPosition'][_0x408cb2(0x5d9)](this);break;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x6a0)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x6ae)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x6ae)]=function(){const _0x460b47=_0x3df63e;VisuMZ[_0x460b47(0xa69)]['Scene_Battle_startActorSelection'][_0x460b47(0x5d9)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x87c)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x528)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x528)]=function(){const _0x5efe13=_0x3df63e;VisuMZ[_0x5efe13(0xa69)]['Scene_Battle_startEnemySelection'][_0x5efe13(0x5d9)](this),this[_0x5efe13(0x588)][_0x5efe13(0x93a)](),this[_0x5efe13(0x563)]();},Scene_Battle[_0x3df63e(0x655)]['makeTargetSelectionMoreVisible']=function(){const _0x7825d0=_0x3df63e,_0xe0b18d=this[_0x7825d0(0xb6b)]();['xp',_0x7825d0(0xbc2),_0x7825d0(0x84a)]['includes'](_0xe0b18d)&&('eowYj'===_0x7825d0(0x302)?this[_0x7825d0(0x581)][_0x7825d0(0x689)]():this['_cache'][_0x7825d0(0x228)]=_0x541fb7[_0x7825d0(0x655)]['svBattlerAnchorY']['call'](this)),(_0xe0b18d==='border'||this[_0x7825d0(0x651)]())&&(this[_0x7825d0(0x2ce)]['close'](),this[_0x7825d0(0x983)]['close']());},VisuMZ[_0x3df63e(0xa69)]['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x3df63e(0xb42)],Scene_Battle[_0x3df63e(0x655)]['onActorOk']=function(){const _0x2a7efa=_0x3df63e;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x2a7efa(0x5d9)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x3df63e(0x655)]['isNonSubmenuCancel']=function(){const _0x5b8425=_0x3df63e;return[_0x5b8425(0x7fc),_0x5b8425(0x912),_0x5b8425(0x3d0)][_0x5b8425(0xa22)](this['_actorCommandWindow'][_0x5b8425(0xa43)]());},VisuMZ['BattleCore'][_0x3df63e(0xa67)]=Scene_Battle['prototype']['onActorCancel'],Scene_Battle['prototype'][_0x3df63e(0x571)]=function(){const _0x4143f=_0x3df63e;this[_0x4143f(0x4dc)]()?(this['_statusWindow'][_0x4143f(0x1d7)](),this[_0x4143f(0x7a2)][_0x4143f(0x2ea)](),this[_0x4143f(0x581)][_0x4143f(0x4d8)]()):_0x4143f(0x4c1)===_0x4143f(0xbd3)?_0x34af44=_0x23a372(_0x2fb5f4['$1']):VisuMZ['BattleCore'][_0x4143f(0xa67)]['call'](this),this[_0x4143f(0x3ba)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x57a)]=Scene_Battle[_0x3df63e(0x655)]['onEnemyOk'],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x5cf)]=function(){const _0x2d2c04=_0x3df63e;VisuMZ[_0x2d2c04(0xa69)]['Scene_Battle_onEnemyOk'][_0x2d2c04(0x5d9)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x365)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x48e)],Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x48e)]=function(){const _0x25f1df=_0x3df63e;this['isNonSubmenuCancel']()?_0x25f1df(0x298)!==_0x25f1df(0x298)?this[_0x25f1df(0x9cd)](_0x25f1df(0x2ca),_0x4d32c1):(this[_0x25f1df(0x802)][_0x25f1df(0x1d7)](),this[_0x25f1df(0x588)][_0x25f1df(0x2ea)](),this[_0x25f1df(0x581)][_0x25f1df(0x4d8)]()):VisuMZ[_0x25f1df(0xa69)][_0x25f1df(0x365)][_0x25f1df(0x5d9)](this),this[_0x25f1df(0x3ba)]();},Scene_Battle[_0x3df63e(0x655)]['okTargetSelectionVisibility']=function(){const _0x3302b5=_0x3df63e,_0x5ce8be=this[_0x3302b5(0xb6b)]();(_0x5ce8be===_0x3302b5(0x84a)||this[_0x3302b5(0x651)]())&&(this[_0x3302b5(0x2ce)]['open'](),this[_0x3302b5(0x2ce)][_0x3302b5(0xa9c)]&&this['_skillWindow'][_0x3302b5(0x1d7)](),this[_0x3302b5(0x983)][_0x3302b5(0xb51)](),this[_0x3302b5(0x983)][_0x3302b5(0xa9c)]&&(_0x3302b5(0x301)!==_0x3302b5(0x301)?(_0x45010a[_0x3302b5(0xa69)][_0x3302b5(0xb8b)]['call'](this,_0x371fba),this[_0x3302b5(0x7e6)](_0x430f29)):this['_itemWindow'][_0x3302b5(0x1d7)]()));},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x21c7fc=_0x3df63e,_0x403eb5=this[_0x21c7fc(0xb6b)]();['xp','portrait',_0x21c7fc(0x84a)]['includes'](_0x403eb5)&&(_0x21c7fc(0xb0d)!=='SzXea'?this[_0x21c7fc(0x581)][_0x21c7fc(0xb51)]():this[_0x21c7fc(0x3a2)]()),this[_0x21c7fc(0xa72)]();},Scene_Battle[_0x3df63e(0x655)]['statusWindowRectDefaultStyle']=function(){const _0x24b10a=_0x3df63e,_0x331922=VisuMZ[_0x24b10a(0xa69)][_0x24b10a(0x5eb)]['BattleLayout'],_0x2e1a4c=Window_BattleStatus[_0x24b10a(0x655)][_0x24b10a(0x8a2)](),_0x27d048=Graphics['boxWidth']-(_0x331922['CommandWidth']||0xc0),_0x49c427=this[_0x24b10a(0x6da)]()+_0x2e1a4c,_0x2f9902=this[_0x24b10a(0x9ae)]()?0x0:Graphics[_0x24b10a(0x8b9)]-_0x27d048,_0x4da571=Graphics[_0x24b10a(0x3ed)]-_0x49c427+_0x2e1a4c;return new Rectangle(_0x2f9902,_0x4da571,_0x27d048,_0x49c427);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x711)]=function(){const _0x2f671c=_0x3df63e,_0xc8c81=Window_BattleStatus[_0x2f671c(0x655)]['extraHeight'](),_0x505e2e=Graphics[_0x2f671c(0x8b9)],_0x4cb46d=this[_0x2f671c(0x6da)]()+_0xc8c81,_0x2427d0=0x0,_0xe9866f=Graphics[_0x2f671c(0x3ed)]-_0x4cb46d+_0xc8c81;return new Rectangle(_0x2427d0,_0xe9866f,_0x505e2e,_0x4cb46d);},Scene_Battle['prototype'][_0x3df63e(0x399)]=function(){const _0x78f987=_0x3df63e,_0x3979a9=Graphics[_0x78f987(0x8b9)]/0x2,_0x4b5d4f=this[_0x78f987(0x3d7)](VisuMZ[_0x78f987(0xa69)][_0x78f987(0x5eb)][_0x78f987(0x742)][_0x78f987(0x2ec)],!![]),_0x191528=Math[_0x78f987(0x76b)]((Graphics[_0x78f987(0x8b9)]-_0x3979a9)/0x2),_0x4e876a=Graphics[_0x78f987(0x3ed)]-_0x4b5d4f-this[_0x78f987(0x711)]()[_0x78f987(0xb78)];return new Rectangle(_0x191528,_0x4e876a,_0x3979a9,_0x4b5d4f);},Scene_Battle['prototype'][_0x3df63e(0x9e8)]=function(){const _0x55426a=_0x3df63e,_0x6c9f06=Graphics[_0x55426a(0x366)],_0x20a58f=Math[_0x55426a(0x76b)]((Graphics[_0x55426a(0x8b9)]-_0x6c9f06)/0x2),_0x3fa4d8=this[_0x55426a(0x7ef)](),_0x505786=(Graphics[_0x55426a(0xb78)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x20a58f,_0x505786,_0x6c9f06,_0x3fa4d8);},Scene_Battle['prototype'][_0x3df63e(0x4b5)]=function(){const _0x32e5b4=_0x3df63e,_0x53782=Graphics[_0x32e5b4(0x366)],_0x33656e=Math[_0x32e5b4(0x76b)]((Graphics['boxWidth']-_0x53782)/0x2),_0x32dd5c=this[_0x32e5b4(0x3d7)](0x4,!![]),_0x34674f=Graphics[_0x32e5b4(0x3ed)]-_0x32dd5c+(Graphics['height']-Graphics[_0x32e5b4(0x3ed)])/0x2;return new Rectangle(_0x33656e,_0x34674f,_0x53782,_0x32dd5c);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x778)]=function(){const _0x1064d7=_0x3df63e,_0x2174f1=Math[_0x1064d7(0x49d)](Graphics[_0x1064d7(0x366)]/0x3),_0xe22b06=this[_0x1064d7(0x9ae)]()?(Graphics[_0x1064d7(0x366)]+Graphics[_0x1064d7(0x8b9)])/0x2-_0x2174f1:(Graphics[_0x1064d7(0x366)]-Graphics[_0x1064d7(0x8b9)])/-0x2,_0x5a8816=this['helpWindowRectBorderStyle'](),_0x392c96=_0x5a8816['y']+_0x5a8816['height'],_0x97b1c0=this[_0x1064d7(0x4b5)](),_0x41d3ad=_0x97b1c0['y']-_0x392c96;return new Rectangle(_0xe22b06,_0x392c96,_0x2174f1,_0x41d3ad);},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x76f)]=function(){const _0x30a62a=_0x3df63e,_0x22c910=Math[_0x30a62a(0x3dd)](Graphics[_0x30a62a(0x366)]/0x3),_0x2e9cd3=Math[_0x30a62a(0x76b)]((Graphics[_0x30a62a(0x8b9)]-_0x22c910)/0x2),_0x5dcf6d=this[_0x30a62a(0x778)](),_0xa31bd0=_0x5dcf6d['y'],_0x1968f5=_0x5dcf6d[_0x30a62a(0xb78)];return new Rectangle(_0x2e9cd3,_0xa31bd0,_0x22c910,_0x1968f5);},Scene_Battle['prototype'][_0x3df63e(0xa8d)]=function(){const _0xdf7983=_0x3df63e;this[_0xdf7983(0x1c6)]['y']=this[_0xdf7983(0xa49)]['y']+this[_0xdf7983(0xa49)][_0xdf7983(0xb78)];if(this[_0xdf7983(0x9ae)]()){if(this[_0xdf7983(0xb6b)]()===_0xdf7983(0x84a))this[_0xdf7983(0x1c6)]['x']=0x8;else{if(_0xdf7983(0x475)!==_0xdf7983(0x475)){if(_0x4b2360[_0xdf7983(0xa53)](_0x352524))return![];}else this[_0xdf7983(0x1c6)]['x']=-this[_0xdf7983(0x1c6)]['width']-0x4;}}else{if(_0xdf7983(0x607)==='XaGYw'){const _0x39e7b9=this[_0xdf7983(0xb54)]();if(!_0x39e7b9)return null;if(_0x39e7b9['isBattleMember']()&&_0x39e7b9[_0xdf7983(0x8fc)]())return _0x39e7b9;}else this[_0xdf7983(0x1c6)]['x']=Graphics[_0xdf7983(0x366)]-(Graphics[_0xdf7983(0x366)]-Graphics['boxWidth'])/0x2-this['_cancelButton'][_0xdf7983(0x366)]-0x4;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4d6)]=Scene_Battle['prototype'][_0x3df63e(0x823)],Scene_Battle[_0x3df63e(0x655)]['skillWindowRect']=function(){const _0x473fec=_0x3df63e;if(this[_0x473fec(0xb6b)]()===_0x473fec(0x84a))return this[_0x473fec(0x76f)]();else{if(this[_0x473fec(0x651)]()){if(_0x473fec(0x56e)===_0x473fec(0x56e))return this[_0x473fec(0x1a5)]();else{const _0x46606a=this['isAlive'](),_0x111afa=this['stateMotionIndex']();_0x27d791[_0x473fec(0xa69)][_0x473fec(0x3f8)][_0x473fec(0x5d9)](this,_0x575ecf),this['isEnemy']()&&_0x46606a&&this['isDead']()&&(this[_0x473fec(0x8af)]=!this[_0x473fec(0x33a)](),_0x16724b[_0x473fec(0x558)](this[_0x473fec(0x253)]())),_0x5bc3fa['isSceneBattle']()&&_0x111afa!==this[_0x473fec(0x65f)]()&&(this[_0x473fec(0x669)]()&&this[_0x473fec(0x669)]()[_0x473fec(0x35b)]());}}else{if(_0x473fec(0x4de)==='bEohm'){const _0x207dfc=_0x3ec2cc[_0x473fec(0x8e2)][_0x473fec(0x778)]();this[_0x473fec(0xabe)](_0x207dfc['x'],_0x207dfc['y'],_0x207dfc['width'],_0x207dfc[_0x473fec(0xb78)]),this[_0x473fec(0x5ee)](),this['setBackgroundType'](0x0);}else return VisuMZ[_0x473fec(0xa69)]['Scene_Battle_skillWindowRect'][_0x473fec(0x5d9)](this);}}},VisuMZ['BattleCore'][_0x3df63e(0x928)]=Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0xa0a)],Scene_Battle['prototype'][_0x3df63e(0xa0a)]=function(){const _0x2ad6cf=_0x3df63e;if(this[_0x2ad6cf(0xb6b)]()===_0x2ad6cf(0x84a))return this[_0x2ad6cf(0x76f)]();else{if(this[_0x2ad6cf(0x651)]()){if('LwTKF'==='LwTKF')return this[_0x2ad6cf(0x1a5)]();else{const _0x24dba3=this[_0x2ad6cf(0x957)]&&this[_0x2ad6cf(0x957)]['isBattlerFlipped']();this[_0x2ad6cf(0x208)]=(_0x24dba3?-0x1:0x1)*_0x3eff75[_0x2ad6cf(0xb55)](this[_0x2ad6cf(0x5c3)]['x']);}}else return _0x2ad6cf(0x508)!==_0x2ad6cf(0x9e9)?VisuMZ['BattleCore'][_0x2ad6cf(0x928)]['call'](this):_0x5ec16f[_0x2ad6cf(0x8e2)][_0x2ad6cf(0x588)]&&_0x2a9782[_0x2ad6cf(0x8e2)][_0x2ad6cf(0x588)][_0x2ad6cf(0xa9c)]&&_0x592a0a['_scene'][_0x2ad6cf(0x588)][_0x2ad6cf(0x94e)]['includes'](this[_0x2ad6cf(0x957)]);}},Scene_Battle[_0x3df63e(0x655)][_0x3df63e(0x651)]=function(){const _0x5f2c07=_0x3df63e;return VisuMZ[_0x5f2c07(0xa69)][_0x5f2c07(0x5eb)][_0x5f2c07(0x742)]['SkillItemMiddleLayout'];},Scene_Battle[_0x3df63e(0x655)]['skillItemWindowRectMiddle']=function(){const _0x53e2e7=_0x3df63e,_0x226e23=Sprite_Button[_0x53e2e7(0x655)][_0x53e2e7(0xa65)]()*0x2+0x4;let _0x112061=Graphics[_0x53e2e7(0x8b9)]-_0x226e23;if(Imported[_0x53e2e7(0x1ec)]&&SceneManager[_0x53e2e7(0x8db)]()){if('pjwwG'===_0x53e2e7(0x972)){const _0x386dfd=_0xfa6cd0['$1'],_0x45f349=_0x53e2e7(0x97c)[_0x53e2e7(0x4f8)](_0x386dfd),_0x18022e=_0x3936cc['BattleCore'][_0x53e2e7(0x3c1)](_0xe09d72,_0x1fd236);_0xf31a08[_0x53e2e7(0xa69)]['JS'][_0x18022e]=new _0x2e641c(_0x45f349);}else _0x112061+=_0x226e23;}const _0x4bbab0=this[_0x53e2e7(0x745)](),_0x24e272=Graphics[_0x53e2e7(0x3ed)]-_0x4bbab0-this[_0x53e2e7(0x375)]()[_0x53e2e7(0xb78)]+Window_BattleStatus[_0x53e2e7(0x655)]['extraHeight'](),_0x10f592=0x0;return new Rectangle(_0x10f592,_0x4bbab0,_0x112061,_0x24e272);},Scene_Battle['prototype'][_0x3df63e(0x7c2)]=function(){const _0x18dcb0=_0x3df63e;if(!VisuMZ[_0x18dcb0(0xa69)][_0x18dcb0(0x5eb)][_0x18dcb0(0x580)]['NameLegacy'])return;this[_0x18dcb0(0x3e1)]=new Sprite(),this[_0x18dcb0(0x3e1)]['x']=this[_0x18dcb0(0x998)]['x'],this[_0x18dcb0(0x3e1)]['y']=this[_0x18dcb0(0x998)]['y'];const _0x3a3860=this[_0x18dcb0(0x7b9)]['indexOf'](this['_windowLayer']);this[_0x18dcb0(0x95f)](this[_0x18dcb0(0x3e1)],_0x3a3860);for(let _0x33ee97=0x0;_0x33ee97<0x8;_0x33ee97++){const _0x2d2645=new Window_EnemyName(_0x33ee97);this[_0x18dcb0(0x3e1)][_0x18dcb0(0x699)](_0x2d2645);}},Sprite_Battler['_motionSpeed']=VisuMZ['BattleCore'][_0x3df63e(0x5eb)]['Actor']['MotionSpeed'],VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x601)]=Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x9a5)],Sprite_Battler['prototype']['initMembers']=function(){const _0x17f1b3=_0x3df63e;VisuMZ[_0x17f1b3(0xa69)]['Sprite_Battler_initMembers']['call'](this),this['initMembersBattleCore']();if(this[_0x17f1b3(0x1da)]===Sprite_Enemy)this[_0x17f1b3(0x9ce)]();this[_0x17f1b3(0x725)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x845)]=function(){const _0x5f0118=_0x3df63e;this['_baseX']=0x0,this[_0x5f0118(0x560)]=0x0,this[_0x5f0118(0xb80)]=0x0,this[_0x5f0118(0x8a0)]=0x0,this[_0x5f0118(0x36a)]=0x0,this[_0x5f0118(0x9cc)]=0x0,this[_0x5f0118(0x902)]=_0x5f0118(0x25d),this[_0x5f0118(0x20d)]=0x0,this[_0x5f0118(0x1cc)]=0x0,this[_0x5f0118(0x28d)]=0x0,this[_0x5f0118(0xa60)]=0x0,this[_0x5f0118(0x511)]=0xff,this['_opacityDuration']=0x0,this[_0x5f0118(0x5dd)]=0x0,this[_0x5f0118(0x7f7)]=_0x5f0118(0x25d),this[_0x5f0118(0x911)]=0x0,this[_0x5f0118(0x4ba)]=0x0,this[_0x5f0118(0x1b8)]=0x0,this[_0x5f0118(0x2e7)]=0x0,this[_0x5f0118(0x883)]=_0x5f0118(0x25d),this[_0x5f0118(0x85f)]=!![],this[_0x5f0118(0x248)]=0x0,this[_0x5f0118(0x458)]=0x0,this[_0x5f0118(0xa2a)]=0x0,this[_0x5f0118(0xa83)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x5f0118(0xbca)]=_0x5f0118(0x25d),this[_0x5f0118(0xb98)]=0x1,this[_0x5f0118(0x6fc)]=0x1,this[_0x5f0118(0x52a)]=0x1,this[_0x5f0118(0x575)]=0x1,this[_0x5f0118(0x7c1)]=0x0,this[_0x5f0118(0x843)]=0x0,this[_0x5f0118(0x9b0)]=_0x5f0118(0x25d),this[_0x5f0118(0x208)]=0x1;},Sprite_Battler['prototype'][_0x3df63e(0x9ce)]=function(){const _0x4f2101=_0x3df63e;this['_shadowSprite']=new Sprite(),this[_0x4f2101(0x4eb)][_0x4f2101(0xa39)]=ImageManager[_0x4f2101(0x9d0)](_0x4f2101(0x250)),this['_shadowSprite'][_0x4f2101(0xa39)]['smooth']=VisuMZ['BattleCore']['Settings'][_0x4f2101(0x4d0)]['SmoothImage'],this[_0x4f2101(0x4eb)][_0x4f2101(0x1dd)]['x']=0.5,this['_shadowSprite'][_0x4f2101(0x1dd)]['y']=0.5,this[_0x4f2101(0x4eb)]['y']=-0x2,this[_0x4f2101(0x4eb)][_0x4f2101(0x7ad)]=![],this[_0x4f2101(0x699)](this['_shadowSprite']);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x725)]=function(){const _0x2487e2=_0x3df63e;this['_distortionSprite']=new Sprite(),this[_0x2487e2(0x720)][_0x2487e2(0x1dd)]['x']=0.5,this['_distortionSprite'][_0x2487e2(0x1dd)]['y']=0.5,this[_0x2487e2(0x699)](this[_0x2487e2(0x720)]);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x85a)]=function(){const _0x432120=_0x3df63e;if(!this['_distortionSprite'])return;if(this[_0x432120(0x4eb)]){if(_0x432120(0xa1d)==='UyDLN'){const _0x4ead22=this[_0x432120(0x52f)](this[_0x432120(0x720)]);this[_0x432120(0x95f)](this[_0x432120(0x4eb)],_0x4ead22),this[_0x432120(0x4cc)]();}else{if(!this[_0x432120(0x620)])return;if(!this[_0x432120(0x4eb)])return;this[_0x432120(0x4cc)](),this[_0x432120(0x72a)]();}}this['_svBattlerSprite']&&this[_0x432120(0x720)]['addChild'](this[_0x432120(0x431)]),this['_weaponSprite']&&this['_distortionSprite']['addChild'](this['_weaponSprite']),this[_0x432120(0x620)]&&this[_0x432120(0x720)][_0x432120(0x699)](this[_0x432120(0x620)]),this['_dragonbonesSpriteContainer']&&this['_distortionSprite'][_0x432120(0x699)](this['_dragonbonesSpriteContainer']);},Sprite_Battler['prototype'][_0x3df63e(0x4cc)]=function(){const _0x1979a1=_0x3df63e;if(!this['_shadowSprite'])return;if(this[_0x1979a1(0x957)]&&this['_battler'][_0x1979a1(0xaf7)]()){if(_0x1979a1(0x534)===_0x1979a1(0x534)){const _0xfd4e1=this[_0x1979a1(0x4eb)][_0x1979a1(0xa39)];this[_0x1979a1(0x4eb)]['setFrame'](0x0,0x0,_0xfd4e1[_0x1979a1(0x366)],_0xfd4e1[_0x1979a1(0xb78)]);}else this[_0x1979a1(0x3e4)][_0x1979a1(0x5c3)]['x']=0x1/(this[_0x1979a1(0x5c3)]['x']||0.001),this[_0x1979a1(0x3e4)][_0x1979a1(0x5c3)]['y']=0x1/(this[_0x1979a1(0x5c3)]['y']||0.001);}else this[_0x1979a1(0x4eb)][_0x1979a1(0x406)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x2c6)]=function(){const _0x2e9ddd=_0x3df63e;return SceneManager[_0x2e9ddd(0x2a9)]()?SceneManager[_0x2e9ddd(0x8e2)][_0x2e9ddd(0x449)]['_damageContainer']:this['parent'];},Sprite_Battler['prototype']['setupTextPopup']=function(_0x350947,_0x280996){const _0x2d6078=_0x3df63e;if(!this[_0x2d6078(0x957)][_0x2d6078(0xb5c)]())return;const _0x2da71e=VisuMZ[_0x2d6078(0xa69)][_0x2d6078(0x5eb)][_0x2d6078(0x488)],_0x1db480=new Sprite_Damage();_0x1db480['_duration']=_0x2da71e[_0x2d6078(0x7db)],this[_0x2d6078(0xbc5)](_0x1db480),_0x1db480[_0x2d6078(0x868)](_0x350947,_0x280996),this[_0x2d6078(0x826)](_0x1db480);},Sprite_Battler['prototype'][_0x3df63e(0x78f)]=function(_0x3a0809,_0xca8c04,_0x73a7ed){const _0x14914a=_0x3df63e;if(!this['_battler'][_0x14914a(0xb5c)]())return;const _0x1a9a00=VisuMZ[_0x14914a(0xa69)][_0x14914a(0x5eb)][_0x14914a(0x488)],_0x1450c5=new Sprite_Damage();_0x1450c5[_0x14914a(0x5a0)]=_0x1a9a00[_0x14914a(0x7db)],this[_0x14914a(0xbc5)](_0x1450c5),_0x1450c5[_0x14914a(0x78f)](_0x3a0809,_0xca8c04,_0x73a7ed),this[_0x14914a(0x826)](_0x1450c5);},Sprite_Battler['prototype']['setupDamagePopup']=function(){const _0xa9dbcf=_0x3df63e;if(!this[_0xa9dbcf(0x957)][_0xa9dbcf(0x88f)]())return;while(this[_0xa9dbcf(0x957)][_0xa9dbcf(0x88f)]()){_0xa9dbcf(0x84e)===_0xa9dbcf(0x288)?this['battleStatusWindowAnimationContainer']()['removeChild'](_0x427e30):this[_0xa9dbcf(0x957)][_0xa9dbcf(0xb5c)]()&&this['createDamageSprite']();}this['_battler'][_0xa9dbcf(0x167)](),this[_0xa9dbcf(0x957)][_0xa9dbcf(0x7a4)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x2aa)]=function(){const _0x27af9d=_0x3df63e,_0x5c0c61=VisuMZ[_0x27af9d(0xa69)][_0x27af9d(0x5eb)][_0x27af9d(0x488)],_0x1fd25b=new Sprite_Damage();_0x1fd25b[_0x27af9d(0x5a0)]=_0x5c0c61['PopupDuration'],this[_0x27af9d(0xbc5)](_0x1fd25b),_0x1fd25b['setup'](this[_0x27af9d(0x957)]),_0x1fd25b[_0x27af9d(0xb13)](this['_battler']),this[_0x27af9d(0x826)](_0x1fd25b);},Sprite_Battler['prototype'][_0x3df63e(0x826)]=function(_0x1ed0ee){const _0x551afe=_0x3df63e;this['_damages'][_0x551afe(0x9cd)](_0x1ed0ee);if(this[_0x551afe(0x2c0)]())_0x551afe(0x31c)!==_0x551afe(0x657)?SceneManager[_0x551afe(0x8e2)][_0x551afe(0x802)][_0x551afe(0x826)](_0x1ed0ee,this[_0x551afe(0x957)]):this[_0x551afe(0x471)]();else{if(_0x551afe(0x2c2)===_0x551afe(0x2c2)){this['damageContainer']()[_0x551afe(0x699)](_0x1ed0ee);if(SceneManager[_0x551afe(0x6e7)]())_0x1ed0ee[_0x551afe(0x5c3)]['x']=-0x1;}else _0x545b05+='\x0a',_0x1fe66b+=_0xfc27d7['parameters'][0x0];}},Sprite_Battler['prototype'][_0x3df63e(0x2c0)]=function(){const _0x481569=_0x3df63e;return!$gameSystem[_0x481569(0x8e3)]()&&this[_0x481569(0x957)]&&this[_0x481569(0x957)][_0x481569(0x5c6)]();},Sprite_Battler[_0x3df63e(0x655)]['sortDamageSprites']=function(_0x5dce56){const _0x2ee503=_0x3df63e;this[_0x2ee503(0xad3)](_0x5dce56,!![]);const _0x5a6b8d=VisuMZ[_0x2ee503(0xa69)][_0x2ee503(0x5eb)]['Damage'],_0x10acc4=SceneManager[_0x2ee503(0x6e7)]()?-0x1:0x1;if(_0x5a6b8d[_0x2ee503(0x753)])for(const _0x2109eb of this[_0x2ee503(0x691)]){_0x2109eb['x']+=_0x5a6b8d[_0x2ee503(0x310)]*_0x10acc4,_0x2109eb['y']+=_0x5a6b8d['PopupShiftY'];}else{const _0x16735=this[_0x2ee503(0x691)][this[_0x2ee503(0x691)]['length']-0x1];_0x16735&&(_0x5dce56['x']=_0x16735['x']+_0x5a6b8d['PopupShiftX']*_0x10acc4,_0x5dce56['y']=_0x16735['y']+_0x5a6b8d[_0x2ee503(0x790)]);}},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xad3)]=function(_0x3b5647,_0x1c9609){const _0x40b02a=_0x3df63e,_0x281a9d=SceneManager[_0x40b02a(0x6e7)]()?-0x1:0x1;let _0x51825c=this[_0x40b02a(0x924)];_0x51825c+=this[_0x40b02a(0x676)]();let _0x593768=this['_baseY'];const _0x34d76f=this[_0x40b02a(0x720)][_0x40b02a(0x5c3)]['y'];_0x593768+=this[_0x40b02a(0xa5e)]();const _0x2156e0=SceneManager[_0x40b02a(0x8e2)][_0x40b02a(0x802)];if(_0x2156e0&&this[_0x40b02a(0xb7b)]===_0x2156e0){_0x51825c+=_0x2156e0['x']-this[_0x40b02a(0xb1b)]();const _0xdbfa12=_0x2156e0[_0x40b02a(0x9d3)]()*0x3/0x4;_0x593768=_0x2156e0['y']+_0xdbfa12,_0x593768=Math[_0x40b02a(0x46d)](_0x593768,_0x2156e0['y']+this['y']-this[_0x40b02a(0xb78)]+_0xdbfa12);}_0x3b5647['x']=Math[_0x40b02a(0x76b)](_0x51825c+this['damageOffsetX']()*_0x281a9d),_0x3b5647['y']=Math[_0x40b02a(0x76b)](_0x593768+this[_0x40b02a(0x342)]());},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x235)]=Sprite_Battler[_0x3df63e(0x655)]['damageOffsetX'],Sprite_Battler['prototype']['damageOffsetX']=function(){const _0x373e39=_0x3df63e;let _0x35fb1d=VisuMZ[_0x373e39(0xa69)][_0x373e39(0x235)][_0x373e39(0x5d9)](this),_0x4d7e62=VisuMZ[_0x373e39(0xa69)]['Settings'][_0x373e39(0x488)][_0x373e39(0x57b)]||0x0;return Math[_0x373e39(0x76b)](_0x35fb1d+_0x4d7e62);},VisuMZ[_0x3df63e(0xa69)]['Sprite_Battler_damageOffsetY']=Sprite_Battler['prototype'][_0x3df63e(0x342)],Sprite_Battler['prototype'][_0x3df63e(0x342)]=function(){const _0x1b0eca=_0x3df63e;let _0x1c4938=VisuMZ[_0x1b0eca(0xa69)]['Sprite_Battler_damageOffsetY'][_0x1b0eca(0x5d9)](this);switch(VisuMZ['BattleCore'][_0x1b0eca(0x5eb)][_0x1b0eca(0x488)][_0x1b0eca(0x530)]){case _0x1b0eca(0x502):_0x1c4938-=this['height']*this['scale']['y'];break;case'center':_0x1c4938-=this[_0x1b0eca(0xb78)]*this[_0x1b0eca(0x5c3)]['y']*0.5;break;}let _0x4bc6f1=VisuMZ[_0x1b0eca(0xa69)][_0x1b0eca(0x5eb)][_0x1b0eca(0x488)][_0x1b0eca(0x218)]||0x0;return Math['round'](_0x1c4938+_0x4bc6f1);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0xb1b)]=function(){const _0x492b11=_0x3df63e;return Sprite_Battler['prototype'][_0x492b11(0xb1b)]['call'](this);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x342)]=function(){const _0x44edfa=_0x3df63e;return Sprite_Battler[_0x44edfa(0x655)][_0x44edfa(0x342)]['call'](this);},Sprite_Battler['prototype'][_0x3df63e(0x598)]=function(_0x39c03f){const _0x568112=_0x3df63e;if(this['isShownOnBattlePortrait']())SceneManager[_0x568112(0x8e2)][_0x568112(0x802)]['removeDamageSprite'](_0x39c03f);else{if('YVxjM'!==_0x568112(0x32d))return'iconText';else this[_0x568112(0x2c6)]()[_0x568112(0x541)](_0x39c03f),this[_0x568112(0x691)]['remove'](_0x39c03f),_0x39c03f[_0x568112(0x190)]();}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x1ee)]=Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x8d3)],Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x8d3)]=function(_0x533d09,_0x2b8762){const _0x143ac4=_0x3df63e,_0x3f7116=VisuMZ[_0x143ac4(0xa69)]['Settings'];if(this['constructor']===Sprite_Actor)_0x143ac4(0x85b)===_0x143ac4(0x85b)?(_0x533d09+=_0x3f7116[_0x143ac4(0x4d0)]['OffsetX']||0x0,_0x2b8762+=_0x3f7116[_0x143ac4(0x4d0)][_0x143ac4(0x3b3)]||0x0):(this['_cursorArea']=new _0x498d33(),this[_0x143ac4(0xac9)][_0x143ac4(0x933)]=[new _0x3ad9c9['filters'][(_0x143ac4(0x27b))]()],this['_cursorArea']['filterArea']=new _0xb6ef2e(),this[_0x143ac4(0xac9)][_0x143ac4(0xabe)](this['_padding'],this[_0x143ac4(0x6d0)]),this[_0x143ac4(0x699)](this[_0x143ac4(0xac9)]));else this[_0x143ac4(0x1da)]===Sprite_Enemy&&(_0x533d09+=_0x3f7116[_0x143ac4(0x580)][_0x143ac4(0x7e9)]||0x0,_0x2b8762+=_0x3f7116[_0x143ac4(0x580)]['OffsetY']||0x0);VisuMZ[_0x143ac4(0xa69)]['Sprite_Battler_setHome'][_0x143ac4(0x5d9)](this,_0x533d09,_0x2b8762);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xa57)]=Sprite_Battler['prototype']['update'],Sprite_Battler['prototype']['update']=function(){const _0x3c7752=_0x3df63e;VisuMZ[_0x3c7752(0xa69)][_0x3c7752(0xa57)][_0x3c7752(0x5d9)](this),!this[_0x3c7752(0x957)]&&this[_0x3c7752(0x889)]&&(this[_0x3c7752(0x889)][_0x3c7752(0x7ad)]=![]);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x66f)]=Sprite_Battler['prototype'][_0x3df63e(0x82f)],Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x82f)]=function(){const _0xa70e65=_0x3df63e;this[_0xa70e65(0xae5)](),this['updateSkew'](),this[_0xa70e65(0x7b7)](),this[_0xa70e65(0x194)](),this[_0xa70e65(0x796)](),VisuMZ['BattleCore'][_0xa70e65(0x66f)][_0xa70e65(0x5d9)](this);if(this[_0xa70e65(0x1da)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x276)]=Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x3f3)],Sprite_Battler[_0x3df63e(0x655)]['updatePosition']=function(){const _0x4393cc=_0x3df63e;VisuMZ[_0x4393cc(0xa69)][_0x4393cc(0x276)]['call'](this),this['updatePositionBattleCore'](),this[_0x4393cc(0x97a)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xb23)]=function(){const _0x19c73a=_0x3df63e;this[_0x19c73a(0x924)]=this['x'],this[_0x19c73a(0x560)]=this['y'],this[_0x19c73a(0xbb8)](),this[_0x19c73a(0x279)](),this['x']+=this[_0x19c73a(0x676)](),this['y']+=this[_0x19c73a(0xa5e)](),this['y']+=this[_0x19c73a(0x7c9)](),this['x']=Math[_0x19c73a(0x49d)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x676)]=function(){let _0x418a68=0x0;return _0x418a68;},Sprite_Battler[_0x3df63e(0x655)]['extraPositionY']=function(){const _0x3d4df2=_0x3df63e;let _0x10dbb3=0x0;return this[_0x3d4df2(0x957)]&&!this[_0x3d4df2(0x957)]['isBattlerGrounded']()&&('ktPQD'!==_0x3d4df2(0x4cd)?(_0x10dbb3-=this[_0x3d4df2(0xb80)],_0x10dbb3-=this[_0x3d4df2(0x20d)]):this['startMove'](0x0,0x0,0xc)),_0x10dbb3;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x7c9)]=function(){const _0x35fd30=_0x3df63e;let _0x4bc2aa=0x0;if(this['_distortionSprite']&&this[_0x35fd30(0x1da)]!==Sprite_SvEnemy){if(_0x35fd30(0x2f6)===_0x35fd30(0x202)){let _0x120108=_0x35fd30(0x3da);if(this[_0x35fd30(0xb67)](_0x120108))return this[_0x35fd30(0xab0)][_0x120108];return this[_0x35fd30(0xab0)][_0x120108]=this[_0x35fd30(0x44b)](this[_0x35fd30(0x7d7)]()),this[_0x35fd30(0xab0)][_0x120108];}else{const _0x1f89f5=this['_distortionSprite'][_0x35fd30(0x5c3)]['y'];_0x4bc2aa-=(_0x1f89f5-0x1)*this[_0x35fd30(0xb78)];}}return _0x4bc2aa;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x194)]=function(){const _0x8b957b=_0x3df63e,_0x1cfc70=this[_0x8b957b(0x957)]&&this[_0x8b957b(0x957)][_0x8b957b(0x8d4)]();this['_flipScaleX']=(_0x1cfc70?-0x1:0x1)*Math[_0x8b957b(0xb55)](this['scale']['x']);},Sprite_Battler['prototype']['startFloat']=function(_0x59653d,_0x40dc05,_0x485064){const _0x5190ef=_0x3df63e;if(!this[_0x5190ef(0x8cb)]())return;if(this[_0x5190ef(0x8a0)]===_0x59653d)return;this[_0x5190ef(0x8a0)]=_0x59653d,this['_floatDuration']=_0x40dc05,this[_0x5190ef(0x9cc)]=_0x40dc05,this[_0x5190ef(0x902)]=_0x485064||_0x5190ef(0x25d);if(_0x40dc05<=0x0)this[_0x5190ef(0xb80)]=_0x59653d;},Sprite_Battler['prototype']['updateFloat']=function(){const _0x2890f5=_0x3df63e;if(this[_0x2890f5(0x36a)]<=0x0)return;const _0x37b506=this[_0x2890f5(0x36a)],_0xf56829=this[_0x2890f5(0x9cc)],_0x94f9cf=this[_0x2890f5(0x902)];if(Imported[_0x2890f5(0x1ec)])this['_floatHeight']=this[_0x2890f5(0x769)](this[_0x2890f5(0xb80)],this[_0x2890f5(0x8a0)],_0x37b506,_0xf56829,_0x94f9cf);else{if(_0x2890f5(0x1a6)==='FGCtZ')return 0x1;else this['_floatHeight']=(this[_0x2890f5(0xb80)]*(_0x37b506-0x1)+this['_targetFloatHeight'])/_0x37b506;}this[_0x2890f5(0x36a)]--;if(this[_0x2890f5(0x36a)]<=0x0)this[_0x2890f5(0x429)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x429)]=function(){const _0x1e7cc8=_0x3df63e;this[_0x1e7cc8(0xb80)]=this[_0x1e7cc8(0x8a0)];},Sprite_Battler[_0x3df63e(0x655)]['isFloating']=function(){const _0x375fa5=_0x3df63e;return this[_0x375fa5(0x36a)]>0x0;},Sprite_Battler[_0x3df63e(0x655)]['startJump']=function(_0x3d8f4b,_0x337163){const _0x335d2b=_0x3df63e;if(!this[_0x335d2b(0x8cb)]())return;if(_0x337163<=0x0)return;this['_jumpMaxHeight']=_0x3d8f4b,this[_0x335d2b(0x28d)]=_0x337163,this['_jumpWholeDuration']=_0x337163;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x279)]=function(){const _0x425abc=_0x3df63e;if(this[_0x425abc(0x28d)]<=0x0)return;const _0xd64478=this[_0x425abc(0xa60)]-this['_jumpDuration'],_0x433ea9=this[_0x425abc(0xa60)]/0x2,_0xe765c1=this[_0x425abc(0x1cc)],_0x2b0187=-_0xe765c1/Math['pow'](_0x433ea9,0x2);this[_0x425abc(0x20d)]=_0x2b0187*Math['pow'](_0xd64478-_0x433ea9,0x2)+_0xe765c1,this['_jumpDuration']--;if(this['_jumpDuration']<=0x0)return this[_0x425abc(0xb31)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xb31)]=function(){const _0x5b2f9d=_0x3df63e;this[_0x5b2f9d(0x20d)]=0x0;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x1f2)]=function(){const _0x35a49a=_0x3df63e;return this[_0x35a49a(0x28d)]>0x0;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x4db)]=function(_0x197a6a,_0x2a95ed,_0x4173d8){const _0x2889d6=_0x3df63e;if(this[_0x2889d6(0x511)]===_0x197a6a)return;this[_0x2889d6(0x511)]=_0x197a6a,this[_0x2889d6(0x994)]=_0x2a95ed,this[_0x2889d6(0x5dd)]=_0x2a95ed,this[_0x2889d6(0x7f7)]=_0x4173d8||_0x2889d6(0x25d);if(_0x2a95ed<=0x0)this[_0x2889d6(0x7a6)]=_0x197a6a;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x97a)]=function(){const _0x26264f=_0x3df63e;if(this['constructor'][_0x26264f(0xae2)]==='Sprite_SvEnemy')return;if(this[_0x26264f(0x994)]<=0x0)return;const _0x3be758=this[_0x26264f(0x994)],_0x18d7fd=this['_opacityWholeDuration'],_0x350b78=this[_0x26264f(0x7f7)];if(Imported[_0x26264f(0x1ec)])this[_0x26264f(0x7a6)]=this[_0x26264f(0x769)](this['opacity'],this[_0x26264f(0x511)],_0x3be758,_0x18d7fd,_0x350b78);else{if(_0x26264f(0x7a5)!==_0x26264f(0x4ad))this[_0x26264f(0x7a6)]=(this[_0x26264f(0x7a6)]*(_0x3be758-0x1)+this[_0x26264f(0x511)])/_0x3be758;else{this['frameVisible']=this[_0x26264f(0x69a)]();const _0x3c7992=_0x520554['BattleCore'][_0x26264f(0x5eb)][_0x26264f(0x742)];_0x3c7992[_0x26264f(0x226)]&&(this['opacity']=0x0);}}this[_0x26264f(0x994)]--;if(this[_0x26264f(0x994)]<=0x0)this[_0x26264f(0x317)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x317)]=function(){const _0x5bf570=_0x3df63e;this[_0x5bf570(0x7a6)]=this[_0x5bf570(0x511)];},Sprite_Battler[_0x3df63e(0x655)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x9c6)]=function(){const _0x1c565c=_0x3df63e;this[_0x1c565c(0x4eb)][_0x1c565c(0x7ad)]=this[_0x1c565c(0x957)][_0x1c565c(0x5c5)](),this[_0x1c565c(0x72a)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x72a)]=function(){const _0x2e0182=_0x3df63e;if(!this[_0x2e0182(0x4eb)])return;this['_shadowSprite']['y']=this[_0x2e0182(0x560)]-this['y']-0x2;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x313)]=function(){const _0x5151f0=_0x3df63e;if(!this[_0x5151f0(0x957)])return;this[_0x5151f0(0xb9e)]=this[_0x5151f0(0x957)]['battlerShadowScaleX'](),this[_0x5151f0(0x574)]=this[_0x5151f0(0x957)][_0x5151f0(0x8c9)]();},Game_BattlerBase['prototype'][_0x3df63e(0xbac)]=function(){const _0x1783de=_0x3df63e,_0x4af1f2=this[_0x1783de(0x5c6)]()?this[_0x1783de(0x355)]():this[_0x1783de(0x7d7)]();if(_0x4af1f2){const _0x575e57=_0x4af1f2[_0x1783de(0x45f)];if(_0x575e57[_0x1783de(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x575e57['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x3df63e(0x655)][_0x3df63e(0x8c9)]=function(){const _0x37463a=_0x3df63e,_0x3de1f5=this[_0x37463a(0x5c6)]()?this[_0x37463a(0x355)]():this[_0x37463a(0x7d7)]();if(_0x3de1f5){const _0xc9d01a=_0x3de1f5[_0x37463a(0x45f)];if(_0xc9d01a[_0x37463a(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if('Ljxrc'==='Ljxrc')return Number(RegExp['$1'])*0.01;else this[_0x37463a(0x441)]();}else{if(_0xc9d01a[_0x37463a(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x3df63e(0x655)]['updateScale']=function(){const _0x16a4ce=_0x3df63e;if(this[_0x16a4ce(0x1da)]===Sprite_SvEnemy)return;this[_0x16a4ce(0xab1)](),this[_0x16a4ce(0x635)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x635)]=function(){const _0x21e91a=_0x3df63e,_0x4f02db=this[_0x21e91a(0x720)];if(_0x4f02db){if(_0x21e91a(0x8d9)!=='MjVKT'){if(this[_0x21e91a(0xab0)][_0x21e91a(0xa4a)]!==_0x257181)return this[_0x21e91a(0xab0)]['softDamageCap'];let _0x505db4=_0x54771e[_0x21e91a(0xa69)][_0x21e91a(0x5eb)]['Damage'][_0x21e91a(0x9cb)];const _0x35e238=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x487609=this[_0x21e91a(0x86d)]()[_0x21e91a(0x3a8)](_0x5eaef7=>_0x5eaef7&&_0x5eaef7['note'][_0x21e91a(0x64e)](_0x35e238)?_0x4d644e(_0x194f16['$1'])/0x64:0x0);return _0x505db4=_0x487609[_0x21e91a(0x701)]((_0x54a8f6,_0x2414d0)=>_0x54a8f6+_0x2414d0,_0x505db4),this[_0x21e91a(0xab0)][_0x21e91a(0xa4a)]=_0x505db4,this[_0x21e91a(0xab0)][_0x21e91a(0xa4a)][_0x21e91a(0x858)](0.01,0x1);}else _0x4f02db[_0x21e91a(0x5c3)]['x']=this[_0x21e91a(0xaa6)](),_0x4f02db['scale']['y']=this[_0x21e91a(0x4b9)]();}},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xaa6)]=function(){const _0x5ad882=_0x3df63e;let _0x1fc592=0x1;return _0x1fc592*=this[_0x5ad882(0x208)],_0x1fc592*=this['_growX'],_0x1fc592;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x4b9)]=function(){const _0x32295c=_0x3df63e;return 0x1*this[_0x32295c(0x6fc)];},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xaa0)]=function(){const _0x4173e8=_0x3df63e;return this['width']*this[_0x4173e8(0xaa6)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x1cf)]=function(){const _0x5bbea7=_0x3df63e;return this[_0x5bbea7(0xb78)]*this['mainSpriteScaleY']();},Sprite_Battler['prototype'][_0x3df63e(0x9e3)]=function(_0x11af2b,_0x5c856c,_0x35c64d,_0x17ba84){const _0x3b1727=_0x3df63e;if(!this[_0x3b1727(0x8cb)]())return;if(!this[_0x3b1727(0x720)])return;if(this['_targetGrowX']===_0x11af2b&&this[_0x3b1727(0x575)]===_0x5c856c)return;this[_0x3b1727(0x52a)]=_0x11af2b,this[_0x3b1727(0x575)]=_0x5c856c,this[_0x3b1727(0x7c1)]=_0x35c64d,this['_growWholeDuration']=_0x35c64d,this[_0x3b1727(0x9b0)]=_0x17ba84||_0x3b1727(0x25d),_0x35c64d<=0x0&&(this['_growX']=this[_0x3b1727(0x52a)],this[_0x3b1727(0x6fc)]=this[_0x3b1727(0x575)]);},Sprite_Battler[_0x3df63e(0x655)]['updateGrow']=function(){const _0x15bfc6=_0x3df63e;if(this['_growDuration']<=0x0)return;if(!this[_0x15bfc6(0x720)])return;const _0x2bca2c=this[_0x15bfc6(0x7c1)],_0x36e19a=this[_0x15bfc6(0x843)],_0x4ec940=this[_0x15bfc6(0x9b0)];Imported[_0x15bfc6(0x1ec)]?(this[_0x15bfc6(0xb98)]=this[_0x15bfc6(0x769)](this[_0x15bfc6(0xb98)],this[_0x15bfc6(0x52a)],_0x2bca2c,_0x36e19a,_0x4ec940),this['_growY']=this[_0x15bfc6(0x769)](this['_growY'],this[_0x15bfc6(0x575)],_0x2bca2c,_0x36e19a,_0x4ec940)):(this['_growX']=(this[_0x15bfc6(0xb98)]*(_0x2bca2c-0x1)+this[_0x15bfc6(0x52a)])/_0x2bca2c,this[_0x15bfc6(0x6fc)]=(this['_growY']*(_0x2bca2c-0x1)+this['_targetGrowY'])/_0x2bca2c);this[_0x15bfc6(0x7c1)]--;if(this[_0x15bfc6(0x7c1)]<=0x0)this[_0x15bfc6(0x289)]();},Sprite_Battler['prototype']['onGrowEnd']=function(){const _0x5a1fbe=_0x3df63e;this[_0x5a1fbe(0xb98)]=this['_targetGrowX'],this['_growY']=this[_0x5a1fbe(0x575)];},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x67f)]=function(){const _0x4f3062=_0x3df63e;return this[_0x4f3062(0x7c1)]>0x0;},Sprite_Battler[_0x3df63e(0x655)]['startSkew']=function(_0x5ea064,_0x1c60be,_0xee0d0b,_0x146ea5){const _0xfd8f48=_0x3df63e;if(!this['canMove']())return;if(!this[_0xfd8f48(0x720)])return;if(this[_0xfd8f48(0xa2a)]===_0x5ea064&&this[_0xfd8f48(0xa83)]===_0x1c60be)return;this[_0xfd8f48(0xa2a)]=_0x5ea064,this[_0xfd8f48(0xa83)]=_0x1c60be,this[_0xfd8f48(0x223)]=_0xee0d0b,this[_0xfd8f48(0x440)]=_0xee0d0b,this[_0xfd8f48(0xbca)]=_0x146ea5||'Linear';if(_0xee0d0b<=0x0){if(_0xfd8f48(0x6de)===_0xfd8f48(0x6de))this[_0xfd8f48(0x720)][_0xfd8f48(0x1ca)]['x']=this['_targetSkewX'],this[_0xfd8f48(0x720)][_0xfd8f48(0x1ca)]['y']=this[_0xfd8f48(0xa83)];else{this['_damages'][_0xfd8f48(0x9cd)](_0x1fda63);if(this['isShownOnBattlePortrait']())_0x2fa06b['_scene'][_0xfd8f48(0x802)]['addDamageSprite'](_0x468eee,this[_0xfd8f48(0x957)]);else{this[_0xfd8f48(0x2c6)]()[_0xfd8f48(0x699)](_0x22ab4b);if(_0x1ce697[_0xfd8f48(0x6e7)]())_0x5181f3['scale']['x']=-0x1;}}}},Sprite_Battler[_0x3df63e(0x655)]['updateSkew']=function(){const _0x4b8bdc=_0x3df63e;if(this[_0x4b8bdc(0x223)]<=0x0)return;if(!this[_0x4b8bdc(0x720)])return;const _0x5bc6bd=this[_0x4b8bdc(0x223)],_0x62f961=this[_0x4b8bdc(0x440)],_0x2dfca=this[_0x4b8bdc(0xbca)],_0xf1cc4f=this[_0x4b8bdc(0x720)];Imported['VisuMZ_0_CoreEngine']?_0x4b8bdc(0x568)!==_0x4b8bdc(0x172)?(_0xf1cc4f[_0x4b8bdc(0x1ca)]['x']=this[_0x4b8bdc(0x769)](_0xf1cc4f[_0x4b8bdc(0x1ca)]['x'],this[_0x4b8bdc(0xa2a)],_0x5bc6bd,_0x62f961,_0x2dfca),_0xf1cc4f[_0x4b8bdc(0x1ca)]['y']=this[_0x4b8bdc(0x769)](_0xf1cc4f[_0x4b8bdc(0x1ca)]['y'],this[_0x4b8bdc(0xa83)],_0x5bc6bd,_0x62f961,_0x2dfca)):_0x58642d['_subject']['friendsUnit']()['gainCurrentActionsFTB'](_0x3dfaed):(_0xf1cc4f[_0x4b8bdc(0x1ca)]['x']=(_0xf1cc4f[_0x4b8bdc(0x1ca)]['x']*(_0x5bc6bd-0x1)+this[_0x4b8bdc(0xa2a)])/_0x5bc6bd,_0xf1cc4f[_0x4b8bdc(0x1ca)]['y']=(_0xf1cc4f[_0x4b8bdc(0x1ca)]['y']*(_0x5bc6bd-0x1)+this['_targetSkewY'])/_0x5bc6bd);this[_0x4b8bdc(0x223)]--;if(this['_skewDuration']<=0x0)this[_0x4b8bdc(0xa13)]();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xa13)]=function(){const _0x32c20b=_0x3df63e;this['_distortionSprite'][_0x32c20b(0x1ca)]['x']=this[_0x32c20b(0xa2a)],this['_distortionSprite'][_0x32c20b(0x1ca)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x1de)]=function(){const _0x2ed31e=_0x3df63e;return this[_0x2ed31e(0x223)]>0x0;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x87b)]=function(_0x548b4,_0x25769d,_0x43877f,_0x27b91f){const _0x12da8f=_0x3df63e;if(!this[_0x12da8f(0x8cb)]())return;if(!this['_distortionSprite'])return;if(this[_0x12da8f(0x4ba)]===_0x548b4)return;this[_0x12da8f(0x4ba)]=_0x548b4,this['_angleDuration']=_0x25769d,this[_0x12da8f(0x2e7)]=_0x25769d,this['_angleEasing']=_0x43877f||'Linear',this['_angleRevertOnFinish']=_0x27b91f,this[_0x12da8f(0x85f)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x25769d<=0x0&&(this[_0x12da8f(0x911)]=_0x548b4,this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this[_0x12da8f(0x911)]=0x0));},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x7b7)]=function(){const _0x5e07b4=_0x3df63e;this[_0x5e07b4(0x49f)](),this[_0x5e07b4(0x5d8)]();},Sprite_Battler['prototype'][_0x3df63e(0x49f)]=function(){const _0x18b5af=_0x3df63e;if(this['_angleDuration']<=0x0)return;const _0x573221=this[_0x18b5af(0x1b8)],_0xeb1fae=this[_0x18b5af(0x2e7)],_0x5e9ea1=this[_0x18b5af(0x883)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x18b5af(0x92e)!==_0x18b5af(0x281))this['_currentAngle']=this['applyEasing'](this['_currentAngle'],this['_targetAngle'],_0x573221,_0xeb1fae,_0x5e9ea1);else{if(this[_0x18b5af(0x204)]!==_0x564a1)return this[_0x18b5af(0x204)];return this[_0x18b5af(0xa5d)](),this['_svBattlerData'];}}else this[_0x18b5af(0x911)]=(this[_0x18b5af(0x911)]*(_0x573221-0x1)+this[_0x18b5af(0x4ba)])/_0x573221;this['_angleDuration']--;if(this[_0x18b5af(0x1b8)]<=0x0)this[_0x18b5af(0xa7c)]();},Sprite_Battler['prototype'][_0x3df63e(0xa7c)]=function(){const _0x251eae=_0x3df63e;this[_0x251eae(0x911)]=this[_0x251eae(0x4ba)],this[_0x251eae(0x85f)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);},Sprite_Battler['prototype']['isSpinning']=function(){const _0x23db44=_0x3df63e;return this[_0x23db44(0x1b8)]>0x0;},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x5d8)]=function(){const _0x235460=_0x3df63e;if(!this[_0x235460(0x720)])return;const _0x2ad3cb=this[_0x235460(0x911)],_0x2a2e27=this['scale']['x'],_0x5e29c2=this[_0x235460(0x957)][_0x235460(0x5c6)]()?-0x1:0x1;this[_0x235460(0x720)]['angle']=_0x2ad3cb*_0x2a2e27*_0x5e29c2;const _0x352853=this[_0x235460(0x720)][_0x235460(0x5c3)]['y'];this['_distortionSprite']['y']=this[_0x235460(0xb78)]*-0.5*(0x2-_0x352853),this[_0x235460(0x720)]['y']=Math[_0x235460(0x3dd)](this[_0x235460(0x720)]['y']);const _0xaa21df=[this[_0x235460(0x620)],this[_0x235460(0x431)],this[_0x235460(0x477)]];for(const _0x3f3ee7 of _0xaa21df){if(!_0x3f3ee7)continue;_0x3f3ee7['y']=this[_0x235460(0xb78)]*0.5;}this['_shadowSprite']&&(this[_0x235460(0xb9e)]=this[_0x235460(0xb9e)]??0x1,this[_0x235460(0x574)]=this[_0x235460(0x574)]??0x1,this[_0x235460(0x4eb)]['scale']['x']=this[_0x235460(0x720)]['scale']['x']*this[_0x235460(0xb9e)],this[_0x235460(0x4eb)][_0x235460(0x5c3)]['y']=this[_0x235460(0x720)]['scale']['y']*this[_0x235460(0x574)]);},VisuMZ[_0x3df63e(0xa69)]['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype'][_0x3df63e(0x72f)],Sprite_Actor[_0x3df63e(0x655)]['createStateSprite']=function(){const _0xc1d751=_0x3df63e;VisuMZ[_0xc1d751(0xa69)]['Sprite_Actor_createStateSprite'][_0xc1d751(0x5d9)](this);if(VisuMZ[_0xc1d751(0xa69)][_0xc1d751(0x5eb)][_0xc1d751(0x9c4)][_0xc1d751(0x756)]){if('SuVnF'!==_0xc1d751(0x25e))return _0x338d7c(_0x17dc1f['$1'])['split'](/[\r\n]+/);else this[_0xc1d751(0x471)]();}},VisuMZ['BattleCore'][_0x3df63e(0xb7f)]=Sprite_Enemy[_0x3df63e(0x655)]['createStateIconSprite'],Sprite_Enemy[_0x3df63e(0x655)]['createStateIconSprite']=function(){const _0x4210a7=_0x3df63e;VisuMZ[_0x4210a7(0xa69)][_0x4210a7(0x5eb)][_0x4210a7(0x9c4)][_0x4210a7(0x176)]&&this[_0x4210a7(0x471)](),VisuMZ[_0x4210a7(0xa69)][_0x4210a7(0xb7f)][_0x4210a7(0x5d9)](this);},Sprite_Battler[_0x3df63e(0x655)]['createHpGaugeSprite']=function(){const _0x1f180a=_0x3df63e;if(!ConfigManager['visualHpGauge'])return;if(this[_0x1f180a(0x1da)]===Sprite_SvEnemy)return;const _0x17367b=VisuMZ[_0x1f180a(0xa69)][_0x1f180a(0x5eb)][_0x1f180a(0x9c4)],_0x4e8305=new Sprite_HpGauge();_0x4e8305[_0x1f180a(0x1dd)]['x']=_0x17367b[_0x1f180a(0xace)],_0x4e8305[_0x1f180a(0x1dd)]['y']=_0x17367b[_0x1f180a(0x735)],_0x4e8305[_0x1f180a(0x5c3)]['x']=_0x4e8305[_0x1f180a(0x5c3)]['y']=_0x17367b[_0x1f180a(0x56c)],this[_0x1f180a(0x889)]=_0x4e8305,this[_0x1f180a(0x699)](this[_0x1f180a(0x889)]);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x524)]=Sprite_Battler[_0x3df63e(0x655)]['setBattler'],Sprite_Battler['prototype']['setBattler']=function(_0x371ce5){const _0x5ddc28=_0x3df63e,_0x54fdd5=this['_battler'];VisuMZ['BattleCore'][_0x5ddc28(0x524)][_0x5ddc28(0x5d9)](this,_0x371ce5),this['setupHpGaugeSprite'](_0x371ce5);if(_0x54fdd5!==_0x371ce5)this['updateShadowScale']();},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x5f6)]=function(_0x2439a9){const _0x739fa8=_0x3df63e;if(!_0x2439a9)return;if(!this['_hpGaugeSprite'])return;if(_0x2439a9[_0x739fa8(0x5c6)]()){}else{if(_0x2439a9[_0x739fa8(0xaad)]()){if(this[_0x739fa8(0x1da)]===Sprite_SvEnemy&&!_0x2439a9[_0x739fa8(0x5c5)]())return;}}this[_0x739fa8(0x889)][_0x739fa8(0x265)](_0x2439a9,'hp');},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x796)]=function(){const _0x56343f=_0x3df63e;if(!this[_0x56343f(0x957)])return;if(!this[_0x56343f(0x889)])return;const _0x3c13c3=VisuMZ['BattleCore']['Settings']['HpGauge'],_0x1620ff=this[_0x56343f(0x889)];_0x1620ff[_0x56343f(0x7ad)]=this[_0x56343f(0x39f)]();const _0x3733b1=_0x3c13c3[_0x56343f(0x7e9)],_0x2896ef=_0x3c13c3[_0x56343f(0x3b3)];_0x1620ff['x']=_0x3733b1,_0x1620ff['x']+=this[_0x56343f(0x957)][_0x56343f(0x270)](),_0x1620ff['y']=-this[_0x56343f(0xb78)]+_0x2896ef,_0x1620ff['y']+=this['_battler'][_0x56343f(0x3da)]();},Sprite_Battler['prototype']['isVisualHpGaugeDisplayed']=function(){const _0x55ecae=_0x3df63e;if(!this[_0x55ecae(0x957)])return![];if(this[_0x55ecae(0x957)][_0x55ecae(0x5c6)]())return!![];const _0x1f4c04=this[_0x55ecae(0x957)]['enemy']()[_0x55ecae(0x45f)];if(_0x1f4c04[_0x55ecae(0x64e)](/<SHOW HP GAUGE>/i))return!![];if(_0x1f4c04[_0x55ecae(0x64e)](/<HIDE HP GAUGE>/i))return![];const _0x1379f6=VisuMZ['BattleCore']['Settings'][_0x55ecae(0x9c4)];if(_0x1379f6['RequiresDefeat']){if(_0x1379f6[_0x55ecae(0x1a4)]&&BattleManager[_0x55ecae(0x421)]())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this[_0x55ecae(0x957)][_0x55ecae(0x33a)]();}return!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x72e)]=Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x88c)],Sprite_Battler['prototype'][_0x3df63e(0x88c)]=function(){const _0x908f4d=_0x3df63e;if(!this[_0x908f4d(0x957)])return![];return VisuMZ['BattleCore'][_0x908f4d(0x72e)][_0x908f4d(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x16f)]=Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xa97)],Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xa97)]=function(_0x15185e,_0x72e65b,_0x3c83b2){const _0xa6593f=_0x3df63e;this[_0xa6593f(0x8cb)]()&&VisuMZ[_0xa6593f(0xa69)]['Sprite_Battler_startMove'][_0xa6593f(0x5d9)](this,_0x15185e,_0x72e65b,_0x3c83b2);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0x8cb)]=function(){const _0x6cdc9c=_0x3df63e;if(this[_0x6cdc9c(0x957)]&&this['_battler'][_0x6cdc9c(0x9a0)]())return![];if(this[_0x6cdc9c(0x957)]&&!this[_0x6cdc9c(0x957)][_0x6cdc9c(0x2f4)]())return![];return $gameSystem[_0x6cdc9c(0x8e3)]();},Sprite_Battler['prototype'][_0x3df63e(0xaab)]=function(){},Sprite_Battler['prototype'][_0x3df63e(0x46e)]=function(){const _0x135af0=_0x3df63e;this[_0x135af0(0xa97)](0x0,0x0,0xc);},Sprite_Battler[_0x3df63e(0x655)][_0x3df63e(0xa78)]=function(){},Sprite_Battler[_0x3df63e(0x655)]['stepFlinch']=function(){const _0x30b65e=_0x3df63e,_0x1505d2=VisuMZ[_0x30b65e(0xa69)][_0x30b65e(0x5eb)][_0x30b65e(0x4d0)],_0x2be66c=this[_0x30b65e(0x957)]&&this['_battler'][_0x30b65e(0x5c6)]()?0x1:-0x1,_0x524109=this[_0x30b65e(0x924)]-this[_0x30b65e(0xa7d)]+_0x2be66c*_0x1505d2['FlinchDistanceX'],_0x290c2d=this[_0x30b65e(0x560)]-this[_0x30b65e(0x17f)]+_0x2be66c*_0x1505d2['FlinchDistanceY'],_0x86a9c3=_0x1505d2[_0x30b65e(0x847)];this[_0x30b65e(0xa97)](_0x524109,_0x290c2d,_0x86a9c3);},VisuMZ['BattleCore'][_0x3df63e(0x2e4)]=Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x9a5)],Sprite_Actor[_0x3df63e(0x655)]['initMembers']=function(){const _0x5e9273=_0x3df63e;VisuMZ[_0x5e9273(0xa69)]['Sprite_Actor_initMembers'][_0x5e9273(0x5d9)](this),this[_0x5e9273(0x85a)]();},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0xb07)]=function(){const _0x5b2cd6=_0x3df63e;return this['_distortionSprite']||this[_0x5b2cd6(0x620)]||this;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x5a4)]=Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x640)],Sprite_Actor['prototype'][_0x3df63e(0x640)]=function(){},Sprite_Actor['prototype']['moveToStartPositionBattleCore']=function(_0x41549f){const _0x11f1b5=_0x3df63e;if(SceneManager[_0x11f1b5(0x489)]())return;if(!_0x41549f)return;if(!_0x41549f[_0x11f1b5(0x8cb)]())return;VisuMZ[_0x11f1b5(0xa69)][_0x11f1b5(0x5a4)][_0x11f1b5(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xad8)]=Sprite_Actor['prototype'][_0x3df63e(0x9d6)],Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x9d6)]=function(_0x165d37){const _0x58052e=_0x3df63e;if(VisuMZ[_0x58052e(0xa69)][_0x58052e(0x5eb)][_0x58052e(0x4d0)][_0x58052e(0x1fe)])VisuMZ[_0x58052e(0xa69)][_0x58052e(0x5eb)][_0x58052e(0x4d0)][_0x58052e(0x1fe)][_0x58052e(0x5d9)](this,_0x165d37);else{if('amZCX'==='amZCX')VisuMZ[_0x58052e(0xa69)][_0x58052e(0xad8)][_0x58052e(0x5d9)](this,_0x165d37);else return this[_0x58052e(0x36a)]>0x0;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x79b)]=Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x36c)],Sprite_Actor[_0x3df63e(0x655)]['setBattler']=function(_0x43f6aa){const _0x1d8c72=_0x3df63e;VisuMZ[_0x1d8c72(0xa69)][_0x1d8c72(0x79b)]['call'](this,_0x43f6aa),this[_0x1d8c72(0x6d7)](_0x43f6aa);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x6d7)]=function(_0x114b90){const _0x1b1c6d=_0x3df63e;if(!_0x114b90)return;if(!this[_0x1b1c6d(0x620)])return;this[_0x1b1c6d(0x620)][_0x1b1c6d(0x1dd)]['x']=this[_0x1b1c6d(0x331)]['svBattlerAnchorX'](),this[_0x1b1c6d(0x620)][_0x1b1c6d(0x1dd)]['y']=this[_0x1b1c6d(0x331)][_0x1b1c6d(0x952)](),this[_0x1b1c6d(0x4cc)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x180)]=Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x54e)],Sprite_Actor[_0x3df63e(0x655)]['update']=function(){const _0x50957f=_0x3df63e;VisuMZ[_0x50957f(0xa69)][_0x50957f(0x180)][_0x50957f(0x5d9)](this);if(this[_0x50957f(0x331)]){if('QsJFI'!==_0x50957f(0xb08)){if(!_0x244114[_0x50957f(0x2a9)]())return;_0x8fddb8[_0x50957f(0x368)](_0x517c62,_0x183ccc);const _0xd7a91a=_0x11ab24['getLastPluginCommandInterpreter'](),_0x4cdf29=_0x24f257[_0x50957f(0x966)];if(!_0xd7a91a)return;_0x1fcd14[_0x50957f(0x9ea)]--,_0x12e1af[_0x50957f(0x905)]=_0xdc85f0[_0x50957f(0xa84)][_0x57578e[_0x50957f(0x9ea)]]||null,_0x3e5e8f[_0x50957f(0x905)]&&_0x4cdf29[_0x50957f(0x17c)]()[_0x50957f(0x9d2)]()!==_0x50957f(0x59e)&&_0xd7a91a[_0x50957f(0x2f3)]([_0x4cdf29]);}else this[_0x50957f(0x62d)](),this[_0x50957f(0x354)]();}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x351)]=Sprite_Actor['prototype'][_0x3df63e(0x5ea)],Sprite_Actor[_0x3df63e(0x655)]['updateBitmap']=function(){const _0x384adb=_0x3df63e;VisuMZ[_0x384adb(0xa69)][_0x384adb(0x351)][_0x384adb(0x5d9)](this),this[_0x384adb(0x620)]&&this[_0x384adb(0x620)][_0x384adb(0xa39)]&&this[_0x384adb(0x957)]&&('sGgGT'!==_0x384adb(0x18c)?this[_0x384adb(0x620)][_0x384adb(0xa39)][_0x384adb(0x4f6)]!==this[_0x384adb(0x957)][_0x384adb(0x5d4)]()&&(this['_mainSprite'][_0x384adb(0xa39)][_0x384adb(0x4f6)]=this[_0x384adb(0x957)][_0x384adb(0x5d4)]()):_0x294526[_0x384adb(0x655)][_0x384adb(0x1b3)][_0x384adb(0x5d9)](this));},VisuMZ['BattleCore'][_0x3df63e(0x5a9)]=Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x9c6)],Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x9c6)]=function(){const _0x4d2cd3=_0x3df63e;VisuMZ[_0x4d2cd3(0xa69)][_0x4d2cd3(0x5a9)][_0x4d2cd3(0x5d9)](this),this[_0x4d2cd3(0x1ed)]();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x91d5ed=_0x3df63e;if(!this['_mainSprite'])return;if(!this[_0x91d5ed(0x4eb)])return;this[_0x91d5ed(0x4cc)](),this[_0x91d5ed(0x72a)]();},Sprite_Actor['prototype']['updateStateSprite']=function(){const _0x955b6b=_0x3df63e;this[_0x955b6b(0x3e4)]['scale']['x']=0x1/(this[_0x955b6b(0x5c3)]['x']||0.001),this[_0x955b6b(0x3e4)]['scale']['y']=0x1/(this[_0x955b6b(0x5c3)]['y']||0.001);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x354)]=function(){const _0x2bff46=_0x3df63e;if(!$gameSystem[_0x2bff46(0x8e3)]()&&this['constructor']===Sprite_Actor){if('VMwNw'===_0x2bff46(0xa6c))_0x549fbe[_0x2bff46(0x8e2)][_0x2bff46(0x1f1)]();else{const _0x363e30=Scene_Battle[_0x2bff46(0x655)]['battleLayoutStyle']();if([_0x2bff46(0xbb7),'list','portrait','border'][_0x2bff46(0xa22)](_0x363e30)){if(_0x2bff46(0x77d)!==_0x2bff46(0x1d5))this[_0x2bff46(0x7a6)]=0x0;else return _0xf26a98['BattleCore']['Settings']['ActorCmd']['BattleCmdList'];}}}},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x35b)]=function(){const _0xf29fcd=_0x3df63e,_0x2fa96a=this[_0xf29fcd(0x331)];if(_0x2fa96a){if(_0xf29fcd(0x4e2)!=='NCDbi'){const _0x47167e=_0x2fa96a[_0xf29fcd(0x65f)]();if(_0x2fa96a[_0xf29fcd(0x4a2)]()||_0x2fa96a[_0xf29fcd(0x955)]())this[_0xf29fcd(0x74e)]('walk');else{if(_0x47167e===0x3)this[_0xf29fcd(0x74e)](_0xf29fcd(0x881));else{if(_0x47167e===0x2)'aKvuW'!==_0xf29fcd(0x9f1)?this[_0xf29fcd(0x74e)](_0xf29fcd(0xb6c)):this['x']=_0x49ea2a[_0xf29fcd(0x8b9)]-this['enemy']()[_0xf29fcd(0x669)]()[_0xf29fcd(0x924)];else{if(this[_0xf29fcd(0x80a)]){if(_0xf29fcd(0x2a5)!=='OmOig'){if(!_0x446188[_0xf29fcd(0x2a9)]())return;if(!_0x581b99[_0xf29fcd(0x808)])return;const _0x2b6710=_0x96f54c[_0xf29fcd(0x5d6)]();if(!_0x2b6710)return;_0x2b6710[_0xf29fcd(0x671)](_0xf29fcd(0xafb));}else this[_0xf29fcd(0x74e)](_0xf29fcd(0xada));}else{if(_0x2fa96a['isCharging']()){if(_0xf29fcd(0x452)===_0xf29fcd(0x452))this['startMotion'](_0xf29fcd(0x779));else{if(this[_0xf29fcd(0x9a8)]())this['_phase']=_0xf29fcd(0x181);else this[_0xf29fcd(0x1ae)][_0xf29fcd(0xb02)]>0x0?this['_phase']='turn':this[_0xf29fcd(0x916)]();}}else{if(_0x2fa96a[_0xf29fcd(0x5ef)]())this[_0xf29fcd(0x74e)](_0xf29fcd(0x860));else{if(_0x2fa96a['isGuard']()||_0x2fa96a[_0xf29fcd(0x2bf)]())this[_0xf29fcd(0x74e)](_0xf29fcd(0x912));else{if(_0x47167e===0x1)_0xf29fcd(0x698)!==_0xf29fcd(0x698)?!_0x58ba9f[_0xf29fcd(0xa69)][_0xf29fcd(0x5eb)]['BattleLog']['ShowMissEvasion']?this['push'](_0xf29fcd(0x71d),_0x8f9121):_0x114abe[_0xf29fcd(0xa69)][_0xf29fcd(0x224)][_0xf29fcd(0x5d9)](this,_0x3aedd1):this[_0xf29fcd(0x74e)]('abnormal');else{if(_0x2fa96a[_0xf29fcd(0x262)]())_0xf29fcd(0x8a4)!==_0xf29fcd(0x814)?this['startMotion'](_0xf29fcd(0x707)):(this[_0xf29fcd(0x25b)]=this['enemy']()[_0xf29fcd(0xae2)](),this[_0xf29fcd(0xbcf)]());else{if(_0x2fa96a['isUndecided']())'oIauj'!==_0xf29fcd(0x73b)?(this[_0xf29fcd(0xafc)]=new _0x2d6137(),this[_0xf29fcd(0x9ee)][_0xf29fcd(0x699)](this[_0xf29fcd(0xafc)])):this['startMotion'](_0xf29fcd(0x838));else _0x2fa96a[_0xf29fcd(0x17e)]()?_0xf29fcd(0xa61)!==_0xf29fcd(0xa61)?(_0x524d2d[_0xf29fcd(0xa69)]['ParseEnemyNotetags']&&_0x236d9d[_0xf29fcd(0xa69)][_0xf29fcd(0x920)][_0xf29fcd(0x5d9)](this,_0x341d9d),_0x211339['BattleCore'][_0xf29fcd(0x349)](_0x122434)):this[_0xf29fcd(0x74e)](_0xf29fcd(0x779)):this[_0xf29fcd(0x74e)]('walk');}}}}}}}}}}else _0x4917da[_0xf29fcd(0xa69)][_0xf29fcd(0x2a7)][_0xf29fcd(0x5d9)](this,_0x2019fe),this[_0xf29fcd(0x72b)]();}},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0xa78)]=function(){const _0x58753f=_0x3df63e,_0x25d513=0xa,_0x30f9dc=0x12c*_0x25d513,_0x636e25=0x1e*_0x25d513;this[_0x58753f(0xa97)](_0x30f9dc,0x0,_0x636e25);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x1b3)]=function(){const _0x20bb1b=_0x3df63e;Sprite_Battler[_0x20bb1b(0x655)]['onMoveEnd']['call'](this);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0xa92)]=function(){const _0x2c2971=_0x3df63e;return Sprite_Battler[_0x2c2971(0x7e3)];},Sprite_Weapon[_0x3df63e(0x655)][_0x3df63e(0x7b2)]=function(){const _0x3ae43b=_0x3df63e;return Sprite_Battler[_0x3ae43b(0x7e3)];},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x4bc)]=function(){},Sprite_Actor['prototype'][_0x3df63e(0xb48)]=function(){},Sprite_Actor['prototype']['updateMotionCount']=function(){const _0x1f8f8a=_0x3df63e;if(this['_motion']&&++this[_0x1f8f8a(0x943)]>=this['motionSpeed']()){if(this[_0x1f8f8a(0xb8d)][_0x1f8f8a(0x19c)]){if(_0x1f8f8a(0xa46)===_0x1f8f8a(0xa46))this[_0x1f8f8a(0xaa7)]=(this[_0x1f8f8a(0xaa7)]+0x1)%0x4;else{_0x2da46b[_0x1f8f8a(0x655)][_0x1f8f8a(0xbcf)][_0x1f8f8a(0x5d9)](this),this[_0x1f8f8a(0x546)][_0x1f8f8a(0x6be)]();if(!this[_0x1f8f8a(0x7d7)]())return;this[_0x1f8f8a(0x70a)]();}}else this[_0x1f8f8a(0xaa7)]<0x2?this[_0x1f8f8a(0xaa7)]++:_0x1f8f8a(0x320)===_0x1f8f8a(0x56a)?_0x5769c3=_0x44a4b6[_0x1f8f8a(0x913)](_0x2c2409[_0x1f8f8a(0x177)](_0x3a9eef)):this['refreshMotion']();this[_0x1f8f8a(0x943)]=0x0;}},Sprite_Actor['prototype'][_0x3df63e(0x70c)]=function(_0x4833df){const _0x239a46=_0x3df63e;if(_0x4833df===_0x239a46(0x780))this['_checkOn']=!![];if(this[_0x239a46(0x957)]&&this[_0x239a46(0x957)][_0x239a46(0x9a0)]()){if(_0x239a46(0x841)===_0x239a46(0x841)){this[_0x239a46(0xb8d)]=Sprite_Actor[_0x239a46(0x7ea)][_0x239a46(0x881)];return;}else{const _0x1754d9=_0x17f026['parse']('['+_0x3090a0['$1'][_0x239a46(0x64e)](/\d+/g)+']');for(const _0x45103a of _0x1754d9){if(!_0x300004['value'](_0x45103a))return!![];}return![];}}const _0x3664f6=Sprite_Actor[_0x239a46(0x7ea)][_0x4833df];this['_motion']=_0x3664f6,this[_0x239a46(0x943)]=0x0,this[_0x239a46(0xaa7)]=0x0;},Sprite_Actor[_0x3df63e(0x655)]['forceWeaponAnimation']=function(_0x21f845){const _0x5e2a6c=_0x3df63e;this[_0x5e2a6c(0x396)](),this[_0x5e2a6c(0xbb3)][_0x5e2a6c(0x265)](_0x21f845),this[_0x5e2a6c(0x331)][_0x5e2a6c(0x3d6)]();},Sprite_Actor['prototype']['adjustWeaponSpriteOffset']=function(){const _0x308dda=_0x3df63e;let _0x134a48=-0x10,_0x466727=this[_0x308dda(0xb78)]*0.5;const _0x2ebfdb=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x482c60=this[_0x308dda(0x957)][_0x308dda(0x86d)]()[_0x308dda(0x3a8)](_0x12f3f7=>_0x12f3f7&&_0x12f3f7[_0x308dda(0x45f)]['match'](_0x2ebfdb)?Number(RegExp['$1']):0x0),_0x1bba3f=this[_0x308dda(0x957)][_0x308dda(0x86d)]()[_0x308dda(0x3a8)](_0x2be47c=>_0x2be47c&&_0x2be47c[_0x308dda(0x45f)][_0x308dda(0x64e)](_0x2ebfdb)?Number(RegExp['$2']):0x0);_0x134a48=_0x482c60[_0x308dda(0x701)]((_0x25403a,_0x2bcbdc)=>_0x25403a+_0x2bcbdc,_0x134a48),_0x466727=_0x1bba3f[_0x308dda(0x701)]((_0xa9c1d3,_0x4ddd99)=>_0xa9c1d3+_0x4ddd99,_0x466727),this['_weaponSprite']['x']=_0x134a48,this[_0x308dda(0xbb3)]['y']=_0x466727,this[_0x308dda(0xbb3)][_0x308dda(0x54e)]();},Sprite_Weapon[_0x3df63e(0x655)]['setup']=function(_0x417a53){const _0x49792a=_0x3df63e;this[_0x49792a(0x4ea)]=_0x417a53,this[_0x49792a(0xa4f)]=-0x1,this[_0x49792a(0xaa7)]=0x0,this['loadBitmap'](),this[_0x49792a(0x636)]();},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x479)]=function(){},Sprite_Actor['prototype'][_0x3df63e(0xaab)]=function(){const _0x339d9d=_0x3df63e,_0x4387b3=VisuMZ[_0x339d9d(0xa69)][_0x339d9d(0x5eb)]['ActionSequence'],_0x559db7=_0x4387b3[_0x339d9d(0x751)],_0x21200d=_0x4387b3['StepDistanceY'],_0x3fb505=_0x4387b3[_0x339d9d(0x538)];this[_0x339d9d(0xa97)](-_0x559db7,-_0x21200d,_0x3fb505);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xa81)]=Sprite_Actor['prototype'][_0x3df63e(0x636)],Sprite_Actor[_0x3df63e(0x655)]['updateFrame']=function(){const _0x20d080=_0x3df63e;this[_0x20d080(0x6b2)](),VisuMZ[_0x20d080(0xa69)][_0x20d080(0xa81)][_0x20d080(0x5d9)](this);},Sprite_Actor[_0x3df63e(0x655)][_0x3df63e(0x6b2)]=function(){const _0x471c2b=_0x3df63e;if(this['_battler']&&this['_battler'][_0x471c2b(0x3b7)]){const _0x16fe12=this[_0x471c2b(0x957)][_0x471c2b(0x3b7)];this[_0x471c2b(0xb8d)]=Sprite_Actor['MOTIONS'][_0x16fe12[_0x471c2b(0x41b)]],this[_0x471c2b(0xaa7)]=_0x16fe12['pattern'];const _0x1d6128=this[_0x471c2b(0xbb3)];_0x1d6128[_0x471c2b(0x1c3)](_0x16fe12['weaponImageId'],_0x16fe12[_0x471c2b(0x35f)]),this[_0x471c2b(0x396)]();}},Sprite_Weapon[_0x3df63e(0x655)][_0x3df63e(0x1c3)]=function(_0x27fc75,_0x2ead37){const _0x2eb42a=_0x3df63e;this['_weaponImageId']=_0x27fc75,this[_0x2eb42a(0xa4f)]=-Infinity,this[_0x2eb42a(0xaa7)]=_0x2ead37,this['loadBitmap'](),this[_0x2eb42a(0x636)]();},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x9a5)]=function(){const _0x2a184c=_0x3df63e;Sprite_Battler[_0x2a184c(0x655)][_0x2a184c(0x9a5)][_0x2a184c(0x5d9)](this),this['_enemy']=null,this[_0x2a184c(0x43f)]=![],this[_0x2a184c(0x254)]='',this[_0x2a184c(0x5ba)]=0x0,this[_0x2a184c(0xa2c)]=null,this[_0x2a184c(0x5ce)]=0x0,this[_0x2a184c(0x643)]=0x0,this[_0x2a184c(0x589)](),this['createStateIconSprite']();},VisuMZ['BattleCore'][_0x3df63e(0x633)]=Sprite_Enemy['prototype'][_0x3df63e(0x54e)],Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0xf2b24f=_0x3df63e;VisuMZ[_0xf2b24f(0xa69)][_0xf2b24f(0x633)][_0xf2b24f(0x5d9)](this),this[_0xf2b24f(0x4cc)]();},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x589)]=function(){const _0x64a8b5=_0x3df63e;this[_0x64a8b5(0x620)]=new Sprite(),this[_0x64a8b5(0x620)][_0x64a8b5(0x1dd)]['x']=0.5,this[_0x64a8b5(0x620)][_0x64a8b5(0x1dd)]['y']=0x1,this[_0x64a8b5(0x699)](this[_0x64a8b5(0x620)]),this[_0x64a8b5(0x85a)]();},Sprite_Enemy[_0x3df63e(0x655)]['mainSprite']=function(){const _0xfe597a=_0x3df63e;return this[_0xfe597a(0x720)]||this[_0xfe597a(0x620)]||this;},Sprite_Enemy[_0x3df63e(0x655)]['loadBitmap']=function(_0x5f2f47){const _0x42f7d6=_0x3df63e;this[_0x42f7d6(0xa39)]=new Bitmap(0x1,0x1);if(this[_0x42f7d6(0x5c5)]()){if('PKezF'==='PKezF'){const _0x20be23=this[_0x42f7d6(0xb72)]['svBattlerData']();this[_0x42f7d6(0xa39)]=new Bitmap(_0x20be23['width'],_0x20be23[_0x42f7d6(0xb78)]),this[_0x42f7d6(0x620)][_0x42f7d6(0xa39)]=new Bitmap(0x1,0x1);}else return _0xf4a867[_0x2ad994];}else $gameSystem[_0x42f7d6(0x8e3)]()?(this['_mainSprite']['bitmap']=ImageManager['loadSvEnemy'](_0x5f2f47),this[_0x42f7d6(0x620)][_0x42f7d6(0xa39)][_0x42f7d6(0x92a)](this[_0x42f7d6(0x7f4)][_0x42f7d6(0x96b)](this))):_0x42f7d6(0xa32)!==_0x42f7d6(0x539)?(this[_0x42f7d6(0x620)][_0x42f7d6(0xa39)]=ImageManager[_0x42f7d6(0x403)](_0x5f2f47),this[_0x42f7d6(0x620)][_0x42f7d6(0xa39)][_0x42f7d6(0x92a)](this['createEmptyBitmap'][_0x42f7d6(0x96b)](this))):this[_0x42f7d6(0xafc)][_0x42f7d6(0x699)](_0x55f4f5);},Sprite_Enemy[_0x3df63e(0x655)]['createEmptyBitmap']=function(){const _0x3aeec6=_0x3df63e,_0x1913fb=this[_0x3aeec6(0x620)][_0x3aeec6(0xa39)];_0x1913fb&&(this['bitmap']=new Bitmap(_0x1913fb[_0x3aeec6(0x366)],_0x1913fb[_0x3aeec6(0xb78)]));},VisuMZ['BattleCore']['Sprite_Enemy_setHue']=Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x722)],Sprite_Enemy[_0x3df63e(0x655)]['setHue']=function(_0x44e6e7){const _0x42bd7f=_0x3df63e;this['_mainSprite']&&this[_0x42bd7f(0x620)][_0x42bd7f(0x722)](_0x44e6e7);},VisuMZ['BattleCore'][_0x3df63e(0x59a)]=Sprite_Enemy['prototype'][_0x3df63e(0x7e1)],Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x7e1)]=function(){const _0x4f3651=_0x3df63e;this['allowCollapse']()?VisuMZ[_0x4f3651(0xa69)]['Sprite_Enemy_initVisibility'][_0x4f3651(0x5d9)](this):_0x4f3651(0x6c6)===_0x4f3651(0x6c6)?(this[_0x4f3651(0x43f)]=!this[_0x4f3651(0xb72)][_0x4f3651(0x3c6)](),!this[_0x4f3651(0x43f)]&&(this[_0x4f3651(0x7a6)]=0x0)):(_0x3414a7[_0x4f3651(0xa69)][_0x4f3651(0x182)][_0x4f3651(0x5d9)](this,_0x353e57),this[_0x4f3651(0x72b)]());},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb38)]=Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0xa0d)],Sprite_Enemy['prototype'][_0x3df63e(0xa0d)]=function(){const _0x18159a=_0x3df63e;if(this[_0x18159a(0x992)]())VisuMZ[_0x18159a(0xa69)][_0x18159a(0xb38)][_0x18159a(0x5d9)](this);},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x636)]=function(){const _0xbd800a=_0x3df63e;Sprite_Battler[_0xbd800a(0x655)][_0xbd800a(0x636)]['call'](this);const _0x54ba6e=this[_0xbd800a(0xb07)]()||this;if(!_0x54ba6e)return;if(!_0x54ba6e[_0xbd800a(0xa39)]){if(_0xbd800a(0x291)!=='SdtCk')_0x54ba6e[_0xbd800a(0xa39)]=new Bitmap(this[_0xbd800a(0x366)],this[_0xbd800a(0xb78)]);else return this[_0xbd800a(0xa93)]();}this[_0xbd800a(0xa2c)]===_0xbd800a(0x9b7)?this[_0xbd800a(0x620)]['setFrame'](0x0,0x0,this[_0xbd800a(0x620)][_0xbd800a(0x366)],this[_0xbd800a(0x5ce)]):_0x54ba6e['setFrame'](0x0,0x0,_0x54ba6e[_0xbd800a(0xa39)][_0xbd800a(0x366)],this['bitmap']['height']);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x94c)]=Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x86a)],Sprite_Enemy['prototype']['updateBossCollapse']=function(){const _0x2d25c5=_0x3df63e;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x2d25c5(0x94c)][_0x2d25c5(0x5d9)](this);},Sprite_Enemy[_0x3df63e(0x655)]['isMoving']=function(){const _0x32acb6=_0x3df63e;return Sprite_Battler[_0x32acb6(0x655)][_0x32acb6(0x88c)][_0x32acb6(0x5d9)](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x62d)],Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x62d)]=function(){const _0x2f387e=_0x3df63e;VisuMZ[_0x2f387e(0xa69)][_0x2f387e(0xb9b)][_0x2f387e(0x5d9)](this),this[_0x2f387e(0x632)]();},Sprite_Enemy['prototype'][_0x3df63e(0x632)]=function(){const _0x32296b=_0x3df63e,_0x58ed65=VisuMZ['BattleCore'][_0x32296b(0x5eb)][_0x32296b(0x580)];if(_0x58ed65[_0x32296b(0x4cb)]&&!_0x58ed65[_0x32296b(0x5a1)]){this[_0x32296b(0x7e7)]['opacity']=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x32296b(0x7e7)]['x']+=this[_0x32296b(0x957)][_0x32296b(0x270)](),this[_0x32296b(0x7e7)]['y']=-this[_0x32296b(0xa39)][_0x32296b(0xb78)]-this['_stateIconSprite'][_0x32296b(0xb78)],this[_0x32296b(0x7e7)]['y']+=this[_0x32296b(0x957)][_0x32296b(0x3da)](),this[_0x32296b(0x7e7)][_0x32296b(0x5c3)]['x']=0x1/(this[_0x32296b(0x5c3)]['x']||0.001),this[_0x32296b(0x7e7)][_0x32296b(0x5c3)]['y']=0x1/(this[_0x32296b(0x5c3)]['y']||0.001),this['hasSvBattler']()&&(this['_svBattlerSprite'][_0x32296b(0x3e4)][_0x32296b(0x5c3)]['x']=-0x1/(this[_0x32296b(0x5c3)]['x']||0.001),this[_0x32296b(0x431)]['_stateSprite'][_0x32296b(0x5c3)]['y']=0x1/(this[_0x32296b(0x5c3)]['y']||0.001));},VisuMZ['BattleCore'][_0x3df63e(0x8e8)]=Sprite_Enemy['prototype']['setBattler'],Sprite_Enemy['prototype'][_0x3df63e(0x36c)]=function(_0xa1bc93){const _0xeaf34c=_0x3df63e;VisuMZ['BattleCore'][_0xeaf34c(0x8e8)][_0xeaf34c(0x5d9)](this,_0xa1bc93),this[_0xeaf34c(0x245)](_0xa1bc93);},Sprite_Enemy['prototype'][_0x3df63e(0x245)]=function(_0x2f03f6){const _0x296588=_0x3df63e;!this['_svBattlerSprite']&&(this[_0x296588(0x431)]=new Sprite_SvEnemy(_0x2f03f6),this[_0x296588(0x85a)]()),this[_0x296588(0x431)][_0x296588(0x36c)](_0x2f03f6);},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x5c5)]=function(){const _0x46be9b=_0x3df63e;return this['_enemy']&&this[_0x46be9b(0xb72)]['hasSvBattler']();},Sprite_Enemy['prototype'][_0x3df63e(0x992)]=function(){const _0x54f5f8=_0x3df63e;if(this[_0x54f5f8(0x5c5)]()){if(_0x54f5f8(0x866)===_0x54f5f8(0x866))return this[_0x54f5f8(0xb72)][_0x54f5f8(0x992)]();else this[_0x54f5f8(0x69a)]()?_0x57ac71['prototype'][_0x54f5f8(0xb29)][_0x54f5f8(0x5d9)](this):this[_0x54f5f8(0x252)]=0x8;}else return!![];},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x35b)]=function(){const _0x5bc2f0=_0x3df63e;this['hasSvBattler']()&&('REZhj'!==_0x5bc2f0(0x89c)?(_0x21da58[_0x5bc2f0(0x655)][_0x5bc2f0(0x54e)][_0x5bc2f0(0x5d9)](this),this['updateLink'](),this[_0x5bc2f0(0x3f3)](),this['updateAttachedSprites'](),this[_0x5bc2f0(0x97a)]()):this[_0x5bc2f0(0x431)][_0x5bc2f0(0x35b)]());},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0x70c)]=function(_0x207918){const _0x1d55e8=_0x3df63e;if(this[_0x1d55e8(0x5c5)]())this[_0x1d55e8(0x431)][_0x1d55e8(0x70c)](_0x207918);},Sprite_Enemy[_0x3df63e(0x655)]['forceWeaponAnimation']=function(_0x17824b){const _0x1ce980=_0x3df63e;if(this[_0x1ce980(0x5c5)]())this[_0x1ce980(0x431)][_0x1ce980(0x9c8)](_0x17824b);},Sprite_Enemy[_0x3df63e(0x655)][_0x3df63e(0xaab)]=function(){const _0x2f69ec=_0x3df63e,_0xe7bf36=VisuMZ[_0x2f69ec(0xa69)]['Settings'][_0x2f69ec(0x862)],_0x45ea81=_0xe7bf36[_0x2f69ec(0x751)],_0x31225f=_0xe7bf36['StepDistanceY'],_0x4bf6ad=_0xe7bf36['StepDuration'];this[_0x2f69ec(0xa97)](_0x45ea81,_0x31225f,_0x4bf6ad);};function Sprite_SvEnemy(){const _0x164f67=_0x3df63e;this[_0x164f67(0xb26)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x3df63e(0x162)](Sprite_Actor[_0x3df63e(0x655)]),Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x1da)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(_0x2374b7){const _0x3d83da=_0x3df63e;Sprite_Actor[_0x3d83da(0x655)][_0x3d83da(0xb26)][_0x3d83da(0x5d9)](this,_0x2374b7),this['scale']['x']=-0x1,this[_0x3d83da(0x3e4)][_0x3d83da(0x5c3)]['x']=-0x1;},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x9ce)]=function(){},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x640)]=function(){},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x9d6)]=function(_0x3f18ca){},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x9c6)]=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x62d)]=function(){const _0x3727ad=_0x3df63e;this[_0x3727ad(0x3e4)][_0x3727ad(0x7ad)]=![];},Sprite_SvEnemy['prototype'][_0x3df63e(0x5ea)]=function(){const _0x2ad17c=_0x3df63e;Sprite_Battler[_0x2ad17c(0x655)][_0x2ad17c(0x5ea)]['call'](this);const _0x4894bd=this['_actor'][_0x2ad17c(0x99b)]();this[_0x2ad17c(0x254)]!==_0x4894bd&&(this['_battlerName']=_0x4894bd,this[_0x2ad17c(0x620)][_0x2ad17c(0xa39)]=ImageManager['loadSvActor'](_0x4894bd));if(this[_0x2ad17c(0x620)]&&this[_0x2ad17c(0x620)][_0x2ad17c(0xa39)]&&this[_0x2ad17c(0x957)]){if(this[_0x2ad17c(0x620)][_0x2ad17c(0xa39)]['smooth']!==this[_0x2ad17c(0x957)]['battlerSmoothImage']()){if(_0x2ad17c(0xadb)===_0x2ad17c(0xaea))return this[_0x2ad17c(0x17e)]()&&this['currentAction']()[_0x2ad17c(0x918)]()&&this[_0x2ad17c(0x17e)]()[_0x2ad17c(0xbbb)]();else this[_0x2ad17c(0x620)][_0x2ad17c(0xa39)][_0x2ad17c(0x4f6)]=this[_0x2ad17c(0x957)][_0x2ad17c(0x5d4)]();}}},Sprite_SvEnemy[_0x3df63e(0x655)]['retreat']=function(){},Sprite_SvEnemy['prototype'][_0x3df63e(0xa97)]=function(_0x4136f0,_0x269ca2,_0x46f811){const _0x48068c=_0x3df63e;if(this[_0x48068c(0xb7b)])this[_0x48068c(0xb7b)][_0x48068c(0xa97)](_0x4136f0,_0x269ca2,_0x46f811);},Sprite_SvEnemy[_0x3df63e(0x655)]['refreshMotion']=function(){const _0x27a084=_0x3df63e,_0x548eaa=this[_0x27a084(0x331)];if(_0x548eaa){if('LfbGM'===_0x27a084(0x333)){_0x157e91=_0x3bce94['BattleCore'][_0x27a084(0xa96)][_0x27a084(0x5d9)](this);const _0x44afa6=_0x554328[_0x27a084(0xa69)]['createKeyJS'](this[_0x27a084(0x918)](),_0x27a084(0x9f6));return _0x46c4d0=_0x585b06['BattleCore']['JS'][_0x44afa6][_0x27a084(0x5d9)](this,this[_0x27a084(0x473)](),_0x37fe80),this[_0x27a084(0x9b5)](_0x49b407);}else{const _0x378df8=_0x548eaa[_0x27a084(0x65f)]();if(_0x548eaa[_0x27a084(0x4a2)]()||_0x548eaa[_0x27a084(0x955)]()){if(_0x27a084(0x233)!=='vKsev'){if(!_0x39faa8['isSceneBattle']())return;if(!this[_0x27a084(0x669)]())return;if(_0x483817[_0x27a084(0xb02)]<=0x0)return;_0x1efa30=_0x575511||{},_0x4f6c79['textColor']=_0x317a72[_0x27a084(0xab4)]||_0x27a084(0x930),_0x2d584f[_0x27a084(0xa1e)]=_0x147025[_0x27a084(0xa1e)]||[0x0,0x0,0x0,0x0],_0x49c7eb[_0x27a084(0x2b1)]=_0x9506a6['flashDuration']||0x0,this[_0x27a084(0x669)]()['setupTextPopup'](_0x28a5e1,_0x49324b);}else this[_0x27a084(0x74e)]('walk');}else{if(_0x378df8===0x3)this[_0x27a084(0x74e)](_0x27a084(0x881));else{if(_0x378df8===0x2)this[_0x27a084(0x74e)](_0x27a084(0xb6c));else{if(_0x548eaa[_0x27a084(0x5ef)]()){if(_0x27a084(0x4d1)==='zYJrJ'){const _0x534bbb=_0xc22e4a[_0x27a084(0x577)]('['+_0x326744['$1']['match'](/\d+/g)+']');for(const _0x4f0a6e of _0x534bbb){if(_0x45fa09[_0x27a084(0xa53)](_0x4f0a6e))return![];}return!![];}else this[_0x27a084(0x74e)](_0x27a084(0x860));}else{if(_0x548eaa[_0x27a084(0x247)]()||_0x548eaa[_0x27a084(0x2bf)]())this['startMotion'](_0x27a084(0x912));else{if(_0x378df8===0x1)'eaTLJ'!==_0x27a084(0x4f3)?_0x4938aa[_0x27a084(0x3a0)](_0x4bba29[_0x27a084(0xb43)],0x0):this[_0x27a084(0x74e)]('abnormal');else{if(_0x548eaa[_0x27a084(0x262)]())_0x27a084(0x515)===_0x27a084(0x835)?(this[_0x27a084(0x9cd)](_0x27a084(0xba8)),this[_0x27a084(0x9cd)](_0x27a084(0x980)),this[_0x27a084(0x9cd)](_0x27a084(0xbbc),_0x2a15a8[_0x27a084(0x4f8)](_0x310535[_0x27a084(0xae2)]())),this['push'](_0x27a084(0x779))):this[_0x27a084(0x74e)](_0x27a084(0x707));else _0x548eaa['isUndecided']()?this[_0x27a084(0x74e)](_0x27a084(0x838)):this[_0x27a084(0x74e)](_0x548eaa[_0x27a084(0x4a3)]()[_0x27a084(0x5bc)]||_0x27a084(0x838));}}}}}}}}},Sprite_SvEnemy['prototype']['inHomePosition']=function(){const _0x1b9856=_0x3df63e;if(this[_0x1b9856(0xb7b)]){if(_0x1b9856(0xa34)!=='CjBIO')_0x395b6e[_0x1b9856(0xa69)][_0x1b9856(0x205)][_0x1b9856(0x5d9)](this);else return this[_0x1b9856(0xb7b)][_0x1b9856(0xb52)]===0x0&&this['parent']['_offsetY']===0x0;}else return _0x1b9856(0x89e)!==_0x1b9856(0x89e)?this[_0x1b9856(0x720)]||this[_0x1b9856(0x620)]||this:!![];},Sprite_SvEnemy[_0x3df63e(0x655)][_0x3df63e(0x194)]=function(){},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x8b4)]=Sprite_Animation[_0x3df63e(0x655)]['targetSpritePosition'],Sprite_Animation[_0x3df63e(0x655)]['targetSpritePosition']=function(_0x259a36){const _0x50605b=_0x3df63e;if(_0x259a36[_0x50605b(0x720)]){if('GSDEe'===_0x50605b(0x3c2))_0x38ce80['prototype'][_0x50605b(0xb29)][_0x50605b(0x5d9)](this);else return this[_0x50605b(0xb66)](_0x259a36);}else return VisuMZ[_0x50605b(0xa69)][_0x50605b(0x8b4)][_0x50605b(0x5d9)](this,_0x259a36);},Sprite_Animation[_0x3df63e(0x655)][_0x3df63e(0xb66)]=function(_0x1c3c88){const _0x244957=_0x3df63e;let _0x7c2823=_0x1c3c88['x'],_0x468dbb=_0x1c3c88['y'],_0x1dbb09=_0x1c3c88[_0x244957(0xb78)],_0x24124e=_0x1c3c88[_0x244957(0x720)][_0x244957(0x5c3)]['y'];_0x1c3c88['x']=_0x1c3c88[_0x244957(0x924)]+_0x1c3c88[_0x244957(0x676)](),_0x1c3c88['y']=_0x1c3c88[_0x244957(0x560)]+_0x1c3c88[_0x244957(0xa5e)](),_0x1c3c88[_0x244957(0xb78)]*=_0x24124e;let _0x46033c=VisuMZ[_0x244957(0xa69)][_0x244957(0x8b4)][_0x244957(0x5d9)](this,_0x1c3c88);return _0x1c3c88['x']=_0x7c2823,_0x1c3c88['y']=_0x468dbb,_0x1c3c88[_0x244957(0xb78)]=_0x1dbb09,_0x46033c;},Sprite_Damage[_0x3df63e(0x655)][_0x3df63e(0xb13)]=function(_0x5743ac){const _0x43c9a3=_0x3df63e,_0x289bf0=_0x5743ac[_0x43c9a3(0x8e4)]()||_0x5743ac[_0x43c9a3(0x4d3)]();if(_0x289bf0[_0x43c9a3(0x30b)]||_0x289bf0[_0x43c9a3(0x1f7)])this[_0x43c9a3(0x18f)]=0x0,this[_0x43c9a3(0xa10)]();else{if(_0x289bf0[_0x43c9a3(0x196)])_0x43c9a3(0x677)===_0x43c9a3(0x677)?(this[_0x43c9a3(0x18f)]=_0x289bf0['hpDamage']>=0x0?0x0:0x1,this[_0x43c9a3(0x75f)](_0x289bf0[_0x43c9a3(0x237)])):(_0x307024[_0x43c9a3(0xa69)][_0x43c9a3(0x3aa)]['call'](this,_0x53109a),this['initBattlePortrait']());else _0x5743ac['isAlive']()&&_0x289bf0['mpDamage']!==0x0&&(this['_colorType']=_0x289bf0[_0x43c9a3(0x951)]>=0x0?0x2:0x3,this[_0x43c9a3(0x75f)](_0x289bf0[_0x43c9a3(0x951)]));}_0x289bf0[_0x43c9a3(0x8da)]&&('LMDJR'===_0x43c9a3(0x777)?(this[_0x43c9a3(0x370)]['x']=this['x'],this[_0x43c9a3(0x370)]['y']=this['y']):this[_0x43c9a3(0x4a4)]());},Sprite_Damage[_0x3df63e(0x655)][_0x3df63e(0x265)]=function(_0x40685b){},Sprite_Damage['prototype'][_0x3df63e(0x75f)]=function(_0x1c2d45){const _0x143e49=_0x3df63e;let _0x103900=this[_0x143e49(0x724)](_0x1c2d45);const _0x1dd094=this['fontSize'](),_0x21a83f=Math['floor'](_0x1dd094*0.75);for(let _0x1e6a01=0x0;_0x1e6a01<_0x103900[_0x143e49(0xb02)];_0x1e6a01++){if(_0x143e49(0x761)===_0x143e49(0x761)){const _0x19ef27=this[_0x143e49(0x3af)](_0x21a83f,_0x1dd094);_0x19ef27[_0x143e49(0xa39)][_0x143e49(0x733)](_0x103900[_0x1e6a01],0x0,0x0,_0x21a83f,_0x1dd094,_0x143e49(0x7b6)),_0x19ef27['x']=(_0x1e6a01-(_0x103900[_0x143e49(0xb02)]-0x1)/0x2)*_0x21a83f,_0x19ef27['dy']=-_0x1e6a01;}else{this[_0x143e49(0x2c6)]()[_0x143e49(0x699)](_0x1e42fb);if(_0x3ef9a3[_0x143e49(0x6e7)]())_0x24d966['scale']['x']=-0x1;}}},Sprite_Damage['prototype'][_0x3df63e(0x724)]=function(_0x40fe37){const _0x59463d=_0x3df63e;let _0x13fd01=Math['abs'](_0x40fe37)[_0x59463d(0x315)]();this[_0x59463d(0x8c6)]()&&(_0x13fd01=VisuMZ[_0x59463d(0x4be)](_0x13fd01));const _0x258dcb=VisuMZ[_0x59463d(0xa69)]['Settings'][_0x59463d(0x488)];let _0x2f8ef1='',_0xc83575='';switch(this[_0x59463d(0x18f)]){case 0x0:_0x2f8ef1=_0x258dcb[_0x59463d(0x5b4)]||_0x59463d(0x35a),_0xc83575=TextManager['hp'];if(_0x40fe37===0x0)_0x2f8ef1='%1';break;case 0x1:_0x2f8ef1=_0x258dcb['hpHealingFmt']||_0x59463d(0x680),_0xc83575=TextManager['hp'];break;case 0x2:_0x2f8ef1=_0x258dcb[_0x59463d(0xba9)]||_0x59463d(0x358),_0xc83575=TextManager['mp'];break;case 0x3:_0x2f8ef1=_0x258dcb[_0x59463d(0xabc)]||_0x59463d(0x2ba),_0xc83575=TextManager['mp'];break;}return _0x2f8ef1[_0x59463d(0x4f8)](_0x13fd01,_0xc83575)[_0x59463d(0x9d2)]();},Sprite_Damage[_0x3df63e(0x655)][_0x3df63e(0x8c6)]=function(){const _0x5e8127=_0x3df63e;if(Imported[_0x5e8127(0x1ec)])return VisuMZ[_0x5e8127(0x67e)][_0x5e8127(0x5eb)][_0x5e8127(0x8cd)][_0x5e8127(0x613)];else{if(_0x5e8127(0x894)===_0x5e8127(0x894))return![];else this['_borderPortraitSprite']['x']=0x0,this[_0x5e8127(0x2c9)]=_0x3aaf45[_0x5e8127(0x3dd)](_0x59a201[_0x5e8127(0x366)]/0x2);}},Sprite_Damage[_0x3df63e(0x655)][_0x3df63e(0x4a4)]=function(){const _0x58e4c5=_0x3df63e,_0x29575e=VisuMZ['BattleCore']['Settings'][_0x58e4c5(0x488)];this[_0x58e4c5(0x58c)]=_0x29575e[_0x58e4c5(0xa18)][_0x58e4c5(0x3f6)](0x0),this[_0x58e4c5(0x9df)]=_0x29575e[_0x58e4c5(0x9e6)];},Sprite_Damage['prototype'][_0x3df63e(0x868)]=function(_0x17a088,_0x537277){const _0x33616f=_0x3df63e;this[_0x33616f(0x58c)]=_0x537277[_0x33616f(0xa1e)]||[0x0,0x0,0x0,0x0],this[_0x33616f(0x58c)]=JsonEx['makeDeepCopy'](this[_0x33616f(0x58c)]),this[_0x33616f(0x9df)]=_0x537277[_0x33616f(0x2b1)]||0x0;const _0x3e2f07=this[_0x33616f(0x444)](),_0x54a216=Math[_0x33616f(0x49d)](_0x3e2f07*0x1e),_0x52a31c=this[_0x33616f(0x3af)](_0x54a216,_0x3e2f07);_0x52a31c[_0x33616f(0xa39)][_0x33616f(0xab4)]=ColorManager[_0x33616f(0x34c)](_0x537277['textColor']),_0x52a31c[_0x33616f(0xa39)]['drawText'](_0x17a088,0x0,0x0,_0x54a216,_0x3e2f07,_0x33616f(0x7b6)),_0x52a31c['dy']=0x0;},Sprite_Damage[_0x3df63e(0x655)][_0x3df63e(0x78f)]=function(_0x42aa75,_0x12d240,_0x4d40cf){const _0x2b3208=_0x3df63e,_0x4b2f2b=Math[_0x2b3208(0x7a7)](this[_0x2b3208(0x444)](),ImageManager[_0x2b3208(0xa45)]),_0x144595=Math[_0x2b3208(0x49d)](_0x4b2f2b*0x1e),_0x45d9b6=this[_0x2b3208(0x3af)](_0x144595,_0x4b2f2b),_0x112ad9=ImageManager[_0x2b3208(0x962)]/0x2,_0x206c04=_0x45d9b6['bitmap'][_0x2b3208(0x5b7)](_0x12d240+'\x20');_0x45d9b6[_0x2b3208(0xa39)]['textColor']=ColorManager[_0x2b3208(0x34c)](_0x4d40cf[_0x2b3208(0xab4)]),_0x45d9b6[_0x2b3208(0xa39)][_0x2b3208(0x733)](_0x12d240,_0x112ad9,0x0,_0x144595-_0x112ad9,_0x4b2f2b,_0x2b3208(0x7b6));const _0x347eac=Math[_0x2b3208(0x76b)]((_0x4b2f2b-ImageManager[_0x2b3208(0xa45)])/0x2),_0x5820c9=_0x144595/0x2-ImageManager[_0x2b3208(0x962)]-_0x206c04/0x2+_0x112ad9/0x2,_0x3b61a3=ImageManager[_0x2b3208(0x9d0)]('IconSet'),_0x1f40b7=ImageManager[_0x2b3208(0x962)],_0x180fcd=ImageManager[_0x2b3208(0xa45)],_0x386250=_0x42aa75%0x10*_0x1f40b7,_0x569847=Math['floor'](_0x42aa75/0x10)*_0x180fcd;_0x45d9b6[_0x2b3208(0xa39)]['blt'](_0x3b61a3,_0x386250,_0x569847,_0x1f40b7,_0x180fcd,_0x5820c9,_0x347eac),this[_0x2b3208(0x58c)]=_0x4d40cf[_0x2b3208(0xa1e)]||[0x0,0x0,0x0,0x0],this[_0x2b3208(0x58c)]=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x2b3208(0x9df)]=_0x4d40cf[_0x2b3208(0x2b1)]||0x0,_0x45d9b6['dy']=0x0;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x211)]=Sprite_StateIcon[_0x3df63e(0x655)][_0x3df63e(0x636)],Sprite_StateIcon[_0x3df63e(0x655)]['updateFrame']=function(){const _0x1c5934=_0x3df63e;VisuMZ['BattleCore'][_0x1c5934(0x211)]['call'](this),this['opacity']=this[_0x1c5934(0x328)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x3df63e(0x26c)]=Sprite_Weapon[_0x3df63e(0x655)]['loadBitmap'],Sprite_Weapon[_0x3df63e(0x655)]['loadBitmap']=function(){const _0x300773=_0x3df63e;VisuMZ['BattleCore'][_0x300773(0x26c)][_0x300773(0x5d9)](this),this[_0x300773(0xa39)]&&(_0x300773(0x683)!==_0x300773(0x163)?this[_0x300773(0xa39)]['smooth']=VisuMZ[_0x300773(0xa69)][_0x300773(0x5eb)][_0x300773(0x4d0)][_0x300773(0xa11)]:this['startMotion'](_0x300773(0x881)));};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x3df63e(0x655)]=Object[_0x3df63e(0x162)](Sprite_Gauge[_0x3df63e(0x655)]),Sprite_HpGauge[_0x3df63e(0x655)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x3df63e(0x655)]['initialize']=function(){const _0x5e9086=_0x3df63e;Sprite_Gauge[_0x5e9086(0x655)][_0x5e9086(0xb26)]['call'](this);},Sprite_HpGauge[_0x3df63e(0x655)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype']['redraw']=function(){const _0x510aab=_0x3df63e;this[_0x510aab(0xa39)][_0x510aab(0x6be)]();const _0x248711=this['currentValue']();if(!isNaN(_0x248711)){if(_0x510aab(0x39d)!==_0x510aab(0x39d)){if(this[_0x510aab(0xb6b)]()===_0x510aab(0x84a))return this[_0x510aab(0x76f)]();else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():_0x5f0398[_0x510aab(0xa69)][_0x510aab(0x928)]['call'](this);}else this[_0x510aab(0x5c8)]();}};function Sprite_EnemyName(){const _0x5e271b=_0x3df63e;this[_0x5e271b(0xb26)](...arguments);}Sprite_EnemyName[_0x3df63e(0x655)]=Object['create'](Sprite_Name[_0x3df63e(0x655)]),Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x1da)]=Sprite_EnemyName,Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(){const _0x5e5e8a=_0x3df63e;Sprite_Name[_0x5e5e8a(0x655)][_0x5e5e8a(0xb26)][_0x5e5e8a(0x5d9)](this),this[_0x5e5e8a(0x903)]();},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x9a5)]=function(){const _0xc5f408=_0x3df63e;Sprite_Name[_0xc5f408(0x655)][_0xc5f408(0x9a5)]['call'](this),this['opacity']=0x0,this[_0xc5f408(0x26b)]=null,this['anchor']['x']=0.5,this[_0xc5f408(0x1dd)]['y']=0x0;},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x903)]=function(){const _0x25d444=_0x3df63e;VisuMZ[_0x25d444(0xa69)][_0x25d444(0x5eb)][_0x25d444(0x580)][_0x25d444(0x4cb)]&&(this[_0x25d444(0x7e7)]=new Sprite_StateIcon(),this[_0x25d444(0x699)](this[_0x25d444(0x7e7)]));},Sprite_EnemyName['prototype'][_0x3df63e(0x7ec)]=function(){const _0x100f3d=_0x3df63e;return Graphics[_0x100f3d(0x8b9)];},Sprite_EnemyName['prototype']['bitmapHeight']=function(){const _0x3812d0=_0x3df63e;return this[_0x3812d0(0x2cf)]=this['_lineHeight']||Window_Base[_0x3812d0(0x655)][_0x3812d0(0x9d3)]()||0x24,this[_0x3812d0(0x2cf)]*0x4;},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x444)]=function(){const _0x421519=_0x3df63e;return VisuMZ[_0x421519(0xa69)]['Settings'][_0x421519(0x580)][_0x421519(0xb70)]||$gameSystem[_0x421519(0x52e)]();},Sprite_EnemyName['prototype'][_0x3df63e(0x6e3)]=function(_0x1ecaad){this['_linkedSprite']=_0x1ecaad;},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0x54d47c=_0x3df63e;Sprite_Name['prototype'][_0x54d47c(0x54e)][_0x54d47c(0x5d9)](this),this[_0x54d47c(0x297)](),this['updatePosition'](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName['prototype']['redraw']=function(){const _0x20aa0b=_0x3df63e;this[_0x20aa0b(0x1cb)]=undefined;const _0x3da71b=this[_0x20aa0b(0xae2)](),_0x2e272f=this['bitmapWidth'](),_0x2633bc=Window_Base[_0x20aa0b(0x655)][_0x20aa0b(0x9d3)]();this[_0x20aa0b(0x23d)](),this[_0x20aa0b(0xa39)][_0x20aa0b(0x6be)](),this[_0x20aa0b(0xa39)][_0x20aa0b(0x733)](_0x3da71b,0x0,0x0,_0x2e272f,_0x2633bc,_0x20aa0b(0x7b6));},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x297)]=function(){const _0x451984=_0x3df63e;if(!this[_0x451984(0x26b)])return;this[_0x451984(0x957)]!==this[_0x451984(0x26b)][_0x451984(0x957)]&&(_0x451984(0x71e)===_0x451984(0x363)?(_0x19c9a8[_0x451984(0xa69)]['Scene_Battle_onEnemyOk'][_0x451984(0x5d9)](this),this[_0x451984(0xa72)]()):this[_0x451984(0x265)](this[_0x451984(0x26b)][_0x451984(0x957)]));},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x3f3)]=function(){const _0x558fc0=_0x3df63e;if(!this[_0x558fc0(0x26b)])return;this['_lineHeight']=this[_0x558fc0(0x2cf)]||Window_Base[_0x558fc0(0x655)][_0x558fc0(0x9d3)](),this['x']=this['_linkedSprite'][_0x558fc0(0x924)],this['y']=this[_0x558fc0(0x26b)]['_baseY']-this['_lineHeight']*0.5;const _0x4dbfbf=VisuMZ[_0x558fc0(0xa69)]['Settings'][_0x558fc0(0x580)];this['x']+=_0x4dbfbf[_0x558fc0(0x4df)]||0x0,this['y']+=_0x4dbfbf['NameOffsetY']||0x0;},Sprite_EnemyName[_0x3df63e(0x655)]['updateAttachedSprites']=function(){const _0x7ccaeb=_0x3df63e;this[_0x7ccaeb(0x4c9)]();},Sprite_EnemyName['prototype']['updateStateIconSprite']=function(){const _0x43b910=_0x3df63e;if(!this[_0x43b910(0x7e7)])return;this[_0x43b910(0x957)]!==this[_0x43b910(0x7e7)][_0x43b910(0x957)]&&this[_0x43b910(0x7e7)][_0x43b910(0x265)](this[_0x43b910(0x957)]);const _0x275bc7=this[_0x43b910(0x5ca)]();this[_0x43b910(0x2cf)]=this['_lineHeight']||Window_Base[_0x43b910(0x655)][_0x43b910(0x9d3)](),this[_0x43b910(0x7e7)]['x']=Math[_0x43b910(0x76b)]((_0x275bc7+ImageManager[_0x43b910(0x962)])/0x2)+0x8,this[_0x43b910(0x7e7)]['y']=this[_0x43b910(0x2cf)]/0x2;const _0x414eb1=VisuMZ[_0x43b910(0xa69)][_0x43b910(0x5eb)]['Enemy'];this[_0x43b910(0x7e7)]['x']+=_0x414eb1[_0x43b910(0x423)]||0x0,this['_stateIconSprite']['y']+=_0x414eb1[_0x43b910(0x977)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x491084=_0x3df63e,_0x2111ae=this[_0x491084(0x236)]();if(_0x2111ae&&this[_0x491084(0x7a6)]<0xff)this[_0x491084(0x7a6)]+=0x10;else!_0x2111ae&&this['opacity']>0x0&&(this[_0x491084(0x7a6)]-=0x10);},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x236)]=function(){const _0x151223=_0x3df63e;if(this[_0x151223(0x996)]())return![];else{if(!this[_0x151223(0x957)])return![];else{if(this['_battler'][_0x151223(0x9a0)]())return![];else{if(!this['_battler'][_0x151223(0xaa1)]())return![];else{if(this[_0x151223(0x540)]())return'RNdvB'!==_0x151223(0xb3f)?_0x289bf2[_0x151223(0xa69)][_0x151223(0x5eb)]['Actor'][_0x151223(0x7c3)]||![]:!![];else{if(this[_0x151223(0x825)]())return!![];else{if(this[_0x151223(0x6c0)]())return!![];else{if(this['opacity']>0x0){if(_0x151223(0x973)!==_0x151223(0x973)){const _0x3644ff=_0x9f55de[_0x151223(0x8e2)][_0x151223(0x802)];if(_0x3644ff)_0x3644ff['refreshActorPortrait'](this);}else return![];}}}}}}}}},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x996)]=function(){const _0x1387d8=_0x3df63e;return VisuMZ['BattleCore'][_0x1387d8(0x5eb)][_0x1387d8(0x580)][_0x1387d8(0x812)];},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x540)]=function(){return![];},Sprite_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x825)]=function(){const _0x1a41ca=_0x3df63e;return VisuMZ[_0x1a41ca(0xa69)][_0x1a41ca(0x5eb)][_0x1a41ca(0x580)][_0x1a41ca(0x5f1)];},Sprite_EnemyName[_0x3df63e(0x655)]['isIncludedInEnemyWindow']=function(){const _0x20f76b=_0x3df63e;if(VisuMZ[_0x20f76b(0xa69)]['Settings'][_0x20f76b(0x580)][_0x20f76b(0x673)])return this[_0x20f76b(0x957)][_0x20f76b(0x736)]();else{if('tsvhK'==='tsvhK')return SceneManager[_0x20f76b(0x8e2)][_0x20f76b(0x588)]&&SceneManager[_0x20f76b(0x8e2)][_0x20f76b(0x588)][_0x20f76b(0xa9c)]&&SceneManager[_0x20f76b(0x8e2)][_0x20f76b(0x588)]['_enemies'][_0x20f76b(0xa22)](this[_0x20f76b(0x957)]);else _0x20757b=!![];}},Sprite_EnemyName[_0x3df63e(0x655)]['textWidth']=function(){const _0x21aaad=_0x3df63e;if(!this['_battler'])return 0x0;if(this[_0x21aaad(0x1cb)])return this[_0x21aaad(0x1cb)];const _0x24e4d9=this[_0x21aaad(0xae2)]();return this[_0x21aaad(0x23d)](),this[_0x21aaad(0x1cb)]=this[_0x21aaad(0xa39)]['measureTextWidth'](_0x24e4d9)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x58d)]=Sprite_Battleback[_0x3df63e(0x655)][_0x3df63e(0x36d)],Sprite_Battleback['prototype'][_0x3df63e(0x36d)]=function(){const _0x3aff91=_0x3df63e,_0x202c29=VisuMZ[_0x3aff91(0xa69)]['Settings']['Battleback'];if(!_0x202c29){if(_0x3aff91(0xad2)==='lSEfD')return VisuMZ['BattleCore'][_0x3aff91(0x58d)][_0x3aff91(0x5d9)](this);else{if(!_0x2e2c0c[_0x3aff91(0x8e3)]())return;this[_0x3aff91(0x82e)]=_0xbbbf4a;const _0x959a9b=this['battler']();if(_0x959a9b)_0x959a9b['updateFlip']();}}const _0xfb1bbf=String(_0x202c29[_0x3aff91(0x19f)])||'MZ';switch(_0xfb1bbf){case'MZ':VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x3aff91(0x5d9)](this);break;case'1:1':this[_0x3aff91(0x2b4)]();break;case _0x3aff91(0x7d2):this[_0x3aff91(0x1e3)]();break;case _0x3aff91(0x3b5):this[_0x3aff91(0x28b)]();break;case _0x3aff91(0x5ec):this[_0x3aff91(0x1d0)]();break;}},Sprite_Battleback['prototype'][_0x3df63e(0x2b4)]=function(){const _0x54099e=_0x3df63e;this['width']=Graphics[_0x54099e(0x366)],this[_0x54099e(0xb78)]=Graphics['height'];const _0x43dc77=0x1;this[_0x54099e(0x5c3)]['x']=_0x43dc77,this['scale']['y']=_0x43dc77,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x3df63e(0x655)][_0x3df63e(0x1e3)]=function(){const _0x568968=_0x3df63e;this[_0x568968(0x366)]=Graphics[_0x568968(0x366)],this['height']=Graphics['height'];const _0x3aaccd=this[_0x568968(0x366)]/this[_0x568968(0xa39)][_0x568968(0x366)],_0x47a2a4=this[_0x568968(0xb78)]/this['bitmap']['height'],_0x36cfa2=Math[_0x568968(0x7a7)](_0x3aaccd,_0x47a2a4);this['scale']['x']=_0x36cfa2,this[_0x568968(0x5c3)]['y']=_0x36cfa2,this['x']=(Graphics[_0x568968(0x366)]-this[_0x568968(0x366)])/0x2,this['y']=Graphics[_0x568968(0xb78)]-this[_0x568968(0xb78)];},Sprite_Battleback[_0x3df63e(0x655)][_0x3df63e(0x28b)]=function(){const _0x1616be=_0x3df63e;this[_0x1616be(0x366)]=Graphics[_0x1616be(0x366)],this[_0x1616be(0xb78)]=Graphics[_0x1616be(0xb78)];const _0x8dceac=Math[_0x1616be(0x46d)](0x1,this[_0x1616be(0x366)]/this[_0x1616be(0xa39)]['width']),_0x39b61b=Math[_0x1616be(0x46d)](0x1,this[_0x1616be(0xb78)]/this['bitmap']['height']),_0xc60881=Math[_0x1616be(0x7a7)](_0x8dceac,_0x39b61b);this['scale']['x']=_0xc60881,this[_0x1616be(0x5c3)]['y']=_0xc60881,this['x']=(Graphics[_0x1616be(0x366)]-this[_0x1616be(0x366)])/0x2,this['y']=Graphics[_0x1616be(0xb78)]-this['height'];},Sprite_Battleback['prototype'][_0x3df63e(0x1d0)]=function(){const _0x2bd7ec=_0x3df63e;this[_0x2bd7ec(0x366)]=Graphics[_0x2bd7ec(0x366)],this['height']=Graphics[_0x2bd7ec(0xb78)];const _0x17e8d3=Math[_0x2bd7ec(0x7a7)](0x1,this[_0x2bd7ec(0x366)]/this[_0x2bd7ec(0xa39)][_0x2bd7ec(0x366)]),_0x30b8df=Math[_0x2bd7ec(0x7a7)](0x1,this[_0x2bd7ec(0xb78)]/this['bitmap']['height']),_0x2124f7=Math[_0x2bd7ec(0x7a7)](_0x17e8d3,_0x30b8df);this['scale']['x']=_0x2124f7,this[_0x2bd7ec(0x5c3)]['y']=_0x2124f7,this['x']=(Graphics[_0x2bd7ec(0x366)]-this[_0x2bd7ec(0x366)])/0x2,this['y']=Graphics['height']-this[_0x2bd7ec(0xb78)];},Spriteset_Battle['prototype'][_0x3df63e(0xad4)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype'][_0x3df63e(0x6e6)]=function(){return 0x0;},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x512)]=function(){return 0x0;},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x94f)]=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x7dd)]=function(){const _0x4464aa=_0x3df63e;VisuMZ[_0x4464aa(0xa69)]['Spriteset_Battle_createLowerLayer'][_0x4464aa(0x5d9)](this),this[_0x4464aa(0x837)](),this[_0x4464aa(0x239)](),this[_0x4464aa(0x22a)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x84c)]=Spriteset_Battle[_0x3df63e(0x655)]['update'],Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0x3630a1=_0x3df63e;VisuMZ[_0x3630a1(0xa69)]['Spriteset_Battle_update'][_0x3630a1(0x5d9)](this),this['updateWeather']();},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x837)]=function(){const _0x3eedbe=_0x3df63e;this['_weather']=new Weather(),this['_battleField'][_0x3eedbe(0x699)](this[_0x3eedbe(0x24c)]);},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x804)]=function(){const _0x475a09=_0x3df63e;this[_0x475a09(0x24c)][_0x475a09(0x3ad)]=$gameScreen[_0x475a09(0x4a5)](),this['_weather'][_0x475a09(0xa14)]=$gameScreen[_0x475a09(0xb92)]();},Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x2d5)]=function(_0x43d242){const _0x3e4437=_0x3df63e;$gameScreen[_0x3e4437(0x731)](_0x43d242[0x0],_0x43d242[0x1],_0x43d242[0x2]);if(_0x43d242[0x3])this[_0x3e4437(0x779)](_0x43d242[0x2]);return!![];},VisuMZ[_0x3df63e(0xa69)]['Game_Interpreter_command283']=Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x6b5)],Game_Interpreter[_0x3df63e(0x655)][_0x3df63e(0x6b5)]=function(_0x1ad18f){const _0xb07cf3=_0x3df63e;if(SceneManager[_0xb07cf3(0x2a9)]()){if(_0xb07cf3(0xaff)!==_0xb07cf3(0xaff)){if(this['isDead']()&&this[_0xb07cf3(0x992)]())return![];}else return SceneManager[_0xb07cf3(0x8e2)][_0xb07cf3(0x449)]['changeBattlebacks'](_0x1ad18f[0x0],_0x1ad18f[0x1]),!![];}else{if(_0xb07cf3(0x58f)===_0xb07cf3(0x4b2)){const _0x53086e=new _0x45efca(_0x45e1d9);this[_0xb07cf3(0x3e1)][_0xb07cf3(0x699)](_0x53086e);}else return VisuMZ[_0xb07cf3(0xa69)][_0xb07cf3(0x83a)][_0xb07cf3(0x5d9)](this,_0x1ad18f);}},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x807)]=function(_0x307845,_0x1027b6){const _0x13945e=_0x3df63e;_0x307845[_0x13945e(0xa39)]=_0x1027b6;},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x5bf)]=function(_0x4734f0,_0x99af88){const _0x43b8ee=_0x3df63e;_0x4734f0=_0x4734f0||'',_0x99af88=_0x99af88||'';_0x4734f0===''&&_0x99af88===''&&(_0x4734f0=this[_0x43b8ee(0x569)][_0x43b8ee(0x890)](),_0x99af88=this[_0x43b8ee(0x56f)]['battleback2Name']());const _0x2ddcc8=ImageManager['loadBattleback1'](_0x4734f0),_0x5d97a8=ImageManager['loadBattleback2'](_0x99af88);_0x2ddcc8['addLoadListener'](this[_0x43b8ee(0x652)]['bind'](this,this[_0x43b8ee(0x569)],this[_0x43b8ee(0x56f)],_0x2ddcc8,_0x5d97a8));},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x652)]=function(_0x25ecf0,_0x215d31,_0xbc2a4a,_0x3c0455){const _0x4e02b2=_0x3df63e;_0x3c0455[_0x4e02b2(0x92a)](this[_0x4e02b2(0xbc8)][_0x4e02b2(0x96b)](this,_0x25ecf0,_0x215d31,_0xbc2a4a,_0x3c0455));},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0xbc8)]=function(_0x347f1f,_0x5e4a1c,_0x34687a,_0x4f9568){const _0x339d7a=_0x3df63e;_0x347f1f[_0x339d7a(0xa39)]=_0x34687a,_0x5e4a1c[_0x339d7a(0xa39)]=_0x4f9568,_0x347f1f[_0x339d7a(0x36d)](),_0x5e4a1c[_0x339d7a(0x36d)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x76e)]=Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x312)],Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x312)]=function(){const _0x3c9ada=_0x3df63e;VisuMZ[_0x3c9ada(0xa69)][_0x3c9ada(0x76e)][_0x3c9ada(0x5d9)](this),this[_0x3c9ada(0xa08)]();},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0xa08)]=function(){const _0x24d8dc=_0x3df63e;this['createBattleFieldContainer'](),this[_0x24d8dc(0xbd4)](),this[_0x24d8dc(0x81e)](),this[_0x24d8dc(0x974)]();},Spriteset_Battle['prototype'][_0x3df63e(0x665)]=function(){const _0x5ab6f0=_0x3df63e;this[_0x5ab6f0(0x60e)]=new Sprite(),this['_battleField']['addChild'](this[_0x5ab6f0(0x60e)]);},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0xbd4)]=function(){const _0x513fb2=_0x3df63e;this[_0x513fb2(0xafc)]=new Sprite(),this[_0x513fb2(0x9ee)]['addChild'](this[_0x513fb2(0xafc)]);},Spriteset_Battle['prototype'][_0x3df63e(0x81e)]=function(){const _0x203912=_0x3df63e;this[_0x203912(0x8ad)]=new Sprite(),this[_0x203912(0x8ad)]['x']=this[_0x203912(0x9ee)]['x'],this[_0x203912(0x8ad)]['y']=this[_0x203912(0x9ee)]['y'],this[_0x203912(0x699)](this['_damageContainer']);},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x974)]=function(){const _0x359d0e=_0x3df63e;if(!this['isFlipped']())return;this[_0x359d0e(0x60e)][_0x359d0e(0x5c3)]['x']=-0x1,this[_0x359d0e(0x60e)]['x']=this[_0x359d0e(0x9ee)][_0x359d0e(0x366)],this[_0x359d0e(0xafc)][_0x359d0e(0x5c3)]['x']=-0x1,this[_0x359d0e(0xafc)]['x']=this[_0x359d0e(0x9ee)][_0x359d0e(0x366)],this['_damageContainer'][_0x359d0e(0x5c3)]['x']=-0x1,this[_0x359d0e(0x8ad)]['x']=this[_0x359d0e(0x9ee)]['x']+this[_0x359d0e(0x9ee)]['width'];},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x7bd)]=function(){const _0x1dcddb=_0x3df63e;if(Imported[_0x1dcddb(0x1ec)]&&this[_0x1dcddb(0x341)]()){if(_0x1dcddb(0x614)===_0x1dcddb(0x52b))return _0x1f12b7['getInputButtonString']('cancel');else this[_0x1dcddb(0x7da)]();}const _0x3fa10e=$gameTroop['members'](),_0x5b8f89=[];for(const _0x2ed1f1 of _0x3fa10e){_0x5b8f89['push'](new Sprite_Enemy(_0x2ed1f1));}_0x5b8f89[_0x1dcddb(0x89f)](this[_0x1dcddb(0xab9)][_0x1dcddb(0x96b)](this));for(const _0xb77dc6 of _0x5b8f89){_0x1dcddb(0x46a)!=='bLSdY'?this[_0x1dcddb(0x3e4)][_0x1dcddb(0x7ad)]=![]:this['_battlerContainer'][_0x1dcddb(0x699)](_0xb77dc6);}this[_0x1dcddb(0x906)]=_0x5b8f89;},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x824)]=function(){const _0x51c881=_0x3df63e;this[_0x51c881(0x5a6)]=[];for(let _0x2f83c6=0x0;_0x2f83c6<$gameParty[_0x51c881(0x49b)]();_0x2f83c6++){if(_0x51c881(0xab3)!==_0x51c881(0xab3))_0x41a2d7[_0x51c881(0xa69)][_0x51c881(0x979)][_0x51c881(0x5d9)](this),_0x2296ef[_0x51c881(0xb35)]();else{const _0x19ad93=$gameParty[_0x51c881(0x9c3)]()[_0x2f83c6],_0x21aa39=new Sprite_Actor();_0x21aa39[_0x51c881(0x76a)](_0x19ad93),_0x21aa39[_0x51c881(0x36c)](_0x19ad93),_0x21aa39[_0x51c881(0x54e)](),this['_actorSprites'][_0x51c881(0x9cd)](_0x21aa39),this[_0x51c881(0x60e)]['addChild'](_0x21aa39);}}},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0xaf0)]=function(_0x52c08f,_0x2b4d87,_0x1e21c2,_0x56eb8d){const _0xd742e1=_0x3df63e,_0x47d49a=this[_0xd742e1(0x470)](_0x2b4d87),_0x16bc89=new(_0x47d49a?Sprite_AnimationMV:Sprite_Animation)(),_0x174590=this[_0xd742e1(0xb4e)](_0x52c08f);if(this[_0xd742e1(0x521)](_0x52c08f[0x0])){if(_0xd742e1(0x80d)===_0xd742e1(0x8fb)){const _0x1b4790=this[_0xd742e1(0x277)](this[_0xd742e1(0xb32)]());let _0x292578=this[_0xd742e1(0x947)](this[_0xd742e1(0xb32)]());_0x292578=_0x292578['replace'](/\\I\[(\d+)\]/gi,''),_0x672f3b[_0xd742e1(0x692)](),this['commandNameWindowDrawBackground'](_0x292578,_0x1b4790),this['commandNameWindowDrawText'](_0x292578,_0x1b4790),this['commandNameWindowCenter'](_0x292578,_0x1b4790);}else _0x1e21c2=!_0x1e21c2;}_0x16bc89[_0xd742e1(0x7b8)]=_0x52c08f,_0x16bc89[_0xd742e1(0x265)](_0x174590,_0x2b4d87,_0x1e21c2,_0x56eb8d),this[_0xd742e1(0x8f5)](_0x16bc89);},Spriteset_Battle['prototype'][_0x3df63e(0x8f5)]=function(_0x39c887){const _0x44f0e2=_0x3df63e;this[_0x44f0e2(0x936)](_0x39c887)?this[_0x44f0e2(0xa4e)]()[_0x44f0e2(0x699)](_0x39c887):this['_animationContainer']['addChild'](_0x39c887),this[_0x44f0e2(0x51a)][_0x44f0e2(0x9cd)](_0x39c887);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x441850){const _0x3f8db5=_0x3df63e;if(!_0x441850)return![];if(!_0x441850[_0x3f8db5(0x8be)])return![];if(_0x441850[_0x3f8db5(0x8be)][_0x3f8db5(0x40a)]!==0x0)return![];if(!_0x441850[_0x3f8db5(0x7b8)][0x0])return![];if(_0x441850['targetObjects'][0x0][_0x3f8db5(0x5c6)]&&!_0x441850[_0x3f8db5(0x7b8)][0x0]['isActor']())return![];if($gameSystem[_0x3f8db5(0x8e3)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];return Window_BattleStatus[_0x3f8db5(0x655)][_0x3f8db5(0xb6b)]()===_0x3f8db5(0xbc2);},Spriteset_Battle['prototype'][_0x3df63e(0xa4e)]=function(){const _0x1774bc=_0x3df63e;if(!SceneManager[_0x1774bc(0x8e2)])return;if(!SceneManager[_0x1774bc(0x8e2)]['_statusWindow'])return;if(!SceneManager[_0x1774bc(0x8e2)][_0x1774bc(0x802)]['_effectsContainer'])return;return SceneManager[_0x1774bc(0x8e2)][_0x1774bc(0x802)][_0x1774bc(0x370)];},Spriteset_Battle['prototype'][_0x3df63e(0x261)]=function(_0x5214ff){const _0x56be98=_0x3df63e;this['removeAnimationFromContainer'](_0x5214ff);for(const _0x380522 of _0x5214ff['targetObjects']){_0x380522[_0x56be98(0x1e7)]&&_0x380522[_0x56be98(0x1e7)]();}_0x5214ff[_0x56be98(0x190)]();},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x81b)]=function(_0x1d580b){const _0x404a9e=_0x3df63e;this[_0x404a9e(0x51a)]['remove'](_0x1d580b),this[_0x404a9e(0x936)](_0x1d580b)?this[_0x404a9e(0xa4e)]()[_0x404a9e(0x541)](_0x1d580b):this[_0x404a9e(0xafc)][_0x404a9e(0x541)](_0x1d580b);},VisuMZ['BattleCore'][_0x3df63e(0x95c)]=Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x682)],Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x682)]=function(){const _0x160cda=_0x3df63e;VisuMZ[_0x160cda(0xa69)][_0x160cda(0x95c)]['call'](this),this[_0x160cda(0x1aa)]();},Spriteset_Battle['prototype'][_0x3df63e(0x1aa)]=function(){const _0x332a97=_0x3df63e;this[_0x332a97(0x60e)]['children'][_0x332a97(0x89f)](this[_0x332a97(0x8d5)][_0x332a97(0x96b)](this)),this[_0x332a97(0x9c7)]();},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x8d5)]=function(_0x5565a2,_0x1286fb){const _0x44a4d7=_0x3df63e;if(VisuMZ['BattleCore'][_0x44a4d7(0x5eb)]['Actor'][_0x44a4d7(0x220)]){if(_0x5565a2[_0x44a4d7(0x957)]&&_0x1286fb[_0x44a4d7(0x957)]){if(_0x44a4d7(0x77c)!==_0x44a4d7(0x357)){if(_0x5565a2[_0x44a4d7(0x957)][_0x44a4d7(0x5c6)]()&&_0x1286fb[_0x44a4d7(0x957)]['isEnemy']())return _0x44a4d7(0x48c)===_0x44a4d7(0x48c)?0x1:0x1;else{if(_0x1286fb[_0x44a4d7(0x957)][_0x44a4d7(0x5c6)]()&&_0x5565a2[_0x44a4d7(0x957)]['isEnemy']())return-0x1;}}else _0x4c3af3[_0x44a4d7(0x78b)]=_0x56db70['max'](0x1,_0x2b0527(_0xd7fdf5['$1']));}}return _0x5565a2[_0x44a4d7(0x560)]!==_0x1286fb[_0x44a4d7(0x560)]?_0x5565a2[_0x44a4d7(0x560)]-_0x1286fb['_baseY']:_0x1286fb[_0x44a4d7(0x72c)]-_0x5565a2[_0x44a4d7(0x72c)];},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x9c7)]=function(){const _0x39b2a9=_0x3df63e;if(!VisuMZ[_0x39b2a9(0xa69)][_0x39b2a9(0x5eb)][_0x39b2a9(0x4d0)][_0x39b2a9(0x66b)])return;const _0x4247fa=BattleManager[_0x39b2a9(0x8fd)];if(_0x4247fa){if(_0x39b2a9(0xb93)===_0x39b2a9(0xb93)){if(_0x4247fa[_0x39b2a9(0x5c6)]()&&!$gameSystem[_0x39b2a9(0x8e3)]())return;const _0xffbdd2=_0x4247fa[_0x39b2a9(0x669)]();if(_0xffbdd2&&_0x4247fa[_0x39b2a9(0x5c6)]())this[_0x39b2a9(0x60e)][_0x39b2a9(0x699)](_0xffbdd2);}else{const _0x299004=this['_enemy'][_0x39b2a9(0x4a3)]();this[_0x39b2a9(0xa39)]=new _0x5bfc70(_0x299004['width'],_0x299004[_0x39b2a9(0xb78)]),this['_mainSprite'][_0x39b2a9(0xa39)]=new _0x2bc15e(0x1,0x1);}}},Spriteset_Battle['prototype'][_0x3df63e(0x856)]=function(){const _0x57fc99=_0x3df63e;for(const _0x5fee90 of $gameParty[_0x57fc99(0x529)]()){if(_0x57fc99(0x771)==='BOCoV'){if(!_0x5fee90)continue;if(!_0x5fee90[_0x57fc99(0x669)]())continue;_0x5fee90['battler']()[_0x57fc99(0x80a)]=!![],_0x5fee90[_0x57fc99(0x669)]()[_0x57fc99(0xa78)]();}else this['autoBattleUseSkills']=_0x406c1c['autoBattleUseSkills'];}},Spriteset_Battle[_0x3df63e(0x655)]['createUIContainer']=function(){const _0x7a513f=_0x3df63e;this[_0x7a513f(0x2c5)]=new Sprite(),this['_battleField'][_0x7a513f(0x699)](this[_0x7a513f(0x2c5)]);},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x22a)]=function(){const _0x3cfd69=_0x3df63e;if(VisuMZ[_0x3cfd69(0xa69)][_0x3cfd69(0x5eb)]['Enemy'][_0x3cfd69(0x5a1)])return;this[_0x3cfd69(0x3e1)]=new Sprite(),this[_0x3cfd69(0x2c5)][_0x3cfd69(0x699)](this[_0x3cfd69(0x3e1)]);for(const _0x3f3343 of this[_0x3cfd69(0x906)]){const _0x34f0fb=new Sprite_EnemyName();this[_0x3cfd69(0x3e1)][_0x3cfd69(0x699)](_0x34f0fb),_0x34f0fb[_0x3cfd69(0x6e3)](_0x3f3343);}},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x87e)]=function(){return![];},Spriteset_Battle[_0x3df63e(0x655)]['isAnyoneFloating']=function(){const _0x5ac5ee=_0x3df63e;return this[_0x5ac5ee(0x879)]()[_0x5ac5ee(0x25c)](_0x24f4e2=>_0x24f4e2[_0x5ac5ee(0x663)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x5c33d8=_0x3df63e;return this[_0x5c33d8(0x879)]()[_0x5c33d8(0x25c)](_0x3b258d=>_0x3b258d[_0x5c33d8(0x1f2)]());},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x675)]=function(){const _0x4ec38b=_0x3df63e;return this[_0x4ec38b(0x879)]()['some'](_0xfed64=>_0xfed64[_0x4ec38b(0x67f)]());},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0xa9e)]=function(){const _0x15072a=_0x3df63e;return this[_0x15072a(0x879)]()[_0x15072a(0x25c)](_0x3a4f1f=>_0x3a4f1f[_0x15072a(0x1de)]());},Spriteset_Battle[_0x3df63e(0x655)][_0x3df63e(0x6aa)]=function(){const _0x54e22d=_0x3df63e;return this[_0x54e22d(0x879)]()[_0x54e22d(0x25c)](_0x52b373=>_0x52b373[_0x54e22d(0x86e)]());},Spriteset_Battle[_0x3df63e(0x655)]['isAnyoneChangingOpacity']=function(){const _0x5d5e2b=_0x3df63e;return this['battlerSprites']()[_0x5d5e2b(0x25c)](_0x4cc49f=>_0x4cc49f['isChangingOpacity']());},VisuMZ[_0x3df63e(0xa69)]['Window_ItemList_maxCols']=Window_ItemList[_0x3df63e(0x655)][_0x3df63e(0x481)],Window_ItemList['prototype'][_0x3df63e(0x481)]=function(){const _0x533317=_0x3df63e;if(SceneManager[_0x533317(0x2a9)]()){if(SceneManager['_scene'][_0x533317(0xb6b)]()==='border')return VisuMZ[_0x533317(0xa69)][_0x533317(0x5eb)]['BattleLayout'][_0x533317(0x57f)];else{if(_0x533317(0x271)!==_0x533317(0x271)){if(this[_0x533317(0xb2b)])return this[_0x533317(0xb2b)];return this[_0x533317(0xb2b)]=_0x2440f3['_scene'][_0x533317(0xb6b)](),this[_0x533317(0xb2b)];}else return VisuMZ[_0x533317(0xa69)]['Settings']['BattleLayout']['SkillItemStandardCols'];}}else{if(_0x533317(0x3cf)!=='GOVYW')return VisuMZ[_0x533317(0xa69)][_0x533317(0x8b7)][_0x533317(0x5d9)](this);else _0x599c17[_0x533317(0x655)][_0x533317(0xa0f)][_0x533317(0x5d9)](this),this[_0x533317(0x989)]();}},VisuMZ['BattleCore'][_0x3df63e(0x5a8)]=Window_SkillList['prototype'][_0x3df63e(0x481)],Window_SkillList[_0x3df63e(0x655)][_0x3df63e(0x481)]=function(){const _0x362cd7=_0x3df63e;if(SceneManager[_0x362cd7(0x2a9)]()){if('JJtyS'!==_0x362cd7(0x171)){if(SceneManager[_0x362cd7(0x8e2)][_0x362cd7(0xb6b)]()===_0x362cd7(0x84a))return _0x362cd7(0x5f4)===_0x362cd7(0xb19)?this[_0x362cd7(0x82e)]:VisuMZ[_0x362cd7(0xa69)][_0x362cd7(0x5eb)][_0x362cd7(0x742)][_0x362cd7(0x57f)];else{if(_0x362cd7(0x517)===_0x362cd7(0xa36)){if(!_0x41837f[_0x362cd7(0x2a9)]())return;_0x23d23a[_0x362cd7(0x368)](_0x17ff57,_0x26e0a1);const _0x57ac08=_0x54fb85[_0x362cd7(0x5d6)](),_0x5d789b=_0x1fbd67[_0x362cd7(0x966)];if(!_0x57ac08)return;_0x22f659[_0x362cd7(0x9ea)]++,_0x5693c9[_0x362cd7(0x905)]=_0x13f5a8['_allTargets'][_0x4bb480[_0x362cd7(0x9ea)]]||null,_0x3b9bfb[_0x362cd7(0x905)]&&_0x5d789b['toUpperCase']()[_0x362cd7(0x9d2)]()!==_0x362cd7(0x59e)&&_0x57ac08[_0x362cd7(0x2f3)]([_0x5d789b]);}else return VisuMZ[_0x362cd7(0xa69)]['Settings']['BattleLayout']['SkillItemStandardCols'];}}else _0x307711[_0x362cd7(0x827)]([this],_0x323b7a);}else return VisuMZ[_0x362cd7(0xa69)]['Window_SkillList_maxCols'][_0x362cd7(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x3e2)]=Window_Options['prototype'][_0x3df63e(0x99d)],Window_Options[_0x3df63e(0x655)][_0x3df63e(0x99d)]=function(){const _0x47f69f=_0x3df63e;VisuMZ[_0x47f69f(0xa69)][_0x47f69f(0x3e2)][_0x47f69f(0x5d9)](this),this[_0x47f69f(0xb79)](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0x3df63e(0xb79)]=function(){const _0x35e4f4=_0x3df63e;VisuMZ[_0x35e4f4(0xa69)][_0x35e4f4(0x5eb)][_0x35e4f4(0xb3c)][_0x35e4f4(0x504)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options['prototype'][_0x3df63e(0x526)]=function(){const _0x2d58f5=_0x3df63e;if(!VisuMZ['BattleCore']['Settings'][_0x2d58f5(0x9c4)][_0x2d58f5(0x557)])return;const _0x2fd038=TextManager['visualHpGauge'],_0xd13760='visualHpGauge';this[_0x2d58f5(0x95a)](_0x2fd038,_0xd13760);},Window_Options['prototype'][_0x3df63e(0x4dd)]=function(){const _0x2af5ff=_0x3df63e,_0x4d441a=TextManager[_0x2af5ff(0xa6a)],_0x397d05=_0x2af5ff(0x4bf);this[_0x2af5ff(0x95a)](_0x4d441a,_0x397d05);},Window_Options[_0x3df63e(0x655)][_0x3df63e(0xaf8)]=function(){const _0x5d4571=_0x3df63e,_0x5d1500=TextManager['autoBattleStyle'],_0x389a05=_0x5d4571(0xb64);this['addCommand'](_0x5d1500,_0x389a05);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x54c)]=Window_Options[_0x3df63e(0x655)][_0x3df63e(0x71b)],Window_Options[_0x3df63e(0x655)][_0x3df63e(0x71b)]=function(_0x43f889){const _0xf6b8db=_0x3df63e,_0x12163a=this[_0xf6b8db(0x23a)](_0x43f889);if(_0x12163a===_0xf6b8db(0xb64)){if(_0xf6b8db(0xb12)===_0xf6b8db(0x3a9))this[_0xf6b8db(0x20d)]=0x0;else return this[_0xf6b8db(0x6f7)]();}else{if(_0xf6b8db(0x987)===_0xf6b8db(0x987))return VisuMZ[_0xf6b8db(0xa69)][_0xf6b8db(0x54c)][_0xf6b8db(0x5d9)](this,_0x43f889);else this[_0xf6b8db(0xab0)][_0xf6b8db(0x49e)]=_0x1ef63d(_0x216ce1['$1']),this[_0xf6b8db(0xab0)][_0xf6b8db(0x228)]=_0x30c679(_0x14efa2['$2']);}},Window_Options[_0x3df63e(0x655)][_0x3df63e(0x6f7)]=function(){const _0x336254=_0x3df63e,_0x22a539=VisuMZ[_0x336254(0xa69)][_0x336254(0x5eb)]['AutoBattle'],_0x418fbc=this[_0x336254(0x290)](_0x336254(0xb64));return _0x418fbc?_0x22a539[_0x336254(0x629)]:_0x22a539[_0x336254(0x9bb)];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x1297e8=_0x3df63e,_0x2eafc4=DataManager[_0x1297e8(0x2dd)](this[_0x1297e8(0xabb)]),_0x3dd340=VisuMZ['DamageStyles'][_0x2eafc4];if(!_0x3dd340)return this['getItemDamageAmountLabelOriginal']();const _0x5ca64e=_0x1297e8(0x88e)['format'](this[_0x1297e8(0xabb)]['damage'][_0x1297e8(0x3ad)]),_0x1ce6b8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x1297e8(0xabb)][_0x1297e8(0x9e0)][_0x1297e8(0x3ad)]];return _0x3dd340[_0x5ca64e][_0x1297e8(0x4f8)](_0x1ce6b8);},Window_ShopStatus[_0x3df63e(0x655)]['getItemDamageAmountTextBattleCore']=function(){const _0x2d0e6c=_0x3df63e,_0x5aea04=DataManager[_0x2d0e6c(0x2dd)](this[_0x2d0e6c(0xabb)]),_0x201a5e=VisuMZ[_0x2d0e6c(0x666)][_0x5aea04];if(!_0x201a5e)return this[_0x2d0e6c(0x472)]();return _0x201a5e[_0x2d0e6c(0x3db)][_0x2d0e6c(0x5d9)](this);},VisuMZ[_0x3df63e(0xa69)]['Window_PartyCommand_initialize']=Window_PartyCommand['prototype'][_0x3df63e(0xb26)],Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(_0x25abf5){const _0x54a1e3=_0x3df63e;VisuMZ[_0x54a1e3(0xa69)][_0x54a1e3(0x2df)][_0x54a1e3(0x5d9)](this,_0x25abf5),this['createCommandNameWindow'](_0x25abf5);},Window_PartyCommand[_0x3df63e(0x655)]['createCommandNameWindow']=function(_0x58e4ec){const _0x33edc2=_0x3df63e,_0x561f94=new Rectangle(0x0,0x0,_0x58e4ec[_0x33edc2(0x366)],_0x58e4ec['height']);this['_commandNameWindow']=new Window_Base(_0x561f94),this['_commandNameWindow'][_0x33edc2(0x7a6)]=0x0,this['addChild'](this[_0x33edc2(0x6cc)]),this[_0x33edc2(0x16b)]();},Window_PartyCommand[_0x3df63e(0x655)]['callUpdateHelp']=function(){const _0x146747=_0x3df63e;Window_Command[_0x146747(0x655)]['callUpdateHelp'][_0x146747(0x5d9)](this);if(this['_commandNameWindow'])this[_0x146747(0x16b)]();},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x16b)]=function(){const _0x21308a=_0x3df63e,_0x1069df=this[_0x21308a(0x6cc)];_0x1069df[_0x21308a(0x546)][_0x21308a(0x6be)]();const _0x3fd999=this[_0x21308a(0xa91)](this[_0x21308a(0xb32)]());if(_0x3fd999===_0x21308a(0x8b5)&&this[_0x21308a(0x8d0)]()>0x0){if(_0x21308a(0x164)!==_0x21308a(0x7bb)){const _0x4751aa=this['itemLineRect'](this[_0x21308a(0xb32)]());let _0x225fc5=this['commandName'](this[_0x21308a(0xb32)]());_0x225fc5=_0x225fc5['replace'](/\\I\[(\d+)\]/gi,''),_0x1069df['resetFontSettings'](),this[_0x21308a(0x792)](_0x225fc5,_0x4751aa),this['commandNameWindowDrawText'](_0x225fc5,_0x4751aa),this[_0x21308a(0x967)](_0x225fc5,_0x4751aa);}else _0x403a0b[_0x21308a(0x221)](_0x18213d),this[_0x21308a(0x72b)]();}},Window_PartyCommand[_0x3df63e(0x655)]['commandNameWindowDrawBackground']=function(_0x2fa69f,_0x27fbab){},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0xb1f)]=function(_0x5a53fc,_0x4aab25){const _0x49e0f6=_0x3df63e,_0x22f147=this['_commandNameWindow'];_0x22f147['drawText'](_0x5a53fc,0x0,_0x4aab25['y'],_0x22f147[_0x49e0f6(0xb94)],_0x49e0f6(0x7b6));},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x967)]=function(_0x51cec3,_0x578340){const _0x425196=_0x3df63e,_0x1725f0=this[_0x425196(0x6cc)],_0xeb016e=$gameSystem[_0x425196(0x932)](),_0x13d1a1=_0x578340['x']+Math[_0x425196(0x49d)](_0x578340[_0x425196(0x366)]/0x2)+_0xeb016e;_0x1725f0['x']=_0x1725f0[_0x425196(0x366)]/-0x2+_0x13d1a1,_0x1725f0['y']=Math[_0x425196(0x49d)](_0x578340[_0x425196(0xb78)]/0x2);},Window_PartyCommand['prototype'][_0x3df63e(0x6ed)]=function(){const _0x1b4725=_0x3df63e;this[_0x1b4725(0x2ef)](),this[_0x1b4725(0x68a)](),this[_0x1b4725(0x604)](),this[_0x1b4725(0x3ac)](),this[_0x1b4725(0x623)]();},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x2ef)]=function(){const _0x422e58=_0x3df63e,_0x2044c9=this['commandStyle'](),_0x4b8959=VisuMZ[_0x422e58(0xa69)][_0x422e58(0x5eb)]['PartyCmd']['CmdIconFight'],_0x4109ca=_0x2044c9===_0x422e58(0xb41)?TextManager[_0x422e58(0x7c5)]:_0x422e58(0x5b2)[_0x422e58(0x4f8)](_0x4b8959,TextManager[_0x422e58(0x7c5)]),_0x4e5f97=this[_0x422e58(0x2d6)]();this[_0x422e58(0x95a)](_0x4109ca,_0x422e58(0x7c5),_0x4e5f97);},Window_PartyCommand['prototype'][_0x3df63e(0x2d6)]=function(){return!![];},Window_PartyCommand['prototype'][_0x3df63e(0x68a)]=function(){const _0x13e179=_0x3df63e;if(!this[_0x13e179(0x9ff)]())return;const _0x4114c9=this[_0x13e179(0x99e)](),_0x5aa7a4=VisuMZ['BattleCore'][_0x13e179(0x5eb)][_0x13e179(0x5d0)][_0x13e179(0x54b)],_0x1b53e3=_0x4114c9===_0x13e179(0xb41)?TextManager[_0x13e179(0xafe)]:_0x13e179(0x5b2)[_0x13e179(0x4f8)](_0x5aa7a4,TextManager[_0x13e179(0xafe)]),_0x4a7cd6=this[_0x13e179(0x1f6)]();this[_0x13e179(0x95a)](_0x1b53e3,_0x13e179(0xafe),_0x4a7cd6);},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x9ff)]=function(){const _0x257066=_0x3df63e;return VisuMZ[_0x257066(0xa69)][_0x257066(0x5eb)][_0x257066(0x5d0)][_0x257066(0x51d)];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x1f6)]=function(){return!![];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x604)]=function(){},Window_PartyCommand['prototype'][_0x3df63e(0x3ac)]=function(){const _0x4d7cd5=_0x3df63e;if(!this[_0x4d7cd5(0x5f3)]())return;const _0x421afc=this['commandStyle'](),_0x4a7b14=VisuMZ[_0x4d7cd5(0xa69)][_0x4d7cd5(0x5eb)][_0x4d7cd5(0x5d0)][_0x4d7cd5(0xb09)],_0x1df32a=_0x421afc===_0x4d7cd5(0xb41)?TextManager['options']:'\x5cI[%1]%2'[_0x4d7cd5(0x4f8)](_0x4a7b14,TextManager[_0x4d7cd5(0x505)]),_0x494843=this['isOptionsCommandEnabled']();this[_0x4d7cd5(0x95a)](_0x1df32a,_0x4d7cd5(0x505),_0x494843);},Window_PartyCommand[_0x3df63e(0x655)]['isOptionsCommandAdded']=function(){const _0x2d53a1=_0x3df63e;return VisuMZ['BattleCore'][_0x2d53a1(0x5eb)][_0x2d53a1(0x5d0)][_0x2d53a1(0xb2e)];},Window_PartyCommand[_0x3df63e(0x655)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x623)]=function(){const _0x4fa65c=_0x3df63e,_0x21dbf9=this[_0x4fa65c(0x99e)](),_0x37691e=VisuMZ[_0x4fa65c(0xa69)][_0x4fa65c(0x5eb)]['PartyCmd']['CmdIconEscape'],_0x3ee37e=_0x21dbf9===_0x4fa65c(0xb41)?TextManager[_0x4fa65c(0xada)]:'\x5cI[%1]%2'[_0x4fa65c(0x4f8)](_0x37691e,TextManager[_0x4fa65c(0xada)]),_0x547f74=this['isEscapeCommandEnabled']();this[_0x4fa65c(0x95a)](_0x3ee37e,'escape',_0x547f74);},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x170)]=function(){const _0x357829=_0x3df63e;return BattleManager[_0x357829(0x944)]();},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x3e7)]=function(){const _0x2c1a0a=_0x3df63e;return VisuMZ[_0x2c1a0a(0xa69)][_0x2c1a0a(0x5eb)][_0x2c1a0a(0x5d0)][_0x2c1a0a(0xa99)];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x2f0)]=function(_0x307ac5){const _0x1d7097=_0x3df63e,_0x1d82bb=this[_0x1d7097(0xa91)](_0x307ac5);if(_0x1d82bb===_0x1d7097(0x264))this[_0x1d7097(0xa47)](_0x307ac5);else _0x1d82bb===_0x1d7097(0x8b5)?this[_0x1d7097(0x5c4)](_0x307ac5):Window_Command[_0x1d7097(0x655)][_0x1d7097(0x2f0)][_0x1d7097(0x5d9)](this,_0x307ac5);},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x99e)]=function(){const _0x1e6b38=_0x3df63e;return VisuMZ['BattleCore']['Settings'][_0x1e6b38(0x5d0)][_0x1e6b38(0x62b)];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0xa91)]=function(_0x27f84f){const _0x1283b0=_0x3df63e;if(_0x27f84f<0x0)return _0x1283b0(0xb41);const _0x303e07=this[_0x1283b0(0x99e)]();if(_0x303e07!==_0x1283b0(0xb34))return _0x303e07;else{if(this[_0x1283b0(0x8d0)]()>0x0){if(_0x1283b0(0x5cd)!==_0x1283b0(0x3f2)){const _0x1ab40a=this[_0x1283b0(0x947)](_0x27f84f);if(_0x1ab40a['match'](/\\I\[(\d+)\]/i)){if(_0x1283b0(0x199)!==_0x1283b0(0x199))this[_0x1283b0(0x924)]=this['x'],this[_0x1283b0(0x560)]=this['y'],this[_0x1283b0(0xbb8)](),this[_0x1283b0(0x279)](),this['x']+=this[_0x1283b0(0x676)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x1283b0(0x7c9)](),this['x']=_0x18431c['floor'](this['x']),this['y']=_0x49b0e0[_0x1283b0(0x49d)](this['y']);else{const _0x5bfd69=this[_0x1283b0(0x277)](_0x27f84f),_0x2a638e=this[_0x1283b0(0x364)](_0x1ab40a)['width'];return _0x2a638e<=_0x5bfd69['width']?_0x1283b0(0x264):_0x1283b0(0x8b5);}}}else return _0x1c0cbc[_0x1283b0(0xa69)]['Settings'][_0x1283b0(0x5d0)][_0x1283b0(0xb24)];}}return'text';},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0xa47)]=function(_0x44c449){const _0xcb76b9=_0x3df63e,_0x173e71=this['itemLineRect'](_0x44c449),_0x308fb2=this['commandName'](_0x44c449),_0x430a46=this[_0xcb76b9(0x364)](_0x308fb2)[_0xcb76b9(0x366)];this[_0xcb76b9(0x61b)](this[_0xcb76b9(0x5d5)](_0x44c449));const _0x27e805=this[_0xcb76b9(0x3e7)]();if(_0x27e805===_0xcb76b9(0x7cf))this['drawTextEx'](_0x308fb2,_0x173e71['x']+_0x173e71[_0xcb76b9(0x366)]-_0x430a46,_0x173e71['y'],_0x430a46);else{if(_0x27e805===_0xcb76b9(0x7b6)){const _0x2bf01c=_0x173e71['x']+Math[_0xcb76b9(0x49d)]((_0x173e71[_0xcb76b9(0x366)]-_0x430a46)/0x2);this[_0xcb76b9(0x7ab)](_0x308fb2,_0x2bf01c,_0x173e71['y'],_0x430a46);}else this[_0xcb76b9(0x7ab)](_0x308fb2,_0x173e71['x'],_0x173e71['y'],_0x430a46);}},Window_PartyCommand[_0x3df63e(0x655)]['drawItemStyleIcon']=function(_0x45ec8c){const _0x3ee830=_0x3df63e;this[_0x3ee830(0x947)](_0x45ec8c)[_0x3ee830(0x64e)](/\\I\[(\d+)\]/i);const _0x530b8a=Number(RegExp['$1'])||0x0,_0x2760e1=this['itemLineRect'](_0x45ec8c),_0x10a731=_0x2760e1['x']+Math[_0x3ee830(0x49d)]((_0x2760e1[_0x3ee830(0x366)]-ImageManager[_0x3ee830(0x962)])/0x2),_0x2cc381=_0x2760e1['y']+(_0x2760e1[_0x3ee830(0xb78)]-ImageManager['iconHeight'])/0x2;this[_0x3ee830(0x293)](_0x530b8a,_0x10a731,_0x2cc381);},Window_PartyCommand['prototype'][_0x3df63e(0x2ea)]=function(){},Window_PartyCommand['prototype'][_0x3df63e(0x4d8)]=function(){const _0x573cdd=_0x3df63e;Window_Command['prototype'][_0x573cdd(0x4d8)][_0x573cdd(0x5d9)](this);const _0x5e3da7=this[_0x573cdd(0xb6b)]();if(_0x5e3da7===_0x573cdd(0x84a)){if(_0x573cdd(0x6d6)==='gQkLb'){let _0x4f6fb6=-0x10,_0xe00013=this[_0x573cdd(0xb78)]*0.5;const _0x196514=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x53940f=this[_0x573cdd(0x957)][_0x573cdd(0x86d)]()[_0x573cdd(0x3a8)](_0x265127=>_0x265127&&_0x265127[_0x573cdd(0x45f)]['match'](_0x196514)?_0x4eef26(_0x180b91['$1']):0x0),_0x4373f3=this['_battler']['traitObjects']()['map'](_0x2c8642=>_0x2c8642&&_0x2c8642[_0x573cdd(0x45f)][_0x573cdd(0x64e)](_0x196514)?_0x435a39(_0x5376bc['$2']):0x0);_0x4f6fb6=_0x53940f['reduce']((_0x554ef5,_0x546b08)=>_0x554ef5+_0x546b08,_0x4f6fb6),_0xe00013=_0x4373f3['reduce']((_0x26a2b7,_0x30e232)=>_0x26a2b7+_0x30e232,_0xe00013),this[_0x573cdd(0xbb3)]['x']=_0x4f6fb6,this[_0x573cdd(0xbb3)]['y']=_0xe00013,this[_0x573cdd(0xbb3)]['update']();}else this[_0x573cdd(0x3a2)]();}},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0xb6b)]=function(){const _0x16c142=_0x3df63e;if(this[_0x16c142(0xb2b)])return this[_0x16c142(0xb2b)];return this['_battleLayoutStyle']=SceneManager[_0x16c142(0x8e2)][_0x16c142(0xb6b)](),this[_0x16c142(0xb2b)];},Window_PartyCommand[_0x3df63e(0x655)][_0x3df63e(0x805)]=function(){const _0x3d215f=_0x3df63e,_0x598b4c=VisuMZ[_0x3d215f(0xa69)]['Settings'][_0x3d215f(0x5d0)],_0x3394fe=this['currentSymbol']();switch(_0x3394fe){case'fight':this[_0x3d215f(0xa49)]['setText'](_0x598b4c[_0x3d215f(0x94a)]);break;case _0x3d215f(0xafe):this[_0x3d215f(0xa49)][_0x3d215f(0x1c5)](_0x598b4c[_0x3d215f(0x658)]);break;case _0x3d215f(0x505):this[_0x3d215f(0xa49)][_0x3d215f(0x1c5)](_0x598b4c['HelpOptions']);break;case _0x3d215f(0xada):this['_helpWindow'][_0x3d215f(0x1c5)](_0x598b4c[_0x3d215f(0x9f3)]);break;default:this[_0x3d215f(0xa49)][_0x3d215f(0x1c5)]('');break;}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb8b)]=Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xb26)],Window_ActorCommand[_0x3df63e(0x655)]['initialize']=function(_0x287cae){const _0x29fece=_0x3df63e;VisuMZ[_0x29fece(0xa69)][_0x29fece(0xb8b)][_0x29fece(0x5d9)](this,_0x287cae),this[_0x29fece(0x7e6)](_0x287cae);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x7e6)]=function(_0x40fb0b){const _0x4c4405=_0x3df63e,_0x32046f=new Rectangle(0x0,0x0,_0x40fb0b[_0x4c4405(0x366)],_0x40fb0b[_0x4c4405(0xb78)]);this[_0x4c4405(0x6cc)]=new Window_Base(_0x32046f),this['_commandNameWindow'][_0x4c4405(0x7a6)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x4c4405(0x16b)]();},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x309)]=function(){const _0x383039=_0x3df63e;Window_Command[_0x383039(0x655)][_0x383039(0x309)][_0x383039(0x5d9)](this);if(this[_0x383039(0x6cc)])this[_0x383039(0x16b)]();},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x16b)]=function(){const _0x4a74be=_0x3df63e,_0x53a7c6=this[_0x4a74be(0x6cc)];_0x53a7c6['contents'][_0x4a74be(0x6be)]();const _0x23215d=this['commandStyleCheck'](this[_0x4a74be(0xb32)]());if(_0x23215d==='icon'&&this[_0x4a74be(0x8d0)]()>0x0){if('PmCZh'===_0x4a74be(0x8b2))return!![];else{const _0x22779c=this[_0x4a74be(0x277)](this['index']());let _0x1e5728=this[_0x4a74be(0x947)](this['index']());_0x1e5728=_0x1e5728[_0x4a74be(0x455)](/\\I\[(\d+)\]/gi,''),_0x53a7c6[_0x4a74be(0x692)](),this[_0x4a74be(0x792)](_0x1e5728,_0x22779c),this[_0x4a74be(0xb1f)](_0x1e5728,_0x22779c),this[_0x4a74be(0x967)](_0x1e5728,_0x22779c);}}},Window_ActorCommand[_0x3df63e(0x655)]['commandNameWindowDrawBackground']=function(_0x560690,_0x8e5d14){},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xb1f)]=function(_0x4454e3,_0x6babb1){const _0x303f64=_0x3df63e,_0x425ab6=this[_0x303f64(0x6cc)];_0x425ab6[_0x303f64(0x733)](_0x4454e3,0x0,_0x6babb1['y'],_0x425ab6['innerWidth'],'center');},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x967)]=function(_0x3c6209,_0x4f392c){const _0x1c185f=_0x3df63e,_0x3d4295=this[_0x1c185f(0x6cc)],_0x2c0826=$gameSystem[_0x1c185f(0x932)](),_0x58624a=_0x4f392c['x']+Math[_0x1c185f(0x49d)](_0x4f392c['width']/0x2)+_0x2c0826;_0x3d4295['x']=_0x3d4295['width']/-0x2+_0x58624a,_0x3d4295['y']=Math['floor'](_0x4f392c[_0x1c185f(0xb78)]/0x2);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x6ed)]=function(){const _0x15128c=_0x3df63e;if(!this['_actor'])return;const _0x7625d0=this[_0x15128c(0x331)][_0x15128c(0x20c)]();for(const _0x11908e of _0x7625d0){if(_0x15128c(0x3a7)!==_0x15128c(0x3a7)){const _0x5b1ebc=_0x20a6b3[_0x15128c(0xa6a)],_0x31f180=_0x15128c(0x4bf);this[_0x15128c(0x95a)](_0x5b1ebc,_0x31f180);}else this['makeBattleCommand'](_0x11908e[_0x15128c(0x17c)]()[_0x15128c(0x9d2)]());}},Window_ActorCommand[_0x3df63e(0x655)]['makeBattleCommand']=function(_0x5680cc){const _0x1e5569=_0x3df63e;if(_0x5680cc===_0x1e5569(0x592)){if(_0x1e5569(0x746)!==_0x1e5569(0x272))this['addAttackCommand']();else{const _0x2292bb=this[_0x1e5569(0x355)](_0x2670a5)['battler']();if(!_0x2292bb)return;const _0x228156=this['battleLayoutStyle'](),_0x4aec8e=this['itemRect'](_0x2d1168);let _0x3aaf03=_0x31830e[_0x1e5569(0x76b)](_0x4aec8e['x']+_0x4aec8e[_0x1e5569(0x366)]/0x2)+this[_0x1e5569(0x252)];['list'][_0x1e5569(0xa22)](_0x228156)&&(_0x3aaf03=_0x4aec8e[_0x1e5569(0x366)]/_0x204346[_0x1e5569(0x9c3)]()[_0x1e5569(0xb02)],_0x3aaf03*=_0x5eb5a1,_0x3aaf03+=_0x4aec8e[_0x1e5569(0x366)]/_0x3a5e6b[_0x1e5569(0x9c3)]()[_0x1e5569(0xb02)]/0x2);let _0x56ceeb=_0x264d76[_0x1e5569(0x76b)](this[_0x1e5569(0xbd0)](_0x4204a2,_0x2292bb,_0x4aec8e));_0x2292bb[_0x1e5569(0x8d3)](_0x3aaf03,_0x56ceeb),this[_0x1e5569(0x95f)](_0x2292bb,0x1),_0x2292bb[_0x1e5569(0x1d7)](),this[_0x1e5569(0x6d5)]();}}[_0x1e5569(0x755),'SKILLS']['includes'](_0x5680cc)&&(_0x1e5569(0x269)===_0x1e5569(0x269)?this[_0x1e5569(0x7c8)]():(this[_0x1e5569(0x197)](_0x1d7008),this['showHelpWindow']()));_0x5680cc==='GUARD'&&this['addGuardCommand']();_0x5680cc===_0x1e5569(0x483)&&this['addItemCommand']();_0x5680cc===_0x1e5569(0x776)&&this[_0x1e5569(0x623)]();_0x5680cc===_0x1e5569(0xa6b)&&this['addAutoBattleCommand']();if(_0x5680cc['match'](/STYPE: (\d+)/i)){if(_0x1e5569(0x457)!==_0x1e5569(0x457))return _0x2417f6['status']&&_0x32ae56[_0x1e5569(0x29e)][_0x1e5569(0xa22)]('['+_0x4758bb+']');else{const _0x4d6235=Number(RegExp['$1']);this[_0x1e5569(0x8ff)](_0x4d6235);}}else{if(_0x5680cc[_0x1e5569(0x64e)](/STYPE: (.*)/i)){const _0x4a4596=DataManager[_0x1e5569(0xab2)](RegExp['$1']);this[_0x1e5569(0x8ff)](_0x4a4596);}}_0x5680cc==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0x5680cc[_0x1e5569(0x64e)](/SKILL: (\d+)/i)){const _0x29ad0f=Number(RegExp['$1']);this[_0x1e5569(0x578)]($dataSkills[_0x29ad0f]);}else{if(_0x5680cc[_0x1e5569(0x64e)](/SKILL: (.*)/i)){if(_0x1e5569(0x908)===_0x1e5569(0x4e8)){if(_0x318606===_0x1e5569(0x780))this[_0x1e5569(0x338)]=!![];if(this[_0x1e5569(0x957)]&&this['_battler']['isDead']()){this[_0x1e5569(0xb8d)]=_0x47413d[_0x1e5569(0x7ea)][_0x1e5569(0x881)];return;}const _0x1c1b4d=_0x41de1e['MOTIONS'][_0x42fe85];this['_motion']=_0x1c1b4d,this['_motionCount']=0x0,this[_0x1e5569(0xaa7)]=0x0;}else{const _0x254748=DataManager[_0x1e5569(0x227)](RegExp['$1']);this[_0x1e5569(0x578)]($dataSkills[_0x254748]);}}}if(_0x5680cc===_0x1e5569(0x1cd)&&Imported[_0x1e5569(0xae4)]){if(_0x1e5569(0x3ea)===_0x1e5569(0x3ea))this[_0x1e5569(0x9e5)]();else{const _0x4ba63d=this['battleLayoutStyle']();['xp',_0x1e5569(0xbc2),'border'][_0x1e5569(0xa22)](_0x4ba63d)&&this[_0x1e5569(0x581)][_0x1e5569(0x689)](),(_0x4ba63d==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x1e5569(0x2ce)][_0x1e5569(0x689)](),this[_0x1e5569(0x983)][_0x1e5569(0x689)]());}}[_0x1e5569(0x2cd),_0x1e5569(0x64d)]['includes'](_0x5680cc)&&Imported[_0x1e5569(0x741)]&&this[_0x1e5569(0x213)](),_0x5680cc===_0x1e5569(0x9a4)&&Imported[_0x1e5569(0x60f)]&&this[_0x1e5569(0x867)](!![]);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x5df)]=function(){const _0x35ea67=_0x3df63e,_0x3f2381=$dataSkills[this[_0x35ea67(0x331)][_0x35ea67(0x2d3)]()];if(!_0x3f2381)return;if(!this[_0x35ea67(0x53b)](_0x3f2381))return;const _0xfa5fe9=this[_0x35ea67(0x99e)](),_0x17790b=DataManager[_0x35ea67(0xb82)](_0x3f2381),_0x7389ef=DataManager[_0x35ea67(0x897)](_0x3f2381),_0xb87a01=_0xfa5fe9===_0x35ea67(0xb41)?_0x17790b:_0x35ea67(0x5b2)['format'](_0x7389ef,_0x17790b);this[_0x35ea67(0x95a)](_0xb87a01,_0x35ea67(0x7fc),this[_0x35ea67(0x331)]['canAttack']());},Window_ActorCommand[_0x3df63e(0x655)]['addGuardCommand']=function(){const _0x2549dd=_0x3df63e,_0xc8210b=$dataSkills[this[_0x2549dd(0x331)][_0x2549dd(0xba4)]()];if(!_0xc8210b)return;if(!this[_0x2549dd(0x53b)](_0xc8210b))return;const _0xa3d2fd=this[_0x2549dd(0x99e)](),_0x4b30d3=DataManager[_0x2549dd(0xb82)](_0xc8210b),_0x1c5982=DataManager[_0x2549dd(0x897)](_0xc8210b),_0x370c5c=_0xa3d2fd===_0x2549dd(0xb41)?_0x4b30d3:'\x5cI[%1]%2'[_0x2549dd(0x4f8)](_0x1c5982,_0x4b30d3);this[_0x2549dd(0x95a)](_0x370c5c,_0x2549dd(0x912),this[_0x2549dd(0x331)][_0x2549dd(0x3c3)]());},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x268)]=function(){const _0x5771bf=_0x3df63e,_0x33d874=this[_0x5771bf(0x99e)](),_0x312c63=VisuMZ[_0x5771bf(0xa69)][_0x5771bf(0x5eb)]['ActorCmd'][_0x5771bf(0x21f)],_0x2f63d0=_0x33d874===_0x5771bf(0xb41)?TextManager['item']:_0x5771bf(0x5b2)[_0x5771bf(0x4f8)](_0x312c63,TextManager[_0x5771bf(0x918)]),_0x793826=this[_0x5771bf(0x2a0)]();this[_0x5771bf(0x95a)](_0x2f63d0,'item',_0x793826);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x2a0)]=function(){const _0x1e72ca=_0x3df63e;return this[_0x1e72ca(0x331)]&&this[_0x1e72ca(0x331)]['canUseItemCommand']();},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x7c8)]=function(){const _0xb1a6c9=_0x3df63e,_0x463b85=this[_0xb1a6c9(0x331)]['skillTypes']();for(const _0x424f3e of _0x463b85){this[_0xb1a6c9(0x8ff)](_0x424f3e);}},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x8ff)]=function(_0x1ee0de){const _0x11899b=_0x3df63e;let _0x4a3429=$dataSystem['skillTypes'][_0x1ee0de];if(!_0x4a3429)return;let _0x2b7361=_0x4a3429;const _0x4b289c=this[_0x11899b(0x99e)]();if(_0x4b289c===_0x11899b(0xb41)){if(_0x11899b(0x61f)!=='qhLfe')return _0x133c35[_0x11899b(0xb91)];else _0x2b7361=_0x2b7361[_0x11899b(0x455)](/\x1I\[(\d+)\]/gi,''),_0x2b7361=_0x2b7361[_0x11899b(0x455)](/\\I\[(\d+)\]/gi,'');}else{if(!_0x4a3429[_0x11899b(0x64e)](/\\I\[(\d+)\]/i)){if(_0x11899b(0x7f2)==='GNiRW'){const _0x4e5dd0=Imported[_0x11899b(0x3e6)]?VisuMZ[_0x11899b(0x7d6)][_0x11899b(0x5eb)][_0x11899b(0x249)]:VisuMZ['BattleCore'][_0x11899b(0x5eb)][_0x11899b(0x39a)],_0x444e80=$dataSystem[_0x11899b(0x19d)][_0x11899b(0xa22)](_0x1ee0de),_0x39e111=_0x444e80?_0x4e5dd0['IconStypeMagic']:_0x4e5dd0[_0x11899b(0xb84)];_0x2b7361=_0x11899b(0x5b2)[_0x11899b(0x4f8)](_0x39e111,_0x4a3429);}else{if(!this[_0x11899b(0x9bd)]()&&this!==_0x426cb3[_0x11899b(0x8fd)]){if(this[_0x11899b(0x669)]())this[_0x11899b(0x669)]()['refreshMotion']();}this[_0x11899b(0xb11)]();return;}}}this[_0x11899b(0x95a)](_0x2b7361,'skill',!![],_0x1ee0de);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xa2d)]=function(){const _0x3b4d91=_0x3df63e,_0x310bf1=this['_actor']['skillTypes'](),_0x2ba831=this['_actor']['skills']();for(const _0x1cd806 of _0x2ba831){if('sHGtp'!==_0x3b4d91(0x9a1)){if(!_0x1cd806)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this[_0x3b4d91(0x25a)](_0x1cd806))continue;if(this[_0x3b4d91(0x90e)](_0x1cd806))continue;}else{if(!_0x310bf1[_0x3b4d91(0xa22)](_0x1cd806[_0x3b4d91(0x7ae)]))continue;}this[_0x3b4d91(0x578)](_0x1cd806);}else{const _0x5adfb6=_0xd96c79[_0x3b4d91(0xa69)][_0x3b4d91(0x5eb)][_0x3b4d91(0x742)],_0xb4aa3a=_0x18741f[_0x3b4d91(0x3ee)]?0x4:0x3,_0x3a7804=_0xb4aa3a*0x80+(_0xb4aa3a-0x1)*0x8+0x4,_0x3b8b15=this[_0x3b4d91(0x355)](_0x681617),_0xc0dc0c=this[_0x3b4d91(0x6cd)](_0x119358);let _0x77de1=_0xc0dc0c['x']+this['padding'];_0x5adfb6[_0x3b4d91(0x212)]?_0x77de1=_0xc0dc0c['x']+_0x2a8904[_0x3b4d91(0x855)]+0x8:_0x77de1+=_0x259ee1['iconWidth'];const _0x33506b=_0x29a6a9[_0x3b4d91(0x76b)](_0x267d8c[_0x3b4d91(0x46d)](_0xc0dc0c['x']+_0xc0dc0c[_0x3b4d91(0x366)]-_0x3a7804,_0x77de1)),_0x2c74e4=_0x27382a[_0x3b4d91(0x76b)](_0xc0dc0c['y']+(_0xc0dc0c[_0x3b4d91(0xb78)]-_0x37894d['prototype'][_0x3b4d91(0x38c)]())/0x2),_0x2ebcd6=_0x179850[_0x3b4d91(0x76b)](_0x33506b-_0x53ec61[_0x3b4d91(0x962)]/0x2-0x4),_0x480b08=_0x2b6d08['round'](_0xc0dc0c['y']+(_0xc0dc0c[_0x3b4d91(0xb78)]-_0x251c57[_0x3b4d91(0xa45)])/0x2+_0x5031d5[_0x3b4d91(0xa45)]/0x2);let _0x379a03=_0x33506b+0x88;const _0x4cd9eb=_0x2c74e4;this[_0x3b4d91(0x6d3)](_0x3b8b15,_0x33506b-0x4+(_0x5adfb6[_0x3b4d91(0x877)]||0x0),_0x2c74e4+(_0x5adfb6[_0x3b4d91(0x2f9)]||0x0)),this['placeActorName'](_0x3b8b15,_0x33506b+(_0x5adfb6['NameOffsetX']||0x0),_0x2c74e4+(_0x5adfb6['NameOffsetY']||0x0)),this['placeStateIcon'](_0x3b8b15,_0x2ebcd6+(_0x5adfb6[_0x3b4d91(0x820)]||0x0),_0x480b08+(_0x5adfb6[_0x3b4d91(0x5cc)]||0x0)),this[_0x3b4d91(0x323)](_0x3b8b15,'hp',_0x379a03+0x88*0x0+(_0x5adfb6[_0x3b4d91(0x716)]||0x0),_0x4cd9eb+(_0x5adfb6[_0x3b4d91(0x59d)]||0x0)),this[_0x3b4d91(0x323)](_0x3b8b15,'mp',_0x379a03+0x88*0x1+(_0x5adfb6['MpGaugeOffsetX']||0x0),_0x4cd9eb+(_0x5adfb6[_0x3b4d91(0x8fa)]||0x0)),_0x2a3cc0[_0x3b4d91(0x3ee)]&&this[_0x3b4d91(0x323)](_0x3b8b15,'tp',_0x379a03+0x88*0x2+(_0x5adfb6[_0x3b4d91(0x626)]||0x0),_0x4cd9eb+(_0x5adfb6[_0x3b4d91(0xb4f)]||0x0));}}},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x25a)]=function(_0x2f2b24){const _0x31e43c=_0x3df63e,_0x100796=this[_0x31e43c(0x331)][_0x31e43c(0x2cc)](),_0x502748=_0x100796[_0x31e43c(0xaaa)](_0x399df6=>DataManager[_0x31e43c(0x5b1)](_0x2f2b24)[_0x31e43c(0xa22)](_0x399df6));return _0x502748[_0x31e43c(0xb02)]<=0x0;},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x90e)]=function(_0x468297){const _0x4fb5c2=_0x3df63e;if(!Window_SkillList[_0x4fb5c2(0x655)][_0x4fb5c2(0x79a)]['call'](this,_0x468297))return!![];if(!Window_SkillList['prototype']['checkShowHideSwitchNotetags'][_0x4fb5c2(0x5d9)](this,_0x468297))return!![];if(!Window_SkillList[_0x4fb5c2(0x655)][_0x4fb5c2(0x8ac)][_0x4fb5c2(0x5d9)](this,_0x468297))return!![];return![];},Window_ActorCommand['prototype'][_0x3df63e(0x578)]=function(_0x4e7f51){const _0x11a3b6=_0x3df63e;if(!_0x4e7f51)return;if(!this[_0x11a3b6(0x53b)](_0x4e7f51))return;const _0x1737e2=this['commandStyle'](),_0x3e7335=DataManager['battleCommandName'](_0x4e7f51),_0x598999=DataManager['battleCommandIcon'](_0x4e7f51),_0x463037=_0x1737e2==='text'?_0x3e7335:_0x11a3b6(0x5b2)[_0x11a3b6(0x4f8)](_0x598999,_0x3e7335),_0x586d71=this[_0x11a3b6(0x331)][_0x11a3b6(0x6b8)](_0x4e7f51);this[_0x11a3b6(0x95a)](_0x463037,_0x11a3b6(0x3d0),_0x586d71,_0x4e7f51['id']);},Window_ActorCommand['prototype'][_0x3df63e(0x53b)]=function(_0xb82b39){const _0x48a2b1=_0x3df63e,_0x1289fd=_0xb82b39[_0x48a2b1(0x45f)];if(_0x1289fd[_0x48a2b1(0x64e)](/<COMMAND REQUIRE LEARN>/i)){if('woRFi'===_0x48a2b1(0x873)){if(!this[_0x48a2b1(0x331)]['isLearnedSkill'](_0xb82b39['id']))return![];}else{if(!_0x34367f[_0x48a2b1(0x2a9)]())return;const _0x3e781d=_0x20eabb[_0x48a2b1(0x5d6)]();if(!_0x3e781d)return;_0x3e781d[_0x48a2b1(0x671)](_0x48a2b1(0xba2));}}if(_0x1289fd[_0x48a2b1(0x64e)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x48a2b1(0x331)]['hasSkill'](_0xb82b39['id']))return![];}const _0xdc46a9=VisuMZ['BattleCore'][_0x48a2b1(0x3c1)](_0xb82b39,'CommandVisible');if(VisuMZ[_0x48a2b1(0xa69)]['JS'][_0xdc46a9]){if(!VisuMZ[_0x48a2b1(0xa69)]['JS'][_0xdc46a9][_0x48a2b1(0x5d9)](this,this[_0x48a2b1(0x331)],_0xb82b39))return![];}return VisuMZ[_0x48a2b1(0xa69)][_0x48a2b1(0x42f)](_0xb82b39);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x42f)]=function(_0x5eee06){const _0x59834d=_0x3df63e,_0x2afc7d=_0x5eee06[_0x59834d(0x45f)];if(_0x2afc7d[_0x59834d(0x64e)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x224ca8=JSON[_0x59834d(0x577)]('['+RegExp['$1'][_0x59834d(0x64e)](/\d+/g)+']');for(const _0x2fa0d2 of _0x224ca8){if(_0x59834d(0xa04)!=='KLzGl')return!![];else{if(!$gameSwitches['value'](_0x2fa0d2))return![];}}return!![];}if(_0x2afc7d[_0x59834d(0x64e)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('SGdPq'!==_0x59834d(0x91f))return!![];else{const _0x8f6f27=JSON['parse']('['+RegExp['$1'][_0x59834d(0x64e)](/\d+/g)+']');for(const _0x5b2213 of _0x8f6f27){if(!$gameSwitches[_0x59834d(0xa53)](_0x5b2213))return![];}return!![];}}if(_0x2afc7d[_0x59834d(0x64e)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x59834d(0xbc1)!==_0x59834d(0x765)){const _0x48d30e=JSON['parse']('['+RegExp['$1'][_0x59834d(0x64e)](/\d+/g)+']');for(const _0x51c3f2 of _0x48d30e){if(_0x59834d(0x3cd)===_0x59834d(0x3cd)){if($gameSwitches[_0x59834d(0xa53)](_0x51c3f2))return!![];}else{if(!_0x345856[_0x59834d(0x2a9)]())return;_0x26dbac[_0x59834d(0x368)](_0x3c4f04,_0x18d91d);const _0x553818=_0x4528a6[_0x59834d(0xbae)],_0x3c15de={'criticalHitRate':_0x4c903e[_0x59834d(0x63c)],'criticalHitFlat':_0x3f0672[_0x59834d(0x9ed)],'criticalDmgRate':_0x448dc8[_0x59834d(0x8a5)],'criticalDmgFlat':_0x5b0427[_0x59834d(0xa37)],'damageRate':_0x1855b5['DamageRate'],'damageFlat':_0x18c52d[_0x59834d(0xab6)],'hitRate':_0x40a7b8[_0x59834d(0xbbf)],'hitFlat':_0xd75f4d[_0x59834d(0x5e6)]};_0x553818[_0x59834d(0x82c)]=_0x3c15de;}}return![];}else _0x2d570c[_0x59834d(0x655)]['stop'][_0x59834d(0x5d9)](this);}if(_0x2afc7d[_0x59834d(0x64e)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1fade4=JSON[_0x59834d(0x577)]('['+RegExp['$1'][_0x59834d(0x64e)](/\d+/g)+']');for(const _0x47fbdf of _0x1fade4){if(!$gameSwitches[_0x59834d(0xa53)](_0x47fbdf))return!![];}return![];}if(_0x2afc7d['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x41d02b=JSON[_0x59834d(0x577)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3ed857 of _0x41d02b){if(!$gameSwitches[_0x59834d(0xa53)](_0x3ed857))return!![];}return![];}if(_0x2afc7d['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x504dd6=JSON[_0x59834d(0x577)]('['+RegExp['$1'][_0x59834d(0x64e)](/\d+/g)+']');for(const _0x2a254d of _0x504dd6){if('VyNdx'===_0x59834d(0x77a))return this[_0x59834d(0x84d)](_0x478fdf[0x0],_0x201bef[0x1],_0x1826cc=>{const _0x2cf98b=_0x59834d;!_0x1826cc['isDeathStateAffected']()&&(_0x1826cc[_0x2cf98b(0x459)](_0x5afefa[0x2],_0xb2145f[0x3]),_0x389083[_0x2cf98b(0x459)](_0x1826cc));}),!![];else{if($gameSwitches[_0x59834d(0xa53)](_0x2a254d))return![];}}return!![];}return!![];},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x623)]=function(){const _0x3790c4=_0x3df63e,_0x1c8d23=this[_0x3790c4(0x99e)](),_0x36b232=VisuMZ[_0x3790c4(0xa69)][_0x3790c4(0x5eb)][_0x3790c4(0x5d0)]['CmdIconEscape'],_0x104590=_0x1c8d23===_0x3790c4(0xb41)?TextManager[_0x3790c4(0xada)]:_0x3790c4(0x5b2)[_0x3790c4(0x4f8)](_0x36b232,TextManager['escape']),_0x340b49=this[_0x3790c4(0x170)]();this[_0x3790c4(0x95a)](_0x104590,_0x3790c4(0xada),_0x340b49);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x170)]=function(){const _0x9725ac=_0x3df63e;return BattleManager[_0x9725ac(0x944)]();},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x68a)]=function(){const _0x4b5246=_0x3df63e,_0x32a889=this[_0x4b5246(0x99e)](),_0x5a1b02=VisuMZ['BattleCore'][_0x4b5246(0x5eb)][_0x4b5246(0x5d0)]['CmdIconAutoBattle'],_0x402644=_0x32a889===_0x4b5246(0xb41)?TextManager[_0x4b5246(0xafe)]:_0x4b5246(0x5b2)[_0x4b5246(0x4f8)](_0x5a1b02,TextManager[_0x4b5246(0xafe)]),_0x28c0f7=this[_0x4b5246(0x1f6)]();this[_0x4b5246(0x95a)](_0x402644,_0x4b5246(0xafe),_0x28c0f7);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x1f6)]=function(){return!![];},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x3e7)]=function(){const _0x4e5ad8=_0x3df63e;return VisuMZ[_0x4e5ad8(0xa69)]['Settings'][_0x4e5ad8(0x39a)]['CmdTextAlign'];},Window_ActorCommand['prototype'][_0x3df63e(0x2f0)]=function(_0x2e5d96){const _0x41dfe4=_0x3df63e,_0x1a451b=this[_0x41dfe4(0xa91)](_0x2e5d96);if(_0x1a451b===_0x41dfe4(0x264)){if(_0x41dfe4(0xb97)!==_0x41dfe4(0x415))this[_0x41dfe4(0xa47)](_0x2e5d96);else{const _0x5349a7=_0x578b08[0x0]['format'](_0x1526f9[0x0],_0x33ca9a[0x0]),_0x5ef28e=_0x418b90[0x1][_0x41dfe4(0x4f8)](_0x405048[0x1],_0x513799[0x1])['trim'](),_0x5f01f9=new _0x363449(_0x4a96e8['format'](_0x5ef28e),'i');_0x1258b8[_0x5349a7]=_0x5f01f9;}}else _0x1a451b===_0x41dfe4(0x8b5)?this[_0x41dfe4(0x5c4)](_0x2e5d96):_0x41dfe4(0x6f5)!==_0x41dfe4(0x50b)?Window_Command[_0x41dfe4(0x655)][_0x41dfe4(0x2f0)][_0x41dfe4(0x5d9)](this,_0x2e5d96):(_0x3a96d3*=_0x5b774b['stateRate'](_0x5cce57[_0x41dfe4(0x6a1)]),_0x21434e*=this[_0x41dfe4(0x56b)](_0x48d798));this[_0x41dfe4(0x487)](_0x2e5d96);},Window_ActorCommand['prototype']['commandStyle']=function(){const _0x6feacc=_0x3df63e;return VisuMZ[_0x6feacc(0xa69)][_0x6feacc(0x5eb)][_0x6feacc(0x39a)][_0x6feacc(0x62b)];},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xa91)]=function(_0x57b735){const _0x13ef58=_0x3df63e;if(_0x57b735<0x0)return'text';const _0x2cf971=this['commandStyle']();if(_0x2cf971!==_0x13ef58(0xb34))return _0x2cf971;else{if(this[_0x13ef58(0x8d0)]()>0x0){const _0x27d5cb=this[_0x13ef58(0x947)](_0x57b735);if(_0x27d5cb['match'](/\\I\[(\d+)\]/i)){if(_0x13ef58(0x976)!==_0x13ef58(0x976)){const _0x27071f=_0x324b52[_0x13ef58(0x280)]();_0x27071f[_0x13ef58(0x266)](this[_0x13ef58(0x581)][_0x13ef58(0x307)]()),this['onSelectAction']();}else{const _0x41c575=this[_0x13ef58(0x277)](_0x57b735),_0x3af5ab=this['textSizeEx'](_0x27d5cb)[_0x13ef58(0x366)];if(_0x3af5ab<=_0x41c575[_0x13ef58(0x366)]){if(_0x13ef58(0x6bd)==='xEPhW')_0x294999['prototype']['drawItem'][_0x13ef58(0x5d9)](this,_0x2818a2);else return _0x13ef58(0x264);}else return'icon';}}}}return'text';},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xa47)]=function(_0x116b14){const _0x49bbae=_0x3df63e,_0x26f6d8=this[_0x49bbae(0x277)](_0x116b14),_0x2ed932=this[_0x49bbae(0x947)](_0x116b14),_0x4078c2=this[_0x49bbae(0x364)](_0x2ed932)[_0x49bbae(0x366)];this[_0x49bbae(0x61b)](this['isCommandEnabled'](_0x116b14));const _0x42156c=this[_0x49bbae(0x3e7)]();if(_0x42156c==='right'){if(_0x49bbae(0x5f0)!==_0x49bbae(0x703))this[_0x49bbae(0x7ab)](_0x2ed932,_0x26f6d8['x']+_0x26f6d8[_0x49bbae(0x366)]-_0x4078c2,_0x26f6d8['y'],_0x4078c2);else{if(!_0x1196be[_0x49bbae(0xa69)][_0x49bbae(0x5eb)][_0x49bbae(0x642)]['ShowMpDmg'])return;_0x593656[_0x49bbae(0xa69)][_0x49bbae(0x68c)][_0x49bbae(0x5d9)](this,_0x41c88c);}}else{if(_0x42156c===_0x49bbae(0x7b6)){if(_0x49bbae(0x45b)!==_0x49bbae(0x45b))this[_0x49bbae(0x5e4)]();else{const _0x42558c=_0x26f6d8['x']+Math[_0x49bbae(0x49d)]((_0x26f6d8[_0x49bbae(0x366)]-_0x4078c2)/0x2);this['drawTextEx'](_0x2ed932,_0x42558c,_0x26f6d8['y'],_0x4078c2);}}else this[_0x49bbae(0x7ab)](_0x2ed932,_0x26f6d8['x'],_0x26f6d8['y'],_0x4078c2);}},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x5c4)]=function(_0xc6f774){const _0x304737=_0x3df63e;this['commandName'](_0xc6f774)['match'](/\\I\[(\d+)\]/i);const _0x28561a=Number(RegExp['$1'])||0x0,_0x3626cf=this[_0x304737(0x277)](_0xc6f774),_0x4fda09=_0x3626cf['x']+Math['floor']((_0x3626cf[_0x304737(0x366)]-ImageManager[_0x304737(0x962)])/0x2),_0x373aab=_0x3626cf['y']+(_0x3626cf[_0x304737(0xb78)]-ImageManager[_0x304737(0xa45)])/0x2;this[_0x304737(0x293)](_0x28561a,_0x4fda09,_0x373aab);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x487)]=function(_0x44fc15){const _0x117dd6=_0x3df63e;if(!(VisuMZ[_0x117dd6(0xa69)][_0x117dd6(0x5eb)][_0x117dd6(0x39a)][_0x117dd6(0xa7a)]??!![]))return;const _0x4c78be=this[_0x117dd6(0x23a)](_0x44fc15);if(![_0x117dd6(0x7fc),_0x117dd6(0x912),_0x117dd6(0x3d0)][_0x117dd6(0xa22)](_0x4c78be))return;const _0x2850fd=this[_0x117dd6(0x277)](_0x44fc15);let _0xb67523=null;if(_0x4c78be===_0x117dd6(0x7fc))_0x117dd6(0x8ec)==='ZjtiZ'?_0xb67523=$dataSkills[this[_0x117dd6(0x331)][_0x117dd6(0x2d3)]()]:(_0x31ae77=_0x2e5ea8+_0x57887c['iconWidth']/0x2-0x4,_0x169257=_0x2945db-_0x106377[_0x117dd6(0xa45)]/0x2);else _0x4c78be===_0x117dd6(0x912)?_0xb67523=$dataSkills[this[_0x117dd6(0x331)][_0x117dd6(0xba4)]()]:_0xb67523=$dataSkills[this[_0x117dd6(0x89b)][_0x44fc15][_0x117dd6(0x791)]];this[_0x117dd6(0xa24)](this['_actor'],_0xb67523,_0x2850fd['x'],_0x2850fd['y'],_0x2850fd[_0x117dd6(0x366)]);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xa24)]=function(_0x24c9db,_0x2baf8a,_0x1472e3,_0xac887f,_0x5c4474){const _0x3e9c4b=_0x3df63e;if(!_0x2baf8a)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x3e9c4b(0x655)][_0x3e9c4b(0xa24)][_0x3e9c4b(0x5d9)](this,_0x24c9db,_0x2baf8a,_0x1472e3,_0xac887f,_0x5c4474):Window_SkillList[_0x3e9c4b(0x655)][_0x3e9c4b(0xa24)]['call'](this,_0x2baf8a,_0x1472e3,_0xac887f,_0x5c4474);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x2ea)]=function(){},Window_ActorCommand['prototype'][_0x3df63e(0x4d8)]=function(){const _0x2fefc9=_0x3df63e;Window_Command['prototype'][_0x2fefc9(0x4d8)][_0x2fefc9(0x5d9)](this);const _0x2f77d6=this[_0x2fefc9(0xb6b)]();if(_0x2f77d6===_0x2fefc9(0x84a)){if(_0x2fefc9(0x16e)!==_0x2fefc9(0xaec))this[_0x2fefc9(0x3a2)]();else{const _0x1c975e=_0x4860ad[_0x2fefc9(0xa69)]['Settings'][_0x2fefc9(0x862)],_0x1c6ecf=_0x1c975e[_0x2fefc9(0x751)],_0x2c6993=_0x1c975e['StepDistanceY'],_0x4cddac=_0x1c975e['StepDuration'];this[_0x2fefc9(0xa97)](-_0x1c6ecf,-_0x2c6993,_0x4cddac);}}},Window_ActorCommand['prototype']['battleLayoutStyle']=function(){const _0x3b3c0e=_0x3df63e;if(this['_battleLayoutStyle'])return this[_0x3b3c0e(0xb2b)];return this[_0x3b3c0e(0xb2b)]=SceneManager['_scene'][_0x3b3c0e(0xb6b)](),this[_0x3b3c0e(0xb2b)];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x768)]=Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x265)],Window_ActorCommand[_0x3df63e(0x655)]['setup']=function(_0x5c7e46){const _0x1adf97=_0x3df63e,_0x5eba51=this[_0x1adf97(0xb6b)]();if(_0x5c7e46&&['xp','portrait'][_0x1adf97(0xa22)](_0x5eba51)){if(_0x1adf97(0x684)!==_0x1adf97(0x684)){this[_0x1adf97(0x80b)](_0x1adf97(0x881));return;}else this[_0x1adf97(0x717)](_0x5c7e46);}else _0x5c7e46&&[_0x1adf97(0x84a)][_0x1adf97(0xa22)](_0x5eba51)&&(_0x1adf97(0x206)!==_0x1adf97(0x336)?(this[_0x1adf97(0x197)](_0x5c7e46),this[_0x1adf97(0x3a2)]()):this['_distortionSprite'][_0x1adf97(0x699)](this[_0x1adf97(0x431)]));VisuMZ['BattleCore'][_0x1adf97(0x768)]['call'](this,_0x5c7e46),_0x5c7e46&&$gameTroop[_0x1adf97(0x529)]()[_0x1adf97(0xb02)]>0x0&&_0x5c7e46[_0x1adf97(0x669)]()&&_0x5c7e46['battler']()['stepForward']();},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x717)]=function(_0x1d227b){const _0x38f751=_0x3df63e,_0x159a7d=Math['round'](Graphics[_0x38f751(0x8b9)]/0x3),_0x273673=Math[_0x38f751(0x76b)](Graphics[_0x38f751(0x8b9)]/$gameParty['battleMembers']()[_0x38f751(0xb02)]),_0x5882b0=Math[_0x38f751(0x46d)](_0x159a7d,_0x273673),_0x450d1c=this[_0x38f751(0x62a)](VisuMZ['BattleCore'][_0x38f751(0x5eb)][_0x38f751(0x742)][_0x38f751(0x2ec)]),_0x586275=_0x273673*_0x1d227b['index']()+(_0x273673-_0x5882b0)/0x2,_0x4b903a=SceneManager[_0x38f751(0x8e2)][_0x38f751(0x802)]['y']-_0x450d1c;this[_0x38f751(0xabe)](_0x586275,_0x4b903a,_0x5882b0,_0x450d1c),this['createContents'](),this[_0x38f751(0x593)](0x1);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x197)]=function(_0xa3229f){const _0x59f0be=_0x3df63e,_0x4766f9=SceneManager[_0x59f0be(0x8e2)][_0x59f0be(0x778)]();this['move'](_0x4766f9['x'],_0x4766f9['y'],_0x4766f9['width'],_0x4766f9[_0x59f0be(0xb78)]),this[_0x59f0be(0x5ee)](),this[_0x59f0be(0x593)](0x0);},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0xbc6)]=function(){const _0x46feee=_0x3df63e;if(this[_0x46feee(0x5c1)]){const _0x22b9dc=this[_0x46feee(0x5c1)][_0x46feee(0xa39)],_0x2d5d72=this[_0x46feee(0x366)]-0x8,_0x38aeaf=this[_0x46feee(0xb78)],_0xc249f5=this[_0x46feee(0x252)],_0x513be7=ColorManager[_0x46feee(0xa68)](),_0x1f45ed=ColorManager[_0x46feee(0x69d)]();this[_0x46feee(0x5c1)]['x']=0x4,_0x22b9dc[_0x46feee(0x775)](_0x2d5d72,_0x38aeaf),_0x22b9dc[_0x46feee(0x740)](0x0,0x0,_0x2d5d72,_0xc249f5,_0x1f45ed,_0x513be7,!![]),_0x22b9dc[_0x46feee(0xbaf)](0x0,_0xc249f5,_0x2d5d72,_0x38aeaf-_0xc249f5*0x2,_0x513be7),_0x22b9dc['gradientFillRect'](0x0,_0x38aeaf-_0xc249f5,_0x2d5d72,_0xc249f5,_0x513be7,_0x1f45ed,!![]),this[_0x46feee(0x5c1)][_0x46feee(0x406)](0x0,0x0,_0x2d5d72,_0x38aeaf);}},Window_ActorCommand[_0x3df63e(0x655)][_0x3df63e(0x805)]=function(){const _0x1f8f12=_0x3df63e;if(!this[_0x1f8f12(0x331)])return;const _0x3e9a6c=VisuMZ[_0x1f8f12(0xa69)][_0x1f8f12(0x5eb)]['ActorCmd'],_0x1c110c=this[_0x1f8f12(0xa43)]();switch(_0x1c110c){case _0x1f8f12(0x7fc):this[_0x1f8f12(0x55c)]($dataSkills[this[_0x1f8f12(0x331)]['attackSkillId']()]);break;case _0x1f8f12(0x912):this['setHelpWindowItem']($dataSkills[this['_actor'][_0x1f8f12(0xba4)]()]);break;case _0x1f8f12(0x968):const _0x5c2134=_0x3e9a6c[_0x1f8f12(0x3f4)],_0x1da2b0=_0x5c2134[_0x1f8f12(0x4f8)]($dataSystem[_0x1f8f12(0x2cc)][this[_0x1f8f12(0x307)]()]);this[_0x1f8f12(0xa49)][_0x1f8f12(0x1c5)](_0x1da2b0);break;case'singleSkill':this[_0x1f8f12(0x55c)]($dataSkills[this[_0x1f8f12(0x307)]()]);break;case'item':this['_helpWindow'][_0x1f8f12(0x1c5)](_0x3e9a6c[_0x1f8f12(0x340)]);break;case _0x1f8f12(0xada):this['_helpWindow'][_0x1f8f12(0x1c5)](_0x3e9a6c['HelpEscape']);break;case'autoBattle':this[_0x1f8f12(0xa49)][_0x1f8f12(0x1c5)](_0x3e9a6c['HelpAutoBattle']);break;default:this[_0x1f8f12(0xa49)][_0x1f8f12(0x1c5)]('');break;}},VisuMZ['BattleCore'][_0x3df63e(0x880)]=Window_BattleStatus['prototype']['initialize'],Window_BattleStatus[_0x3df63e(0x655)]['initialize']=function(_0xe3071e){const _0xc9d46c=_0x3df63e;VisuMZ[_0xc9d46c(0xa69)][_0xc9d46c(0x880)]['call'](this,_0xe3071e),this[_0xc9d46c(0x533)](),this[_0xc9d46c(0x3fc)]();},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0xb6b)]=function(){const _0x5e5d23=_0x3df63e;if(this[_0x5e5d23(0xb2b)])return this[_0x5e5d23(0xb2b)];return this[_0x5e5d23(0xb2b)]=SceneManager[_0x5e5d23(0x8e2)][_0x5e5d23(0xb6b)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x3df63e(0x655)]['initBattleCore']=function(){const _0xfe3bf3=_0x3df63e;this[_0xfe3bf3(0x60d)]=this[_0xfe3bf3(0x69a)]();const _0x5155df=VisuMZ[_0xfe3bf3(0xa69)][_0xfe3bf3(0x5eb)][_0xfe3bf3(0x742)];_0x5155df[_0xfe3bf3(0x226)]&&('UNIyk'===_0xfe3bf3(0x18a)?this[_0xfe3bf3(0x7a6)]=0x0:this[_0xfe3bf3(0x48a)]());},Window_BattleStatus[_0x3df63e(0x655)]['isFrameVisible']=function(){const _0x3f48a8=_0x3df63e,_0x2d2be8=VisuMZ['BattleCore'][_0x3f48a8(0x5eb)][_0x3f48a8(0x742)];if(_0x2d2be8[_0x3f48a8(0x46c)])return!![];const _0x5cd9a5=this[_0x3f48a8(0xb6b)]();switch(_0x5cd9a5){case _0x3f48a8(0x672):case _0x3f48a8(0x84a):return!![];break;case _0x3f48a8(0xbb7):case'xp':case _0x3f48a8(0xbc2):default:return![];break;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x8a2)]=function(){const _0x4c256e=_0x3df63e;if(this['isFrameVisible']()){if(_0x4c256e(0x75e)===_0x4c256e(0x75e))return 0x0;else{if(_0x3e03d7[_0x4c256e(0x924)]>_0x54fcfd)_0x2e2ef7+=_0x5876e9[_0x4c256e(0x366)]/0x2+_0x5cc080;if(_0x14ff8f['_baseX']<_0x43013d)_0x273228-=_0x88608e[_0x4c256e(0x366)]/0x2+_0x2bd9ed;}}else return 0xa;},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x481)]=function(){const _0x2eb82c=_0x3df63e,_0x3f89e8=this[_0x2eb82c(0xb6b)]();switch(_0x3f89e8){case _0x2eb82c(0x672):return 0x1;break;case'xp':case _0x2eb82c(0xbc2):return $gameParty[_0x2eb82c(0x9c3)]()['length'];break;case _0x2eb82c(0xbb7):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x3df63e(0x655)]['itemHeight']=function(){const _0x4bcd93=_0x3df63e,_0x1a95c3=this[_0x4bcd93(0xb6b)]();switch(_0x1a95c3){case _0x4bcd93(0x672):return Window_StatusBase[_0x4bcd93(0x655)]['itemHeight']['call'](this);break;case'default':case'xp':case _0x4bcd93(0xbc2):default:return this[_0x4bcd93(0x55d)];break;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x882)]=function(){const _0x1713cb=_0x3df63e,_0x40dcd6=this[_0x1713cb(0xb6b)]();switch(_0x40dcd6){case'list':return Window_StatusBase['prototype']['rowSpacing'][_0x1713cb(0x5d9)](this);break;case'default':case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0xb29)]=function(){const _0x5090f7=_0x3df63e;this[_0x5090f7(0x69a)]()?_0x5090f7(0x278)===_0x5090f7(0x278)?Window_StatusBase[_0x5090f7(0x655)][_0x5090f7(0xb29)][_0x5090f7(0x5d9)](this):_0x2526fd+=_0x434963(_0x14d30a['$1'])/0x64:_0x5090f7(0x801)!==_0x5090f7(0x591)?this[_0x5090f7(0x252)]=0x8:(_0x480c15['prototype']['initMembers']['call'](this),this[_0x5090f7(0xb72)]=null,this[_0x5090f7(0x43f)]=![],this[_0x5090f7(0x254)]='',this['_battlerHue']=0x0,this[_0x5090f7(0xa2c)]=null,this[_0x5090f7(0x5ce)]=0x0,this[_0x5090f7(0x643)]=0x0,this['createMainSprite'](),this[_0x5090f7(0x8e1)]());},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x925)]=function(){const _0x490f13=_0x3df63e,_0x312101=VisuMZ[_0x490f13(0xa69)][_0x490f13(0x5eb)]['BattleLayout'];if(_0x312101[_0x490f13(0x46c)])this[_0x490f13(0x7ee)]=ImageManager[_0x490f13(0x9d0)](_0x312101[_0x490f13(0x46c)]);else{if(_0x490f13(0x2e8)!=='hosBu')Window_StatusBase[_0x490f13(0x655)][_0x490f13(0x925)][_0x490f13(0x5d9)](this);else{const _0x4201e7=_0x373dd6[_0x490f13(0xa69)][_0x490f13(0x5eb)]['BattleLayout'];if(_0x4201e7[_0x490f13(0x73a)])return;_0x483f26[_0x490f13(0x655)][_0x490f13(0x7a8)][_0x490f13(0x5d9)](this,_0x56dc21);}}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x7a8)]=function(_0x3515ca){const _0x5675aa=_0x3df63e,_0x486d6e=VisuMZ['BattleCore']['Settings'][_0x5675aa(0x742)];if(_0x486d6e['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x5675aa(0x655)]['drawItemBackground'][_0x5675aa(0x5d9)](this,_0x3515ca);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x603)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0x2dd27c=_0x3df63e;Window_StatusBase['prototype']['update'][_0x2dd27c(0x5d9)](this),this[_0x2dd27c(0x653)](),this['updateEffectContainers']();if(this['battleLayoutStyle']()===_0x2dd27c(0x84a))this[_0x2dd27c(0x8cf)]();},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x653)]=function(){const _0x76d68c=_0x3df63e;if($gameTemp[_0x76d68c(0x650)]())this[_0x76d68c(0x68d)](),this[_0x76d68c(0x27a)]=![],$gameTemp['clearBattleRefreshRequest']();else this[_0x76d68c(0x27a)]&&(_0x76d68c(0x7f0)!==_0x76d68c(0x7f0)?(this[_0x76d68c(0x3fa)][_0x76d68c(0x9cd)](_0x76d68c(0xbbc),_0xaf0204['emerge'][_0x76d68c(0x4f8)](_0xc8ffd)),this['_logWindow']['push'](_0x76d68c(0x779)),_0x4cfd5a=!![]):(this[_0x76d68c(0x27a)]=![],this[_0x76d68c(0xbcf)](),this[_0x76d68c(0x6d5)]()));},Window_BattleStatus[_0x3df63e(0x655)]['show']=function(){const _0x4d2466=_0x3df63e;Window_StatusBase[_0x4d2466(0x655)][_0x4d2466(0x1d7)][_0x4d2466(0x5d9)](this);if(!$gameSystem[_0x4d2466(0x8e3)]())this[_0x4d2466(0xbcf)]();},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x2ea)]=function(){const _0x4767af=_0x3df63e;if(this[_0x4767af(0x1da)]===Window_BattleStatus)return;Window_StatusBase[_0x4767af(0x655)]['hide'][_0x4767af(0x5d9)](this);},Window_BattleStatus['prototype']['drawBackgroundRect']=function(_0x583b02){const _0x218229=_0x3df63e,_0x466d58=this[_0x218229(0xb6b)]();switch(_0x466d58){case'xp':case _0x218229(0xbc2):break;case _0x218229(0xbb7):case _0x218229(0x672):case _0x218229(0x84a):default:return Window_StatusBase['prototype'][_0x218229(0xacb)][_0x218229(0x5d9)](this,_0x583b02);break;}},VisuMZ['BattleCore'][_0x3df63e(0xb5d)]=Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x294)],Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x294)]=function(_0x3defd9){const _0x5d9d28=_0x3df63e,_0x543b05=this['battleLayoutStyle']();switch(_0x543b05){case'list':this[_0x5d9d28(0x1ad)](_0x3defd9);break;case'xp':this[_0x5d9d28(0x9cf)](_0x3defd9);break;case _0x5d9d28(0xbc2):this[_0x5d9d28(0x5d1)](_0x3defd9);break;case _0x5d9d28(0xbb7):case _0x5d9d28(0x84a):default:VisuMZ[_0x5d9d28(0xa69)][_0x5d9d28(0xb5d)][_0x5d9d28(0x5d9)](this,_0x3defd9);break;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x901)]=function(_0x2be552){const _0x383be4=_0x3df63e,_0x13aa99=this[_0x383be4(0xb6b)]();if(!$gameSystem[_0x383be4(0x8e3)]())this[_0x383be4(0x19b)](_0x2be552);switch(_0x13aa99){case _0x383be4(0x672):this['drawItemStatusListStyle'](_0x2be552);break;case'xp':case'portrait':case _0x383be4(0xbb7):case'border':default:this[_0x383be4(0xba3)](_0x2be552);break;}},Window_BattleStatus['prototype'][_0x3df63e(0x34a)]=function(){const _0x36d58a=_0x3df63e,_0x4096aa=this[_0x36d58a(0xb6b)]();if(['xp'][_0x36d58a(0xa22)](_0x4096aa)&&!$gameSystem[_0x36d58a(0x8e3)]()){if(_0x36d58a(0x37e)!=='FZczE'){if(!_0x13e122[_0x36d58a(0x963)])return;const _0x411d59=_0x4b49e8[_0x36d58a(0x8e2)][_0x36d58a(0x449)];if(!_0x411d59)return;_0x4c42d0[_0x36d58a(0x368)](_0x3c2668,_0x863802);const _0x8584df=_0x2954c9['X']||0x0,_0x37dc20=_0x503656['Y']||0x0,_0x2ed8e0=_0x4e3d49[_0x36d58a(0xa5b)]||0x0,_0x5e5474=_0x43d0aa[_0x36d58a(0xaf2)]||0x0,_0x3c23e8=_0x3fb19e[_0x36d58a(0x88d)]||0x1;_0x411d59[_0x36d58a(0x9a7)](_0x8584df,_0x37dc20,_0x2ed8e0,_0x5e5474,_0x3c23e8);}else{this[_0x36d58a(0x6af)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x36d58a(0x655)][_0x36d58a(0x34a)]['call'](this);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x19b)]=function(_0x33b0f6){const _0x24ed26=_0x3df63e,_0x1d3b2c=this[_0x24ed26(0x355)](_0x33b0f6)['battler']();if(!_0x1d3b2c)return;const _0x62084f=this[_0x24ed26(0xb6b)](),_0x52265b=this[_0x24ed26(0x6cd)](_0x33b0f6);let _0x2ec2af=Math[_0x24ed26(0x76b)](_0x52265b['x']+_0x52265b['width']/0x2)+this[_0x24ed26(0x252)];if([_0x24ed26(0x672)]['includes'](_0x62084f)){if(_0x24ed26(0x5fc)===_0x24ed26(0x30e)){const _0x429c57=_0x2b46d1(_0x439652['$1'])['toUpperCase']()[_0x24ed26(0x9d2)]();if(_0x429c57===_0x24ed26(0xbb0))return'MANUAL';if(_0x448d88[_0x24ed26(0x666)][_0x429c57])return _0x429c57;}else _0x2ec2af=_0x52265b['width']/$gameParty['battleMembers']()[_0x24ed26(0xb02)],_0x2ec2af*=_0x33b0f6,_0x2ec2af+=_0x52265b[_0x24ed26(0x366)]/$gameParty['battleMembers']()['length']/0x2;}let _0x41b672=Math[_0x24ed26(0x76b)](this[_0x24ed26(0xbd0)](_0x33b0f6,_0x1d3b2c,_0x52265b));_0x1d3b2c[_0x24ed26(0x8d3)](_0x2ec2af,_0x41b672),this['addChildAt'](_0x1d3b2c,0x1),_0x1d3b2c[_0x24ed26(0x1d7)](),this[_0x24ed26(0x6d5)]();},Window_BattleStatus['prototype'][_0x3df63e(0xbd0)]=function(_0x3feaed,_0xd4f27,_0x11bacc){const _0x2a0909=_0x3df63e,_0x5d80e7=VisuMZ[_0x2a0909(0xa69)][_0x2a0909(0x5eb)][_0x2a0909(0x742)],_0x481c5f=this[_0x2a0909(0xb6b)]();if(_0x481c5f==='xp'){const _0xa9e37b=_0x5d80e7[_0x2a0909(0x3f0)];switch(_0xa9e37b['toLowerCase']()['trim']()){case _0x2a0909(0x439):return _0x11bacc['height']-_0xd4f27[_0x2a0909(0x4eb)]['height']/0x4;break;case _0x2a0909(0x7b6):const _0x26f8ba=_0x5d80e7[_0x2a0909(0x520)];return(_0x11bacc[_0x2a0909(0xb78)]+(_0xd4f27[_0x2a0909(0xb78)]||_0x26f8ba))/0x2;break;case'top':return 0x0;case _0x2a0909(0xae2):default:return this[_0x2a0909(0x9fd)](_0x11bacc);break;}}else{if(_0x481c5f===_0x2a0909(0xbc2)){}}return _0xd4f27[_0x2a0909(0xb78)];},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x1ad)]=function(_0x14ac66){const _0x495a33=_0x3df63e;if(!VisuMZ['BattleCore'][_0x495a33(0x5eb)][_0x495a33(0x742)][_0x495a33(0x212)])return;const _0x250caa=this['actor'](_0x14ac66),_0x55567a=this[_0x495a33(0x6cd)](_0x14ac66);_0x55567a['width']=ImageManager[_0x495a33(0x855)],_0x55567a['height']-=0x2,this[_0x495a33(0x8b3)](_0x250caa,_0x55567a['x']+0x1,_0x55567a['y']+0x1,_0x55567a[_0x495a33(0x366)],_0x55567a[_0x495a33(0xb78)]);},Window_BattleStatus[_0x3df63e(0x655)]['drawItemStatusListStyle']=function(_0x83aed1){const _0x51c222=_0x3df63e,_0x1b0173=VisuMZ[_0x51c222(0xa69)]['Settings'][_0x51c222(0x742)],_0x273561=$dataSystem[_0x51c222(0x3ee)]?0x4:0x3,_0x3224c4=_0x273561*0x80+(_0x273561-0x1)*0x8+0x4,_0x1388ab=this[_0x51c222(0x355)](_0x83aed1),_0x4e2ff3=this['itemRect'](_0x83aed1);let _0x5dcfcf=_0x4e2ff3['x']+this[_0x51c222(0x252)];if(_0x1b0173[_0x51c222(0x212)])_0x5dcfcf=_0x4e2ff3['x']+ImageManager['faceWidth']+0x8;else{if(_0x51c222(0x904)===_0x51c222(0x2fd)){this[_0x51c222(0x492)][_0x51c222(0x7ad)]=_0x17cdcc[_0x51c222(0x4a2)]();const _0x5b946c=_0x414a94[_0x51c222(0x355)]();if(_0x5b946c===this[_0x51c222(0x492)]['actor'])return;this[_0x51c222(0x492)][_0x51c222(0x355)]=_0x5b946c||this[_0x51c222(0x492)][_0x51c222(0x355)];if(!_0x5b946c)return;else{if(_0x5b946c[_0x51c222(0x193)]()===''){this[_0x51c222(0x492)]['bitmap']=_0x5dd5b3[_0x51c222(0x4e4)];return;}else{const _0x25de0d=_0x38ea1[_0x51c222(0x5e5)](_0x5b946c[_0x51c222(0x193)]());_0x25de0d[_0x51c222(0x92a)](this[_0x51c222(0xa86)][_0x51c222(0x96b)](this,_0x25de0d));}}}else _0x5dcfcf+=ImageManager[_0x51c222(0x962)];}const _0x428023=Math[_0x51c222(0x76b)](Math['min'](_0x4e2ff3['x']+_0x4e2ff3[_0x51c222(0x366)]-_0x3224c4,_0x5dcfcf)),_0x4259c1=Math[_0x51c222(0x76b)](_0x4e2ff3['y']+(_0x4e2ff3[_0x51c222(0xb78)]-Sprite_Name[_0x51c222(0x655)][_0x51c222(0x38c)]())/0x2),_0x3f82dd=Math[_0x51c222(0x76b)](_0x428023-ImageManager['iconWidth']/0x2-0x4),_0x45e039=Math[_0x51c222(0x76b)](_0x4e2ff3['y']+(_0x4e2ff3[_0x51c222(0xb78)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x51c222(0xa45)]/0x2);let _0x3d5aec=_0x428023+0x88;const _0x210fad=_0x4259c1;this[_0x51c222(0x6d3)](_0x1388ab,_0x428023-0x4+(_0x1b0173[_0x51c222(0x877)]||0x0),_0x4259c1+(_0x1b0173[_0x51c222(0x2f9)]||0x0)),this['placeActorName'](_0x1388ab,_0x428023+(_0x1b0173[_0x51c222(0x4df)]||0x0),_0x4259c1+(_0x1b0173['NameOffsetY']||0x0)),this['placeStateIcon'](_0x1388ab,_0x3f82dd+(_0x1b0173['StateIconOffsetX']||0x0),_0x45e039+(_0x1b0173[_0x51c222(0x5cc)]||0x0)),this['placeGauge'](_0x1388ab,'hp',_0x3d5aec+0x88*0x0+(_0x1b0173[_0x51c222(0x716)]||0x0),_0x210fad+(_0x1b0173[_0x51c222(0x59d)]||0x0)),this['placeGauge'](_0x1388ab,'mp',_0x3d5aec+0x88*0x1+(_0x1b0173[_0x51c222(0x787)]||0x0),_0x210fad+(_0x1b0173[_0x51c222(0x8fa)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x51c222(0x323)](_0x1388ab,'tp',_0x3d5aec+0x88*0x2+(_0x1b0173[_0x51c222(0x626)]||0x0),_0x210fad+(_0x1b0173['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x9cf)]=function(_0x52aaab){const _0xe3f988=_0x3df63e;if(!$gameSystem[_0xe3f988(0x8e3)]())return;VisuMZ[_0xe3f988(0xa69)][_0xe3f988(0xb5d)][_0xe3f988(0x5d9)](this,_0x52aaab);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0xba3)]=function(_0x281a22){const _0x188877=_0x3df63e,_0x91cc4c=VisuMZ[_0x188877(0xa69)][_0x188877(0x5eb)]['BattleLayout'],_0x28b0bc=this[_0x188877(0x355)](_0x281a22),_0x674397=this[_0x188877(0x6cd)](_0x281a22),_0x3cc042=Math[_0x188877(0x76b)](_0x674397['x']+(_0x674397['width']-0x80)/0x2),_0x2b4f5e=this[_0x188877(0x9fd)](_0x674397);let _0x2f9335=_0x3cc042-ImageManager[_0x188877(0x962)]/0x2-0x4,_0x1d44e5=_0x2b4f5e+ImageManager[_0x188877(0xa45)]/0x2;if(_0x2f9335-ImageManager[_0x188877(0x962)]/0x2<_0x674397['x']){if(_0x188877(0x3d1)!==_0x188877(0x1ac))_0x2f9335=_0x3cc042+ImageManager[_0x188877(0x962)]/0x2-0x4,_0x1d44e5=_0x2b4f5e-ImageManager[_0x188877(0xa45)]/0x2;else{if(this['_defeatedEnemies']===_0x76d0b)this[_0x188877(0x533)]();return this[_0x188877(0x8c7)];}}const _0x21c332=_0x3cc042,_0x914940=this[_0x188877(0x3ff)](_0x674397);this['placeTimeGauge'](_0x28b0bc,_0x3cc042+(_0x91cc4c[_0x188877(0x877)]||0x0),_0x2b4f5e+(_0x91cc4c['TpbGaugeOffsetY']||0x0)),this[_0x188877(0x6f1)](_0x28b0bc,_0x3cc042+(_0x91cc4c['NameOffsetX']||0x0),_0x2b4f5e+(_0x91cc4c[_0x188877(0x319)]||0x0)),this[_0x188877(0x99a)](_0x28b0bc,_0x2f9335+(_0x91cc4c[_0x188877(0x820)]||0x0),_0x1d44e5+(_0x91cc4c[_0x188877(0x5cc)]||0x0)),this[_0x188877(0x323)](_0x28b0bc,'hp',_0x21c332+(_0x91cc4c[_0x188877(0x716)]||0x0),_0x914940+(_0x91cc4c[_0x188877(0x59d)]||0x0)),this[_0x188877(0x323)](_0x28b0bc,'mp',_0x21c332+(_0x91cc4c['MpGaugeOffsetX']||0x0),_0x914940+this[_0x188877(0xab7)]()+(_0x91cc4c[_0x188877(0x8fa)]||0x0));if($dataSystem[_0x188877(0x3ee)]){if(_0x188877(0x9b8)!==_0x188877(0x8dc))this[_0x188877(0x323)](_0x28b0bc,'tp',_0x21c332+(_0x91cc4c[_0x188877(0x626)]||0x0),_0x914940+this[_0x188877(0xab7)]()*0x2+(_0x91cc4c[_0x188877(0xb4f)]||0x0));else{const _0x1e0a62=_0x3ae6b2[_0x188877(0x45f)];if(_0x1e0a62[_0x188877(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x465e28(_0x2b25b5['$1'])*0.01;else{if(_0x1e0a62[_0x188877(0x64e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x5ecde3(_0x4223d7['$1'])||0x0;}}}},Window_BattleStatus[_0x3df63e(0x655)]['showPortraits']=function(_0x2c0951){const _0x251f54=_0x3df63e;if(!VisuMZ[_0x251f54(0xa69)]['Settings']['BattleLayout']['ShowPortraits'])return![];if(_0x2c0951[_0x251f54(0x31d)]())return!![];return Imported[_0x251f54(0x306)]&&_0x2c0951['getMenuImage']();},Game_Actor['prototype'][_0x3df63e(0x985)]=function(){const _0x2cc6ac=_0x3df63e;if(this[_0x2cc6ac(0x355)]()['note'][_0x2cc6ac(0x64e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2cc6ac(0x355)]()[_0x2cc6ac(0x45f)][_0x2cc6ac(0x64e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x2cc6ac(0x34d)==='eKIBd')return Number(RegExp['$1']);else{if(_0x1da419){const _0x4c244a=_0x4da498[_0x2cc6ac(0x246)](_0x427fc3);return _0x4c244a>=0x0?[_0x2f7f7f[_0x4c244a+0x1]||_0x497e69]:[_0x3b904e];}}}}return 0x0;},Game_Actor[_0x3df63e(0x655)][_0x3df63e(0x6ff)]=function(){const _0x433d63=_0x3df63e;if(this['actor']()['note'][_0x433d63(0x64e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x433d63(0x355)]()[_0x433d63(0x45f)][_0x433d63(0x64e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x3df63e(0x655)]['drawItemImagePortraitStyle']=function(_0x3ac37e){const _0x4c3422=_0x3df63e,_0x557bd1=this[_0x4c3422(0x355)](_0x3ac37e);if(this['showPortraits'](_0x557bd1)){const _0x279c9b=_0x4c3422(0x28f)['format'](_0x557bd1['actorId']()),_0x34910f=this[_0x4c3422(0x73f)](_0x279c9b,Sprite),_0x1205ed=_0x557bd1['getBattlePortraitFilename']();_0x1205ed!==''?_0x34910f[_0x4c3422(0xa39)]=ImageManager[_0x4c3422(0x5e5)](_0x1205ed):_0x34910f[_0x4c3422(0xa39)]=ImageManager[_0x4c3422(0x4e4)];const _0x14d802=this[_0x4c3422(0x6cd)](_0x3ac37e);_0x34910f[_0x4c3422(0x1dd)]['x']=0.5,_0x34910f['anchor']['y']=0x1;let _0x363bdf=Math['round'](_0x14d802['x']+_0x14d802[_0x4c3422(0x366)]/0x2)+this[_0x4c3422(0x252)];_0x363bdf+=_0x557bd1[_0x4c3422(0x985)]();let _0x5e4ab8=Math[_0x4c3422(0x76b)](this[_0x4c3422(0xb78)]);_0x5e4ab8+=_0x557bd1[_0x4c3422(0x6ff)](),_0x34910f[_0x4c3422(0xabe)](_0x363bdf,_0x5e4ab8);const _0x3478a6=VisuMZ['BattleCore']['Settings'][_0x4c3422(0x742)][_0x4c3422(0xb10)];_0x34910f[_0x4c3422(0x5c3)]['x']=_0x3478a6,_0x34910f[_0x4c3422(0x5c3)]['y']=_0x3478a6,_0x34910f[_0x4c3422(0x1d7)]();}else{const _0x10fe59=this[_0x4c3422(0x53a)](_0x3ac37e);this['drawActorFace'](_0x557bd1,_0x10fe59['x'],_0x10fe59['y'],_0x10fe59[_0x4c3422(0x366)],_0x10fe59[_0x4c3422(0xb78)]);}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x73f)]=function(_0x5142cc,_0x3d21f7){const _0x3c29ed=_0x3df63e,_0x5b6e6c=this[_0x3c29ed(0x2bc)];if(_0x5b6e6c[_0x5142cc])return _0x5b6e6c[_0x5142cc];else{if(_0x3c29ed(0x4b7)===_0x3c29ed(0x231)){if(!_0x213066[_0x3c29ed(0x2a9)]())return;if(!_0x40a86f[_0x3c29ed(0x808)])return;_0x5287fd['ConvertParams'](_0x58abee,_0x142678);const _0x508ef7=_0x2c6850['getLastPluginCommandInterpreter'](),_0x52d5e6=_0x2b47e6['CreateActionSequenceTargets'](_0x5c415e['Targets']),_0x387755=_0xf9a436[_0x3c29ed(0x482)];_0x5d3392[_0x3c29ed(0x749)](_0x52d5e6,_0x5164b4['Duration'],_0x241efd[_0x3c29ed(0x6dd)]);if(_0x387755)_0x508ef7[_0x3c29ed(0x671)](_0x3c29ed(0x189));}else{const _0x432e5b=new _0x3d21f7();return _0x5b6e6c[_0x5142cc]=_0x432e5b,this[_0x3c29ed(0x6df)](_0x432e5b),this[_0x3c29ed(0x6df)](this[_0x3c29ed(0xac9)]),_0x432e5b;}}},Window_BattleStatus['prototype'][_0x3df63e(0x585)]=function(){const _0x1cbf49=_0x3df63e;this[_0x1cbf49(0xb0a)](),this['_createEffectsContainer'](),Window_StatusBase[_0x1cbf49(0x655)][_0x1cbf49(0x585)][_0x1cbf49(0x5d9)](this),this[_0x1cbf49(0x934)]();},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0xb0a)]=function(){const _0x418965=_0x3df63e;this[_0x418965(0xac9)]=new Sprite(),this[_0x418965(0xac9)]['filters']=[new PIXI[(_0x418965(0x933))][(_0x418965(0x27b))]()],this['_cursorArea'][_0x418965(0x7de)]=new Rectangle(),this[_0x418965(0xac9)]['move'](this[_0x418965(0x6d0)],this[_0x418965(0x6d0)]),this[_0x418965(0x699)](this[_0x418965(0xac9)]);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0xbcc)]=function(){const _0x3a69d3=_0x3df63e;this[_0x3a69d3(0x370)]=new Sprite(),this['addChild'](this[_0x3a69d3(0x370)]);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x934)]=function(){const _0x492419=_0x3df63e;this['_damageContainer']=new Sprite(),this[_0x492419(0x699)](this[_0x492419(0x8ad)]);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x73d)]=function(){const _0x407c00=_0x3df63e;this[_0x407c00(0x44a)]=new Sprite();for(let _0x3d4b5f=0x0;_0x3d4b5f<0x9;_0x3d4b5f++){this[_0x407c00(0x44a)][_0x407c00(0x699)](new Sprite());}this[_0x407c00(0xac9)][_0x407c00(0x699)](this[_0x407c00(0x44a)]);},Window_BattleStatus[_0x3df63e(0x655)]['_updateClientArea']=function(){const _0x58fa1d=_0x3df63e;Window_StatusBase[_0x58fa1d(0x655)][_0x58fa1d(0xa0f)][_0x58fa1d(0x5d9)](this),this[_0x58fa1d(0x989)]();},Window_BattleStatus['prototype'][_0x3df63e(0x989)]=function(){const _0x21567d=_0x3df63e,_0x5939f3=this[_0x21567d(0x6d0)];this['_cursorArea'][_0x21567d(0xabe)](_0x5939f3,_0x5939f3),this[_0x21567d(0xac9)]['x']=_0x5939f3-this[_0x21567d(0x900)]['x'],this[_0x21567d(0xac9)]['y']=_0x5939f3-this[_0x21567d(0x900)]['y'],this['innerWidth']>0x0&&this[_0x21567d(0x55d)]>0x0?'rHlPF'!==_0x21567d(0x3f5)?this[_0x21567d(0xac9)][_0x21567d(0x7ad)]=this[_0x21567d(0x4ae)]():this[_0x21567d(0x74e)](_0x21567d(0x860)):this[_0x21567d(0xac9)][_0x21567d(0x7ad)]=![];},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x6e2)]=function(){const _0x4af21b=_0x3df63e;Window_StatusBase[_0x4af21b(0x655)][_0x4af21b(0x6e2)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x3df63e(0x655)]['_updateCursorFilterArea']=function(){const _0x28cc1a=_0x3df63e,_0x475fcc=this[_0x28cc1a(0xac9)]['worldTransform']['apply'](new Point(0x0,0x0)),_0xa8a4b8=this['_cursorArea'][_0x28cc1a(0x7de)];_0xa8a4b8['x']=_0x475fcc['x']+this['origin']['x'],_0xa8a4b8['y']=_0x475fcc['y']+this[_0x28cc1a(0x900)]['y'],_0xa8a4b8[_0x28cc1a(0x366)]=this[_0x28cc1a(0xb94)],_0xa8a4b8[_0x28cc1a(0xb78)]=this[_0x28cc1a(0x55d)];},Window_BattleStatus['prototype']['refreshActorPortrait']=function(_0x2dfa8b){const _0x40a88d=_0x3df63e;if(this[_0x40a88d(0xb6b)]()!==_0x40a88d(0xbc2))return;this[_0x40a88d(0x5d1)](_0x2dfa8b[_0x40a88d(0xb32)]());},Window_BattleStatus[_0x3df63e(0x655)]['addDamageSprite']=function(_0x35ad86,_0xad7b66){const _0x507c3a=_0x3df63e;if(!this[_0x507c3a(0x8ad)])return;if(!_0x35ad86)return;if(!_0xad7b66)return;const _0xbf3d11=this[_0x507c3a(0x6cd)](_0xad7b66['index']());_0xbf3d11['x']+=_0xbf3d11[_0x507c3a(0x366)]/0x2+this[_0x507c3a(0x252)],_0x35ad86['x']=_0xbf3d11['x'],_0x35ad86['y']=_0xbf3d11['y'],this[_0x507c3a(0x8ad)]['addChild'](_0x35ad86);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x393)]=function(_0x3fb9a4){const _0x35cfe0=_0x3df63e;if(!this[_0x35cfe0(0x8ad)])return;if(!_0x3fb9a4)return;this[_0x35cfe0(0x8ad)][_0x35cfe0(0x541)](_0x3fb9a4);},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x8cf)]=function(){const _0x2b17aa=_0x3df63e;if(!this[_0x2b17aa(0x33d)]())return;if(!this['_borderPortraitSprite'])this[_0x2b17aa(0x6ab)]();this[_0x2b17aa(0x596)](),this[_0x2b17aa(0x47e)]();},Window_BattleStatus[_0x3df63e(0x655)]['isBorderStylePortraitShown']=function(){const _0x31204a=_0x3df63e;if(this[_0x31204a(0x1da)]!==Window_BattleStatus)return![];if(!SceneManager[_0x31204a(0x2a9)]())return![];return VisuMZ['BattleCore'][_0x31204a(0x5eb)]['BattleLayout']['ShowPortraitsBorderStyle'];},Window_BattleStatus['prototype'][_0x3df63e(0x6ab)]=function(){const _0x2fb205=_0x3df63e;this[_0x2fb205(0x492)]=new Sprite();const _0x39e0bd=SceneManager[_0x2fb205(0x8e2)],_0x28a2c7=_0x39e0bd[_0x2fb205(0x7b9)]['indexOf'](_0x39e0bd[_0x2fb205(0x998)]);_0x39e0bd[_0x2fb205(0x95f)](this[_0x2fb205(0x492)],_0x28a2c7),this[_0x2fb205(0x492)]['anchor']['x']=0.5,this[_0x2fb205(0x492)][_0x2fb205(0x1dd)]['y']=0x1;const _0x55d790=VisuMZ['BattleCore']['Settings'][_0x2fb205(0x742)][_0x2fb205(0xa9a)];this[_0x2fb205(0x492)][_0x2fb205(0x5c3)]['x']=_0x55d790,this[_0x2fb205(0x492)][_0x2fb205(0x5c3)]['y']=_0x55d790,this[_0x2fb205(0x492)]['y']=this['y']+this[_0x2fb205(0xb78)],this[_0x2fb205(0xa7b)]=0x0;},Window_BattleStatus[_0x3df63e(0x655)]['prepareBorderActor']=function(){const _0x7b7032=_0x3df63e;this[_0x7b7032(0x492)][_0x7b7032(0x7ad)]=BattleManager[_0x7b7032(0x4a2)]();const _0x1880e3=BattleManager[_0x7b7032(0x355)]();if(_0x1880e3===this[_0x7b7032(0x492)][_0x7b7032(0x355)])return;this[_0x7b7032(0x492)]['actor']=_0x1880e3||this[_0x7b7032(0x492)]['actor'];if(!_0x1880e3)return;else{if(_0x1880e3[_0x7b7032(0x193)]()===''){this[_0x7b7032(0x492)][_0x7b7032(0xa39)]=ImageManager[_0x7b7032(0x4e4)];return;}else{if(_0x7b7032(0xaed)==='ZVgGV')return!![];else{const _0x34102d=ImageManager['loadPicture'](_0x1880e3[_0x7b7032(0x193)]());_0x34102d[_0x7b7032(0x92a)](this['processBorderActor'][_0x7b7032(0x96b)](this,_0x34102d));}}}},Window_BattleStatus[_0x3df63e(0x655)]['processBorderActor']=function(_0x3af7ba){const _0x11d3ad=_0x3df63e;this['_borderPortraitDuration']=0x14,this[_0x11d3ad(0x492)][_0x11d3ad(0xa39)]=_0x3af7ba;SceneManager['_scene'][_0x11d3ad(0x9ae)]()?_0x11d3ad(0x32a)!==_0x11d3ad(0x32a)?_0x32abad[_0x11d3ad(0xae2)]=_0x52bf8a(_0x14f3b['$1']):(this[_0x11d3ad(0x492)]['x']=0x0,this[_0x11d3ad(0x2c9)]=Math[_0x11d3ad(0x3dd)](_0x3af7ba[_0x11d3ad(0x366)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x11d3ad(0x366)],this[_0x11d3ad(0x2c9)]=this[_0x11d3ad(0x366)]*0x3/0x4);this['_borderPortraitSprite'][_0x11d3ad(0x7a6)]=0x0,this[_0x11d3ad(0x492)]['y']=this['y']+this['height'];const _0x20fd23=BattleManager[_0x11d3ad(0x355)]();_0x20fd23&&(this[_0x11d3ad(0x2c9)]+=_0x20fd23[_0x11d3ad(0x985)](),this[_0x11d3ad(0x492)]['y']+=_0x20fd23[_0x11d3ad(0x6ff)]());},Window_BattleStatus[_0x3df63e(0x655)]['updateBorderSprite']=function(){const _0x37ae8a=_0x3df63e;if(this[_0x37ae8a(0xa7b)]>0x0){const _0x3433ed=this[_0x37ae8a(0xa7b)],_0x5e6b34=this['_borderPortraitSprite'];_0x5e6b34['x']=(_0x5e6b34['x']*(_0x3433ed-0x1)+this[_0x37ae8a(0x2c9)])/_0x3433ed,_0x5e6b34[_0x37ae8a(0x7a6)]=(_0x5e6b34[_0x37ae8a(0x7a6)]*(_0x3433ed-0x1)+0xff)/_0x3433ed,this[_0x37ae8a(0xa7b)]--;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x5fb)]=function(){const _0x4305ab=_0x3df63e;return;if(this['_effectsContainer']){if(_0x4305ab(0x739)!==_0x4305ab(0xa0b))this[_0x4305ab(0x370)]['x']=this['x'],this[_0x4305ab(0x370)]['y']=this['y'];else{const _0x136a2d=this[_0x4305ab(0x94e)]['indexOf'](this['_lastEnemy']);this[_0x4305ab(0x41c)](_0x136a2d);}}if(this[_0x4305ab(0x8ad)]){if(_0x4305ab(0x832)!==_0x4305ab(0x832)){const _0x529f85=_0x372480['regionId'](_0x3e5429['x'],_0x2457c4['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0x529f85])return this[_0x4305ab(0x949)][_0x529f85];}else this['_damageContainer']['x']=this['x'],this[_0x4305ab(0x8ad)]['y']=this['y'];}},Window_BattleStatus['prototype'][_0x3df63e(0x3fc)]=function(){const _0xd7f010=_0x3df63e,_0x5e6882=VisuMZ[_0xd7f010(0xa69)]['Settings'][_0xd7f010(0x742)];if(_0x5e6882['StatusWindowAttachmentBack']){if(_0xd7f010(0x34e)!==_0xd7f010(0x34e))_0x5564b9+=_0x26d5bd[_0xd7f010(0x962)];else{const _0x11773b=new Sprite();_0x11773b[_0xd7f010(0xa39)]=ImageManager[_0xd7f010(0x9d0)](_0x5e6882[_0xd7f010(0x408)]),_0x11773b['x']=_0x5e6882['StatusWindowAttachmentBackOffsetX']||0x0,_0x11773b['y']=_0x5e6882[_0xd7f010(0xb68)]||0x0,this[_0xd7f010(0x6df)](_0x11773b),this[_0xd7f010(0x630)]=_0x11773b;}}if(_0x5e6882[_0xd7f010(0x622)]){const _0x2cca9a=new Sprite();_0x2cca9a['bitmap']=ImageManager[_0xd7f010(0x9d0)](_0x5e6882[_0xd7f010(0x622)]),_0x2cca9a['x']=_0x5e6882[_0xd7f010(0x3a1)]||0x0,_0x2cca9a['y']=_0x5e6882[_0xd7f010(0xa03)]||0x0,this[_0xd7f010(0x699)](_0x2cca9a),this[_0xd7f010(0xbb5)]=_0x2cca9a;}},Window_BattleStatus[_0x3df63e(0x655)][_0x3df63e(0x6d5)]=function(){const _0x589e5d=_0x3df63e;this[_0x589e5d(0xbb5)]&&this[_0x589e5d(0x699)](this[_0x589e5d(0xbb5)]);if(this['_backAttachmentSprite']){if(_0x589e5d(0x752)!=='QLOxV')this[_0x589e5d(0x6df)](this['_backAttachmentSprite']);else{if(!this[_0x589e5d(0x957)])return 0x0;if(this[_0x589e5d(0x1cb)])return this[_0x589e5d(0x1cb)];const _0x39e0ea=this[_0x589e5d(0xae2)]();return this[_0x589e5d(0x23d)](),this['_cacheTextWidth']=this[_0x589e5d(0xa39)]['measureTextWidth'](_0x39e0ea)||0x1,this[_0x589e5d(0x1cb)];}}},Window_BattleActor['prototype'][_0x3df63e(0x352)]=function(){const _0x388e44=_0x3df63e;return Window_BattleStatus['prototype'][_0x388e44(0x352)]['call'](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x3df63e(0x655)][_0x3df63e(0x394)]=function(){const _0x109347=_0x3df63e,_0x128d09=BattleManager[_0x109347(0x280)](),_0x1b4f3b=this[_0x109347(0x355)](this[_0x109347(0xb32)]());if(!_0x128d09)return!![];if(!_0x128d09[_0x109347(0x918)]())return!![];const _0xb227fa=_0x128d09[_0x109347(0x918)]()['note'];if(_0xb227fa[_0x109347(0x64e)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1b4f3b===BattleManager[_0x109347(0x355)]())return![];}return!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xb46)]=Window_BattleEnemy['prototype']['initialize'],Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(_0x51a908){const _0x53426c=_0x3df63e;this[_0x53426c(0xb65)]=null,VisuMZ[_0x53426c(0xa69)][_0x53426c(0xb46)][_0x53426c(0x5d9)](this,_0x51a908);},Window_BattleEnemy['prototype'][_0x3df63e(0x481)]=function(){const _0x56de3a=_0x3df63e;return this[_0x56de3a(0x8d0)]();},VisuMZ['BattleCore'][_0x3df63e(0x314)]=Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0x1d7)],Window_BattleEnemy['prototype'][_0x3df63e(0x1d7)]=function(){const _0x3d0f9d=_0x3df63e;VisuMZ['BattleCore'][_0x3d0f9d(0x314)][_0x3d0f9d(0x5d9)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0x9f7)]=function(){const _0x174087=_0x3df63e;return $gameTroop[_0x174087(0x529)]()[_0x174087(0x3f6)](0x0);},Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0xbcf)]=function(){const _0x5979a5=_0x3df63e;this['_enemies']=this['validTargets'](),this[_0x5979a5(0x997)](),Window_Selectable[_0x5979a5(0x655)][_0x5979a5(0xbcf)]['call'](this);},Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0x997)]=function(){const _0x18ef91=_0x3df63e;this[_0x18ef91(0x94e)][_0x18ef91(0x89f)]((_0x40775c,_0xaac8f2)=>{const _0x56d91d=_0x18ef91;return _0x40775c[_0x56d91d(0x669)]()[_0x56d91d(0x924)]===_0xaac8f2[_0x56d91d(0x669)]()[_0x56d91d(0x924)]?_0x40775c['battler']()[_0x56d91d(0x560)]-_0xaac8f2[_0x56d91d(0x669)]()[_0x56d91d(0x560)]:_0x40775c[_0x56d91d(0x669)]()['_baseX']-_0xaac8f2[_0x56d91d(0x669)]()[_0x56d91d(0x924)];}),SceneManager[_0x18ef91(0x6e7)]()&&this[_0x18ef91(0x94e)][_0x18ef91(0x414)]();},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x245d9f=_0x3df63e,_0xf3a27=VisuMZ[_0x245d9f(0xa69)][_0x245d9f(0x5eb)][_0x245d9f(0x580)];_0xf3a27[_0x245d9f(0x5be)]?this['autoSelectLastSelected']():this[_0x245d9f(0xa9d)]();},Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0x4c8)]=function(){const _0x4ed291=_0x3df63e;if(this[_0x4ed291(0xb65)]&&this[_0x4ed291(0x94e)][_0x4ed291(0xa22)](this[_0x4ed291(0xb65)])){const _0x2a976e=this[_0x4ed291(0x94e)][_0x4ed291(0x246)](this[_0x4ed291(0xb65)]);this[_0x4ed291(0x41c)](_0x2a976e);}else _0x4ed291(0x7f5)==='hzEJg'?this[_0x4ed291(0x80b)](_0x4ed291(0x576)):this[_0x4ed291(0xa9d)]();},Window_BattleEnemy['prototype'][_0x3df63e(0xa9d)]=function(){const _0x568b25=_0x3df63e,_0x3a74b7=VisuMZ[_0x568b25(0xa69)][_0x568b25(0x5eb)][_0x568b25(0x580)];let _0x56f6ee=![];$gameSystem[_0x568b25(0x8e3)]()?_0x56f6ee=_0x3a74b7['SideviewSelect']:_0x56f6ee=_0x3a74b7['FrontViewSelect'],this[_0x568b25(0x41c)](_0x56f6ee?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x3df63e(0x655)][_0x3df63e(0x2a1)]=function(){const _0x105e40=_0x3df63e;Window_Selectable[_0x105e40(0x655)][_0x105e40(0x2a1)]['call'](this),this['_lastEnemy']=this[_0x105e40(0x7d7)]();},Window_BattleItem[_0x3df63e(0x655)][_0x3df63e(0xa22)]=function(_0x5a127d){const _0x579b1f=_0x3df63e;if(!_0x5a127d)return![];return _0x5a127d[_0x579b1f(0x555)]===0x0||_0x5a127d[_0x579b1f(0x555)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x3df63e(0x655)]=Object[_0x3df63e(0x162)](Window_Base[_0x3df63e(0x655)]),Window_AutoBattleCancel[_0x3df63e(0x655)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x3df63e(0x655)]['initialize']=function(_0x29c163){const _0x59d5c3=_0x3df63e;Window_Base[_0x59d5c3(0x655)][_0x59d5c3(0xb26)][_0x59d5c3(0x5d9)](this,_0x29c163),this['setBackgroundType'](this['bgType']()),this[_0x59d5c3(0xbcf)]();},Window_AutoBattleCancel[_0x3df63e(0x655)][_0x3df63e(0x60a)]=function(){const _0x11a20b=_0x3df63e;return VisuMZ[_0x11a20b(0xa69)][_0x11a20b(0x5eb)]['AutoBattle'][_0x11a20b(0x857)];},Window_AutoBattleCancel[_0x3df63e(0x655)][_0x3df63e(0xbcf)]=function(){const _0x5db7b0=_0x3df63e;this[_0x5db7b0(0x546)][_0x5db7b0(0x6be)]();const _0x483715=VisuMZ[_0x5db7b0(0xa69)][_0x5db7b0(0x5eb)][_0x5db7b0(0xb3c)][_0x5db7b0(0x799)],_0xb837db=_0x483715[_0x5db7b0(0x4f8)](this['okButtonText'](),this[_0x5db7b0(0x1d2)]()),_0xcf22f0=this[_0x5db7b0(0x364)](_0xb837db)[_0x5db7b0(0x366)],_0x3c86ca=Math['floor']((this[_0x5db7b0(0xb94)]-_0xcf22f0)/0x2);this['drawTextEx'](_0xb837db,_0x3c86ca,0x0,_0xcf22f0);},Window_AutoBattleCancel[_0x3df63e(0x655)]['okButtonText']=function(){const _0x1d27c6=_0x3df63e;return Imported[_0x1d27c6(0x1ec)]?TextManager[_0x1d27c6(0x624)]('ok'):VisuMZ[_0x1d27c6(0xa69)][_0x1d27c6(0x5eb)][_0x1d27c6(0xb3c)][_0x1d27c6(0x284)];},Window_AutoBattleCancel[_0x3df63e(0x655)][_0x3df63e(0x1d2)]=function(){const _0x48aaa1=_0x3df63e;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x48aaa1(0x624)]('cancel'):_0x48aaa1(0x984)===_0x48aaa1(0x984)?VisuMZ[_0x48aaa1(0xa69)][_0x48aaa1(0x5eb)][_0x48aaa1(0xb3c)][_0x48aaa1(0x33e)]:_0x59536c[_0x48aaa1(0xa69)]['Game_Action_isForRandom'][_0x48aaa1(0x5d9)](this);},Window_AutoBattleCancel[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0x2b9807=_0x3df63e;Window_Base['prototype'][_0x2b9807(0x54e)]['call'](this),this['updateVisibility'](),this['updateCancel']();},Window_AutoBattleCancel['prototype'][_0x3df63e(0x8ea)]=function(){this['visible']=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0x3df63e(0x655)][_0x3df63e(0xb87)]=function(){const _0x5dbec9=_0x3df63e;if(!BattleManager[_0x5dbec9(0x938)])return;if(Input[_0x5dbec9(0x2c3)]('ok')||Input[_0x5dbec9(0x2c3)](_0x5dbec9(0x794))||TouchInput[_0x5dbec9(0x661)]()||TouchInput['isCancelled']()){if('mUCKx'===_0x5dbec9(0x360))return this[_0x5dbec9(0x3f7)]();else SoundManager[_0x5dbec9(0x9b9)](),BattleManager[_0x5dbec9(0x938)]=![],Input[_0x5dbec9(0x6be)](),TouchInput[_0x5dbec9(0x6be)]();}};function Window_EnemyName(){const _0x235881=_0x3df63e;this[_0x235881(0xb26)](...arguments);}Window_EnemyName[_0x3df63e(0x655)]=Object[_0x3df63e(0x162)](Window_StatusBase[_0x3df63e(0x655)]),Window_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x1da)]=Window_EnemyName,Window_EnemyName[_0x3df63e(0x655)][_0x3df63e(0xb26)]=function(_0x9f4c39){const _0x583ddd=_0x3df63e;this[_0x583ddd(0x8f8)]=_0x9f4c39,this[_0x583ddd(0x25b)]='';const _0x5e9800=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x583ddd(0x9d3)]()*0x4);Window_StatusBase[_0x583ddd(0x655)]['initialize'][_0x583ddd(0x5d9)](this,_0x5e9800),this[_0x583ddd(0x593)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x3df63e(0xb29)]=function(){const _0x38b001=_0x3df63e;this[_0x38b001(0x252)]=0x0;},Window_EnemyName[_0x3df63e(0x655)]['enemy']=function(){const _0x158990=_0x3df63e;return $gameTroop[_0x158990(0x38a)]()[this[_0x158990(0x8f8)]];},Window_EnemyName[_0x3df63e(0x655)]['update']=function(){const _0x56c7b6=_0x3df63e;Window_StatusBase[_0x56c7b6(0x655)][_0x56c7b6(0x54e)]['call'](this),this['enemy']()&&this[_0x56c7b6(0x7d7)]()[_0x56c7b6(0xae2)]()!==this['_text']&&(this['_text']=this[_0x56c7b6(0x7d7)]()['name'](),this['refresh']()),this[_0x56c7b6(0x97a)](),this[_0x56c7b6(0x3f3)]();},Window_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x97a)]=function(){const _0x47600a=_0x3df63e;if(!this[_0x47600a(0x7d7)]()){if(this[_0x47600a(0x849)]>0x0)this[_0x47600a(0x849)]-=0x10;}else{if(this[_0x47600a(0x7d7)]()[_0x47600a(0x9a0)]()){if(this[_0x47600a(0x849)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x47600a(0x8e2)][_0x47600a(0x588)]&&SceneManager[_0x47600a(0x8e2)][_0x47600a(0x588)][_0x47600a(0xa9c)]&&SceneManager[_0x47600a(0x8e2)]['_enemyWindow'][_0x47600a(0x94e)][_0x47600a(0xa22)](this[_0x47600a(0x7d7)]())){if(this['contentsOpacity']<0xff)this[_0x47600a(0x849)]+=0x10;}else this[_0x47600a(0x849)]>0x0&&(this[_0x47600a(0x849)]-=0x10);}}},Window_EnemyName[_0x3df63e(0x655)]['updatePosition']=function(){const _0x23ba0b=_0x3df63e;if(!this[_0x23ba0b(0x7d7)]())return;SceneManager[_0x23ba0b(0x6e7)]()?this['x']=Graphics[_0x23ba0b(0x8b9)]-this[_0x23ba0b(0x7d7)]()['battler']()[_0x23ba0b(0x924)]:_0x23ba0b(0x612)===_0x23ba0b(0x612)?this['x']=this[_0x23ba0b(0x7d7)]()[_0x23ba0b(0x669)]()['_baseX']:_0xf6c66a[_0x23ba0b(0x3a0)](_0x3d413c[_0x23ba0b(0xb9c)],!![]);this['x']-=Math['round'](this[_0x23ba0b(0x366)]/0x2),this['y']=this[_0x23ba0b(0x7d7)]()[_0x23ba0b(0x669)]()['_baseY']-Math[_0x23ba0b(0x76b)](this['lineHeight']()*1.5);const _0x3a69f0=VisuMZ['BattleCore'][_0x23ba0b(0x5eb)]['Enemy'];this['x']+=_0x3a69f0['NameOffsetX']||0x0,this['y']+=_0x3a69f0[_0x23ba0b(0x319)]||0x0;},Window_EnemyName[_0x3df63e(0x655)][_0x3df63e(0x692)]=function(){const _0x42f3a7=_0x3df63e;Window_Base['prototype'][_0x42f3a7(0x692)][_0x42f3a7(0x5d9)](this),this[_0x42f3a7(0x546)][_0x42f3a7(0x444)]=VisuMZ[_0x42f3a7(0xa69)]['Settings'][_0x42f3a7(0x580)][_0x42f3a7(0xb70)];},Window_EnemyName[_0x3df63e(0x655)]['refresh']=function(){const _0xbc625c=_0x3df63e;Window_StatusBase[_0xbc625c(0x655)][_0xbc625c(0xbcf)][_0xbc625c(0x5d9)](this),this[_0xbc625c(0x546)][_0xbc625c(0x6be)]();if(!this['enemy']())return;this[_0xbc625c(0x70a)]();},Window_EnemyName['prototype'][_0x3df63e(0x70a)]=function(){const _0xc6c085=_0x3df63e;this[_0xc6c085(0x25b)]=this['enemy']()[_0xc6c085(0xae2)]();const _0x5ea800=this[_0xc6c085(0x364)](this['_text'])[_0xc6c085(0x366)],_0x2e6b1e=Math['round']((this[_0xc6c085(0xb94)]-_0x5ea800)/0x2);this[_0xc6c085(0x7ab)](this[_0xc6c085(0x25b)],_0x2e6b1e,0x0,_0x5ea800+0x8);},Window_BattleLog['prototype'][_0x3df63e(0x32e)]=function(){const _0xddbe27=_0x3df63e;return VisuMZ[_0xddbe27(0xa69)][_0xddbe27(0x5eb)][_0xddbe27(0x642)][_0xddbe27(0x42e)];},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x5f5)]=function(){const _0x1ba6c8=_0x3df63e;return VisuMZ[_0x1ba6c8(0xa69)][_0x1ba6c8(0x5eb)][_0x1ba6c8(0x642)][_0x1ba6c8(0xa01)];},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x292)]=function(){const _0x4a120e=_0x3df63e;return VisuMZ['BattleCore']['Settings'][_0x4a120e(0x642)][_0x4a120e(0xb81)];},Window_BattleLog['prototype'][_0x3df63e(0x98b)]=function(){return![];},Window_BattleLog[_0x3df63e(0x655)]['actionEffect']=function(_0x11c484,_0x29f4df){const _0xeb2c88=_0x3df63e;this[_0xeb2c88(0x9e4)](_0xeb2c88(0x514)),BattleManager['invokeAction'](_0x11c484,_0x29f4df),this[_0xeb2c88(0x72b)]();},Window_BattleLog['prototype'][_0x3df63e(0x514)]=function(){this['callNextMethod']();},Window_BattleLog[_0x3df63e(0x655)]['push']=function(_0x252c36){const _0x265ee1=_0x3df63e,_0x41ca02=Array[_0x265ee1(0x655)][_0x265ee1(0x3f6)][_0x265ee1(0x5d9)](arguments,0x1),_0x306b01={'name':_0x252c36,'params':_0x41ca02},_0x4bb029=this[_0x265ee1(0x9bf)][_0x265ee1(0x3a8)](_0x4a821f=>_0x4a821f[_0x265ee1(0xae2)])[_0x265ee1(0x246)](_0x265ee1(0x514));_0x4bb029>=0x0?this[_0x265ee1(0x9bf)]['splice'](_0x4bb029,0x0,_0x306b01):'hlbvu'!==_0x265ee1(0x48f)?this[_0x265ee1(0x9bf)][_0x265ee1(0x9cd)](_0x306b01):_0x4aa414[_0x265ee1(0x187)]=![];},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x9e4)]=function(_0x9d41b3){const _0x5a91f4=_0x3df63e,_0x476ae1=Array[_0x5a91f4(0x655)]['slice'][_0x5a91f4(0x5d9)](arguments,0x1);this['_methods'][_0x5a91f4(0x9e4)]({'name':_0x9d41b3,'params':_0x476ae1});},Window_BattleLog[_0x3df63e(0x655)]['logActionList']=function(){const _0x100c13=_0x3df63e;if(!$gameTemp['isPlaytest']())return;console[_0x100c13(0x33c)](this[_0x100c13(0x9bf)][_0x100c13(0x3a8)](_0x29f82a=>_0x29f82a[_0x100c13(0xae2)])[_0x100c13(0xa8f)]('\x0a'));},VisuMZ['BattleCore'][_0x3df63e(0x303)]=Window_BattleLog[_0x3df63e(0x655)]['refresh'],Window_BattleLog['prototype']['refresh']=function(){const _0x172957=_0x3df63e;this[_0x172957(0x27a)]=!![];},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x19e)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x54e)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x54e)]=function(){const _0xcb21b3=_0x3df63e;VisuMZ[_0xcb21b3(0xa69)][_0xcb21b3(0x19e)][_0xcb21b3(0x5d9)](this);if(this[_0xcb21b3(0x27a)])this[_0xcb21b3(0x3fb)]();},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x3fb)]=function(){const _0x13e541=_0x3df63e;this['_requestRefresh']=![],VisuMZ[_0x13e541(0xa69)]['Window_BattleLog_refresh']['call'](this);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x98a)]=function(_0x158bb2){const _0x1cc179=_0x3df63e;let _0x24c1ab=VisuMZ[_0x1cc179(0xa69)][_0x1cc179(0x5eb)][_0x1cc179(0x642)][_0x1cc179(0x8f2)]['toLowerCase']()[_0x1cc179(0x9d2)](),_0x49cfc2=this['_lines'][_0x158bb2];if(_0x49cfc2[_0x1cc179(0x64e)](/<LEFT>/i))_0x24c1ab=_0x1cc179(0x41f);else{if(_0x49cfc2[_0x1cc179(0x64e)](/<CENTER>/i))_0x1cc179(0x8f0)!==_0x1cc179(0x875)?_0x24c1ab=_0x1cc179(0x7b6):this[_0x1cc179(0x5a3)]();else _0x49cfc2[_0x1cc179(0x64e)](/<RIGHT>/i)&&(_0x24c1ab=_0x1cc179(0x7cf));}_0x49cfc2=_0x49cfc2['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x49cfc2=_0x49cfc2[_0x1cc179(0x455)](/\\I\[0\]/gi,'');const _0xdbf7b6=this[_0x1cc179(0xa38)](_0x158bb2);this['contents'][_0x1cc179(0xac4)](_0xdbf7b6['x'],_0xdbf7b6['y'],_0xdbf7b6[_0x1cc179(0x366)],_0xdbf7b6[_0x1cc179(0xb78)]);const _0x1cb072=this[_0x1cc179(0x364)](_0x49cfc2)[_0x1cc179(0x366)];let _0x108a95=_0xdbf7b6['x'];if(_0x24c1ab===_0x1cc179(0x7b6))_0x108a95+=(_0xdbf7b6['width']-_0x1cb072)/0x2;else _0x24c1ab==='right'&&(_0x108a95+=_0xdbf7b6['width']-_0x1cb072);this[_0x1cc179(0x7ab)](_0x49cfc2,_0x108a95,_0xdbf7b6['y'],_0x1cb072+0x8);},Window_BattleLog['prototype']['addText']=function(_0x35ee9c){const _0x47c17a=_0x3df63e;this[_0x47c17a(0x561)][_0x47c17a(0x9cd)](_0x35ee9c),this[_0x47c17a(0xbcf)](),this[_0x47c17a(0x72b)]();},Window_BattleLog['prototype'][_0x3df63e(0x93c)]=function(){const _0x43d64c=_0x3df63e;let _0x5f32a8=![];switch(this[_0x43d64c(0x85d)]){case'effect':_0x5f32a8=this[_0x43d64c(0x449)]['isEffecting']();break;case _0x43d64c(0x445):_0x5f32a8=this[_0x43d64c(0x449)][_0x43d64c(0x24d)]();break;case _0x43d64c(0xbce):_0x5f32a8=this[_0x43d64c(0x449)]['isAnimationPlaying']();break;case _0x43d64c(0xb0e):_0x5f32a8=this[_0x43d64c(0x449)][_0x43d64c(0xb2c)]();break;case _0x43d64c(0x225):_0x5f32a8=this['_spriteset'][_0x43d64c(0x388)]();break;case _0x43d64c(0x7a6):_0x5f32a8=this[_0x43d64c(0x449)]['isAnyoneChangingOpacity']();break;}return!_0x5f32a8&&(this[_0x43d64c(0x85d)]=''),_0x5f32a8;},Window_BattleLog['prototype'][_0x3df63e(0x81d)]=function(){const _0x278b8f=_0x3df63e;this[_0x278b8f(0x671)](_0x278b8f(0xbce));},Window_BattleLog[_0x3df63e(0x655)]['waitForFloat']=function(){const _0x20bcb4=_0x3df63e;this[_0x20bcb4(0x671)](_0x20bcb4(0xb0e));},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xac2)]=function(){const _0x352155=_0x3df63e;this[_0x352155(0x671)](_0x352155(0x225));},Window_BattleLog[_0x3df63e(0x655)]['waitForOpacity']=function(){const _0x47c2e0=_0x3df63e;this[_0x47c2e0(0x671)](_0x47c2e0(0x7a6));},Window_BattleLog['prototype'][_0x3df63e(0xb5a)]=function(){const _0x4272bd=_0x3df63e,_0x99f62c=VisuMZ[_0x4272bd(0xa69)][_0x4272bd(0x5eb)][_0x4272bd(0x642)];if(!_0x99f62c[_0x4272bd(0x160)])return;this[_0x4272bd(0x9cd)](_0x4272bd(0xbbc),_0x99f62c[_0x4272bd(0x3e9)][_0x4272bd(0x4f8)]($gameTroop['turnCount']())),this[_0x4272bd(0x9cd)](_0x4272bd(0x8e5),_0x99f62c[_0x4272bd(0x9a6)]),this['push'](_0x4272bd(0x6be));},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xa90)]=function(_0xc2e0ae,_0x3fa689,_0x1e9bdc){const _0x29d192=_0x3df63e;this['isCustomActionSequence'](_0x3fa689)?_0x29d192(0x999)!==_0x29d192(0x66a)?BattleManager['prepareCustomActionSequence']():(this[_0x29d192(0x60e)][_0x29d192(0x7b9)]['sort'](this['compareBattlerSprites'][_0x29d192(0x96b)](this)),this[_0x29d192(0x9c7)]()):this[_0x29d192(0x467)](_0xc2e0ae,_0x3fa689,_0x1e9bdc);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x982)]=function(_0x1760d2){const _0x38c2b0=_0x3df63e;if(!SceneManager[_0x38c2b0(0x2a9)]())return![];if(!_0x1760d2)return![];if(!_0x1760d2[_0x38c2b0(0x918)]())return![];if(_0x1760d2[_0x38c2b0(0x918)]()[_0x38c2b0(0x45f)][_0x38c2b0(0x64e)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x38c2b0(0x836)](_0x1760d2[_0x38c2b0(0x918)]()))return!![];return![];},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x467)]=function(_0xf8d1,_0x11a2fe,_0x2b9750){const _0xe55812=_0x3df63e,_0x22fba0=_0x11a2fe[_0xe55812(0x918)]();this[_0xe55812(0x8c3)](_0xf8d1,_0x11a2fe,_0x2b9750),this[_0xe55812(0xaeb)](_0xf8d1,_0x11a2fe,_0x2b9750),this[_0xe55812(0xb69)](_0xf8d1,_0x11a2fe,_0x2b9750);},Window_BattleLog[_0x3df63e(0x655)]['displayAction']=function(_0x339925,_0x2a1bf0){const _0x2cf49e=_0x3df63e,_0x5dbd96=VisuMZ[_0x2cf49e(0xa69)][_0x2cf49e(0x5eb)]['BattleLog'];_0x5dbd96['ActionCenteredName']&&(_0x2cf49e(0x935)===_0x2cf49e(0x935)?this[_0x2cf49e(0x9cd)](_0x2cf49e(0xbbc),_0x2cf49e(0x372)[_0x2cf49e(0x4f8)](DataManager['battleDisplayText'](_0x2a1bf0))):_0x51ae69['_commonEventQueue']=[]);if(DataManager['isSkill'](_0x2a1bf0)){if(_0x5dbd96[_0x2cf49e(0x94d)])this[_0x2cf49e(0x173)](_0x2a1bf0[_0x2cf49e(0x201)],_0x339925,_0x2a1bf0);if(_0x5dbd96['ActionSkillMsg2'])this[_0x2cf49e(0x173)](_0x2a1bf0[_0x2cf49e(0x70b)],_0x339925,_0x2a1bf0);}else{if(_0x2cf49e(0x41d)==='iSbqK'){if(_0x5dbd96['ActionItemMsg'])this['displayItemMessage'](TextManager[_0x2cf49e(0x3b4)],_0x339925,_0x2a1bf0);}else _0x2050af[_0x2cf49e(0xaba)](_0x383c73),_0x433391['processBattleCoreJS'](_0x56ffa0);}},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x8c3)]=function(_0x1dae30,_0x55f73e,_0x1b2afd){const _0x405b47=_0x3df63e,_0x525c99=_0x55f73e['item']();this[_0x405b47(0x750)](_0x1dae30,_0x525c99),this[_0x405b47(0x9cd)]('applyImmortal',_0x1dae30,_0x1b2afd,!![]),this['push'](_0x405b47(0x638),_0x1dae30,_0x55f73e),this[_0x405b47(0x9cd)]('waitForMovement'),this['push']('performCastAnimation',_0x1dae30,_0x55f73e),this[_0x405b47(0x9cd)](_0x405b47(0x81d));},Window_BattleLog[_0x3df63e(0x655)]['createEffectActionSet']=function(_0x44357e,_0x1c4b3b,_0x164c25){const _0x48178c=_0x3df63e;if(this[_0x48178c(0x334)](_0x1c4b3b))this['autoMeleeSingleTargetActionSet'](_0x44357e,_0x1c4b3b,_0x164c25);else{if(this[_0x48178c(0x448)](_0x1c4b3b))this[_0x48178c(0x4e6)](_0x44357e,_0x1c4b3b,_0x164c25);else _0x1c4b3b['isForRandom']()?this[_0x48178c(0x891)](_0x44357e,_0x1c4b3b,_0x164c25):_0x48178c(0x1bf)!==_0x48178c(0x1bf)?_0x3a65fc[_0x48178c(0x2f3)]([_0x2fc591]):this['wholeActionSet'](_0x44357e,_0x1c4b3b,_0x164c25);}},Window_BattleLog['prototype'][_0x3df63e(0x334)]=function(_0x223540){const _0x58c377=_0x3df63e;if(!_0x223540[_0x58c377(0x7fb)]())return![];if(!_0x223540['isForOne']())return![];if(!_0x223540[_0x58c377(0x9f4)]())return![];return VisuMZ[_0x58c377(0xa69)][_0x58c377(0x5eb)][_0x58c377(0x862)]['AutoMeleeSolo'];},Window_BattleLog['prototype'][_0x3df63e(0x9c2)]=function(_0x3c236f,_0x584bc9,_0x494109){const _0xb24d23=_0x3df63e,_0x1d326f=_0x3c236f[_0xb24d23(0x88a)]()[_0xb24d23(0x3ad)]<0x2,_0x5580c7=0x14,_0x1e1246=0x30;_0x1d326f&&(_0xb24d23(0x8eb)!=='ODSAD'?(this[_0xb24d23(0x9cd)]('performJump',[_0x3c236f],_0x1e1246,_0x5580c7),this[_0xb24d23(0x9cd)](_0xb24d23(0x839),_0x3c236f,_0x494109,_0xb24d23(0x2d7),_0x5580c7,!![],_0xb24d23(0x25d),!![]),this[_0xb24d23(0x9cd)](_0xb24d23(0x80b),[_0x3c236f],_0xb24d23(0x838)),this[_0xb24d23(0x9cd)]('waitForMovement')):(this[_0xb24d23(0x7fd)](),this[_0xb24d23(0x7ce)]=null,this[_0xb24d23(0x187)]=![]));let _0x20193c=_0x584bc9[_0xb24d23(0x7f8)]()?this[_0xb24d23(0xb75)](_0x3c236f):0x1;for(let _0x467113=0x0;_0x467113<_0x20193c;_0x467113++){_0x584bc9[_0xb24d23(0x7f8)]()&&_0x3c236f['isActor']()&&this[_0xb24d23(0x9cd)]('setActiveWeaponSet',_0x3c236f,_0x467113);if(_0x584bc9[_0xb24d23(0x918)]()['animationId']<0x0){if(_0xb24d23(0x9b2)===_0xb24d23(0x9b2))this[_0xb24d23(0x891)](_0x3c236f,_0x584bc9,_0x494109);else return this['_growDuration']>0x0;}else this[_0xb24d23(0x6c5)](_0x3c236f,_0x584bc9,_0x494109);}_0x584bc9[_0xb24d23(0x7f8)]()&&_0x3c236f['isActor']()&&this[_0xb24d23(0x9cd)]('clearActiveWeaponSet',_0x3c236f);this[_0xb24d23(0x9cd)](_0xb24d23(0x8f3),_0x3c236f,_0x494109,![]);if(_0x1d326f){const _0x14245e=_0x3c236f['battler']();this[_0xb24d23(0x9cd)](_0xb24d23(0x74c),[_0x3c236f],_0x1e1246,_0x5580c7),this[_0xb24d23(0x9cd)](_0xb24d23(0xa50),_0x3c236f,_0x14245e['_homeX'],_0x14245e['_homeY'],_0x5580c7,![],_0xb24d23(0x25d)),this[_0xb24d23(0x9cd)](_0xb24d23(0x80b),[_0x3c236f],_0xb24d23(0xb5e)),this[_0xb24d23(0x9cd)](_0xb24d23(0x516)),this[_0xb24d23(0x9cd)]('requestMotion',[_0x3c236f],_0xb24d23(0x838));}},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x448)]=function(_0x30c24d){const _0x510b3f=_0x3df63e;if(!_0x30c24d[_0x510b3f(0x7fb)]())return![];if(!_0x30c24d[_0x510b3f(0x67a)]())return![];if(!_0x30c24d['isForOpponent']())return![];return VisuMZ[_0x510b3f(0xa69)][_0x510b3f(0x5eb)][_0x510b3f(0x862)][_0x510b3f(0xa1a)];},Window_BattleLog['prototype'][_0x3df63e(0x4e6)]=function(_0x17db85,_0x5abacf,_0x42eae8){const _0x2930c4=_0x3df63e,_0x194527=_0x17db85[_0x2930c4(0x88a)]()[_0x2930c4(0x3ad)]<0x2,_0x10c1d2=0x14,_0x14af97=0x30;_0x194527&&(this[_0x2930c4(0x9cd)]('performJump',[_0x17db85],_0x14af97,_0x10c1d2),this[_0x2930c4(0x9cd)](_0x2930c4(0x839),_0x17db85,_0x42eae8,_0x2930c4(0x4e3),_0x10c1d2,!![],'Linear',!![]),this[_0x2930c4(0x9cd)](_0x2930c4(0x80b),[_0x17db85],_0x2930c4(0x838)),this['push'](_0x2930c4(0x516)));let _0x157967=_0x5abacf[_0x2930c4(0x7f8)]()?this['getDualWieldTimes'](_0x17db85):0x1;for(let _0x6f14fc=0x0;_0x6f14fc<_0x157967;_0x6f14fc++){if(_0x5abacf[_0x2930c4(0x7f8)]()&&_0x17db85[_0x2930c4(0x5c6)]()){if(_0x2930c4(0x499)!==_0x2930c4(0x499)){const _0xc646d2=_0x4d31bd['BattleCore'][_0x2930c4(0x5eb)]['BattleLayout'];if(_0xc646d2[_0x2930c4(0x408)]){const _0x3cf2f2=new _0x1197c0();_0x3cf2f2[_0x2930c4(0xa39)]=_0x1633d2[_0x2930c4(0x9d0)](_0xc646d2[_0x2930c4(0x408)]),_0x3cf2f2['x']=_0xc646d2['StatusWindowAttachmentBackOffsetX']||0x0,_0x3cf2f2['y']=_0xc646d2[_0x2930c4(0xb68)]||0x0,this[_0x2930c4(0x6df)](_0x3cf2f2),this[_0x2930c4(0x630)]=_0x3cf2f2;}if(_0xc646d2[_0x2930c4(0x622)]){const _0xfc8b8e=new _0x148af8();_0xfc8b8e[_0x2930c4(0xa39)]=_0x1d73e0[_0x2930c4(0x9d0)](_0xc646d2[_0x2930c4(0x622)]),_0xfc8b8e['x']=_0xc646d2[_0x2930c4(0x3a1)]||0x0,_0xfc8b8e['y']=_0xc646d2[_0x2930c4(0xa03)]||0x0,this[_0x2930c4(0x699)](_0xfc8b8e),this[_0x2930c4(0xbb5)]=_0xfc8b8e;}}else this['push'](_0x2930c4(0xb22),_0x17db85,_0x6f14fc);}this[_0x2930c4(0x6c5)](_0x17db85,_0x5abacf,_0x42eae8);}_0x5abacf[_0x2930c4(0x7f8)]()&&_0x17db85[_0x2930c4(0x5c6)]()&&this[_0x2930c4(0x9cd)]('clearActiveWeaponSet',_0x17db85);this[_0x2930c4(0x9cd)]('applyImmortal',_0x17db85,_0x42eae8,![]);if(_0x194527){const _0x3dee77=_0x17db85[_0x2930c4(0x669)]();this['push']('performJump',[_0x17db85],_0x14af97,_0x10c1d2),this[_0x2930c4(0x9cd)](_0x2930c4(0xa50),_0x17db85,_0x3dee77[_0x2930c4(0xa7d)],_0x3dee77[_0x2930c4(0x17f)],_0x10c1d2,![],_0x2930c4(0x25d)),this[_0x2930c4(0x9cd)](_0x2930c4(0x80b),[_0x17db85],_0x2930c4(0xb5e)),this['push'](_0x2930c4(0x516)),this[_0x2930c4(0x9cd)](_0x2930c4(0x80b),[_0x17db85],'walk');}},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x891)]=function(_0x35c025,_0x357d8f,_0xa2a194){const _0x59da5d=_0x3df63e,_0x4849f7=_0x357d8f['item']();for(const _0x20e866 of _0xa2a194){if(_0x59da5d(0x1e9)!==_0x59da5d(0x518)){if(!_0x20e866)continue;this[_0x59da5d(0x9cd)]('performAction',_0x35c025,_0x357d8f),this[_0x59da5d(0x9cd)]('waitCount',Sprite_Battler[_0x59da5d(0x7e3)]),this[_0x59da5d(0x9cd)](_0x59da5d(0x605),_0x35c025,[_0x20e866],_0x4849f7[_0x59da5d(0x7fa)]),this[_0x59da5d(0x9cd)](_0x59da5d(0x8e5),0x18),this[_0x59da5d(0x9cd)](_0x59da5d(0x377),_0x35c025,_0x20e866);}else this[_0x59da5d(0x2c9)]+=_0x5937fc[_0x59da5d(0x985)](),this[_0x59da5d(0x492)]['y']+=_0x3b50e2[_0x59da5d(0x6ff)]();}},Window_BattleLog[_0x3df63e(0x655)]['wholeActionSet']=function(_0x1cb547,_0xc5aed4,_0x490d1c){const _0x45a44d=_0x3df63e,_0x23be66=_0xc5aed4['item']();this['push']('performAction',_0x1cb547,_0xc5aed4),this[_0x45a44d(0x9cd)](_0x45a44d(0x8e5),Sprite_Battler[_0x45a44d(0x7e3)]),this[_0x45a44d(0x9cd)]('showAnimation',_0x1cb547,_0x490d1c[_0x45a44d(0x63b)](),_0x23be66[_0x45a44d(0x7fa)]),this[_0x45a44d(0x9cd)](_0x45a44d(0x81d));for(const _0x1ab1da of _0x490d1c){if(_0x45a44d(0x401)===_0x45a44d(0x401)){if(!_0x1ab1da)continue;this[_0x45a44d(0x9cd)](_0x45a44d(0x377),_0x1cb547,_0x1ab1da);}else this[_0x45a44d(0x46b)]=_0x45a44d(0xbb7);}},Window_BattleLog[_0x3df63e(0x655)]['finishActionSet']=function(_0x3c35b4,_0x540c9a,_0x5527db){const _0x51aa89=_0x3df63e,_0x568403=_0x540c9a[_0x51aa89(0x918)]();this[_0x51aa89(0x9cd)](_0x51aa89(0x8f3),_0x3c35b4,_0x5527db,![]),this[_0x51aa89(0x9cd)]('waitForNewLine'),this['push'](_0x51aa89(0x93b)),this['push'](_0x51aa89(0x6be)),this['push'](_0x51aa89(0x648),_0x3c35b4),this[_0x51aa89(0x9cd)]('waitForMovement');},Window_BattleLog['prototype']['endAction']=function(_0x37cd97){},VisuMZ['BattleCore'][_0x3df63e(0x519)]=Window_BattleLog[_0x3df63e(0x655)]['displayCurrentState'],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x9c9)]=function(_0x18b287){const _0x26ebb5=_0x3df63e;if(!VisuMZ[_0x26ebb5(0xa69)][_0x26ebb5(0x5eb)][_0x26ebb5(0x642)][_0x26ebb5(0x437)])return;VisuMZ[_0x26ebb5(0xa69)][_0x26ebb5(0x519)][_0x26ebb5(0x5d9)](this,_0x18b287);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xa25)]=function(_0x1f4211){const _0x2f6d78=_0x3df63e;this[_0x2f6d78(0x9cd)](_0x2f6d78(0x3b2),_0x1f4211);VisuMZ[_0x2f6d78(0xa69)][_0x2f6d78(0x5eb)][_0x2f6d78(0x862)][_0x2f6d78(0xab5)]&&this['push']('showAnimation',_0x1f4211,[BattleManager[_0x2f6d78(0x8fd)]],-0x1);if(!VisuMZ[_0x2f6d78(0xa69)][_0x2f6d78(0x5eb)]['BattleLog'][_0x2f6d78(0x7bf)])return;this[_0x2f6d78(0x9cd)]('addText',TextManager['counterAttack']['format'](_0x1f4211[_0x2f6d78(0xae2)]()));},Window_BattleLog[_0x3df63e(0x655)]['displayReflection']=function(_0x2a9099){const _0x375804=_0x3df63e;this[_0x375804(0x9cd)](_0x375804(0x9d8),_0x2a9099);if(!VisuMZ[_0x375804(0xa69)][_0x375804(0x5eb)][_0x375804(0x642)][_0x375804(0xa5f)])return;this[_0x375804(0x9cd)](_0x375804(0xbbc),TextManager['magicReflection'][_0x375804(0x4f8)](_0x2a9099[_0x375804(0xae2)]()));},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x809)]=function(_0x1fd0b4,_0x2e0c77){const _0x479230=_0x3df63e;if(VisuMZ['BattleCore'][_0x479230(0x5eb)][_0x479230(0x862)][_0x479230(0x895)]){if(_0x479230(0x2d9)===_0x479230(0x2d9)){const _0x38b062=_0x2e0c77[_0x479230(0x918)]();this['push'](_0x479230(0x605),_0x1fd0b4,[_0x1fd0b4],_0x38b062['animationId']);}else return _0x47f179['BattleCore'][_0x479230(0x5eb)][_0x479230(0x580)]['SmoothImage'];}},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x830)]=function(_0x7f339c,_0x13c5ea){const _0x574dab=_0x3df63e;this['push']('performSubstitute',_0x7f339c,_0x13c5ea);if(!VisuMZ[_0x574dab(0xa69)][_0x574dab(0x5eb)][_0x574dab(0x642)][_0x574dab(0xb58)])return;const _0xcd9662=_0x7f339c[_0x574dab(0xae2)](),_0x4d559e=TextManager[_0x574dab(0x747)][_0x574dab(0x4f8)](_0xcd9662,_0x13c5ea[_0x574dab(0xae2)]());this['push'](_0x574dab(0xbbc),_0x4d559e);},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x3df63e(0x655)]['displayFailure'],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x649)]=function(_0x271aec){const _0x332ab8=_0x3df63e;if(!VisuMZ[_0x332ab8(0xa69)][_0x332ab8(0x5eb)][_0x332ab8(0x642)][_0x332ab8(0x97d)])return;VisuMZ['BattleCore'][_0x332ab8(0x1a8)][_0x332ab8(0x5d9)](this,_0x271aec);},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x3df63e(0x655)]['displayCritical'],Window_BattleLog[_0x3df63e(0x655)]['displayCritical']=function(_0x4bdc4e){const _0xb3db16=_0x3df63e;if(!VisuMZ[_0xb3db16(0xa69)][_0xb3db16(0x5eb)][_0xb3db16(0x642)][_0xb3db16(0x766)])return;VisuMZ[_0xb3db16(0xa69)][_0xb3db16(0x4fa)][_0xb3db16(0x5d9)](this,_0x4bdc4e);},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_displayMiss']=Window_BattleLog['prototype'][_0x3df63e(0x9dc)],Window_BattleLog[_0x3df63e(0x655)]['displayMiss']=function(_0x1595b3){const _0x505dce=_0x3df63e;if(!VisuMZ[_0x505dce(0xa69)][_0x505dce(0x5eb)]['BattleLog'][_0x505dce(0xa31)]){if(_0x505dce(0x98e)===_0x505dce(0x98e))this[_0x505dce(0x9cd)](_0x505dce(0x71d),_0x1595b3);else{let _0x505913=_0x5d7cf2[_0x505dce(0x2cc)][_0xcee045];if(!_0x505913)return;let _0x57650c=_0x505913;const _0x5859b1=this['commandStyle']();if(_0x5859b1===_0x505dce(0xb41))_0x57650c=_0x57650c[_0x505dce(0x455)](/\x1I\[(\d+)\]/gi,''),_0x57650c=_0x57650c[_0x505dce(0x455)](/\\I\[(\d+)\]/gi,'');else{if(!_0x505913[_0x505dce(0x64e)](/\\I\[(\d+)\]/i)){const _0x49036d=_0x52fa27[_0x505dce(0x3e6)]?_0x4081db[_0x505dce(0x7d6)]['Settings'][_0x505dce(0x249)]:_0x559808[_0x505dce(0xa69)]['Settings'][_0x505dce(0x39a)],_0x1ea348=_0x271ed6['magicSkills'][_0x505dce(0xa22)](_0x1c6b71),_0x2a48b5=_0x1ea348?_0x49036d[_0x505dce(0x871)]:_0x49036d[_0x505dce(0xb84)];_0x57650c=_0x505dce(0x5b2)['format'](_0x2a48b5,_0x505913);}}this['addCommand'](_0x57650c,_0x505dce(0x968),!![],_0x5a41e6);}}else VisuMZ[_0x505dce(0xa69)][_0x505dce(0x224)][_0x505dce(0x5d9)](this,_0x1595b3);},VisuMZ['BattleCore'][_0x3df63e(0x274)]=Window_BattleLog['prototype']['displayEvasion'],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x726)]=function(_0x5d94f2){const _0x92fa80=_0x3df63e;if(!VisuMZ[_0x92fa80(0xa69)]['Settings'][_0x92fa80(0x642)]['ShowMissEvasion']){if(_0x5d94f2[_0x92fa80(0x4d3)]()[_0x92fa80(0x92c)])this[_0x92fa80(0x9cd)](_0x92fa80(0x3d3),_0x5d94f2);else{if(_0x92fa80(0xa44)===_0x92fa80(0xa44))this[_0x92fa80(0x9cd)](_0x92fa80(0x2f2),_0x5d94f2);else return _0x580770[_0x92fa80(0xa69)][_0x92fa80(0x5eb)][_0x92fa80(0x5d0)][_0x92fa80(0x62b)];}}else _0x92fa80(0x32c)!==_0x92fa80(0x32c)?this[_0x92fa80(0x80b)](_0x92fa80(0x918)):VisuMZ[_0x92fa80(0xa69)][_0x92fa80(0x274)][_0x92fa80(0x5d9)](this,_0x5d94f2);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x29b)]=function(_0x52dd6c){const _0x6a9b0f=_0x3df63e;_0x52dd6c['result']()[_0x6a9b0f(0x196)]&&(_0x52dd6c[_0x6a9b0f(0x4d3)]()['hpDamage']>0x0&&!_0x52dd6c[_0x6a9b0f(0x4d3)]()[_0x6a9b0f(0x411)]&&this[_0x6a9b0f(0x9cd)](_0x6a9b0f(0x5e8),_0x52dd6c),_0x52dd6c[_0x6a9b0f(0x4d3)]()[_0x6a9b0f(0x237)]<0x0&&this['push'](_0x6a9b0f(0x80e),_0x52dd6c),VisuMZ[_0x6a9b0f(0xa69)][_0x6a9b0f(0x5eb)][_0x6a9b0f(0x642)][_0x6a9b0f(0x7e4)]&&this[_0x6a9b0f(0x9cd)](_0x6a9b0f(0xbbc),this['makeHpDamageText'](_0x52dd6c)));},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x68c)]=Window_BattleLog['prototype']['displayMpDamage'],Window_BattleLog['prototype'][_0x3df63e(0xa58)]=function(_0xac7c60){const _0x4e2e3d=_0x3df63e;if(!VisuMZ[_0x4e2e3d(0xa69)][_0x4e2e3d(0x5eb)][_0x4e2e3d(0x642)]['ShowMpDmg'])return;VisuMZ[_0x4e2e3d(0xa69)][_0x4e2e3d(0x68c)][_0x4e2e3d(0x5d9)](this,_0xac7c60);},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x7c0)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x8c0)],Window_BattleLog['prototype']['displayTpDamage']=function(_0xe5536f){const _0x3078b4=_0x3df63e;if(!VisuMZ[_0x3078b4(0xa69)]['Settings']['BattleLog'][_0x3078b4(0xba7)])return;VisuMZ[_0x3078b4(0xa69)][_0x3078b4(0x7c0)][_0x3078b4(0x5d9)](this,_0xe5536f);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x490)]=function(_0x3b9206){const _0x327578=_0x3df63e,_0x85af55=_0x3b9206[_0x327578(0x4d3)](),_0x4bd07b=_0x85af55['addedStateObjects']();for(const _0x3c9644 of _0x4bd07b){if(_0x327578(0xb8a)===_0x327578(0xb8a)){const _0x4d1f0b=_0x3b9206[_0x327578(0x5c6)]()?_0x3c9644[_0x327578(0x201)]:_0x3c9644[_0x327578(0x70b)];_0x4d1f0b&&VisuMZ[_0x327578(0xa69)][_0x327578(0x5eb)][_0x327578(0x642)][_0x327578(0x381)]&&(this[_0x327578(0x9cd)](_0x327578(0xba8)),this['push'](_0x327578(0x980)),this[_0x327578(0x9cd)](_0x327578(0xbbc),_0x4d1f0b[_0x327578(0x4f8)](_0x3b9206[_0x327578(0xae2)]())),this[_0x327578(0x9cd)](_0x327578(0x779))),_0x3c9644['id']===_0x3b9206[_0x327578(0x693)]()&&this[_0x327578(0x9cd)](_0x327578(0x327),_0x3b9206);}else{if(_0xfab74f[_0x327578(0x627)]&&_0x137089[_0x327578(0xb4a)]())return![];else{if(!_0x5f32f1[_0x327578(0xa69)][_0x327578(0x428)])return![];const _0x5e9b9a=_0x59b674['aliveMembers']()[_0x327578(0xaaa)](_0x387265=>_0x387265[_0x327578(0x26e)]()&&_0x387265[_0x327578(0x8aa)]());return _0x5e9b9a['length']>0x0&&_0x47aa63[_0x327578(0x355)]()!==_0x5e9b9a[_0x5e9b9a[_0x327578(0xb02)]-0x1];}}}},Window_BattleLog['prototype'][_0x3df63e(0x21a)]=function(_0x4c10ba){const _0x4d8b8e=_0x3df63e;if(!VisuMZ[_0x4d8b8e(0xa69)][_0x4d8b8e(0x5eb)]['BattleLog']['ShowRemovedState'])return;const _0x4fcf82=_0x4c10ba[_0x4d8b8e(0x4d3)](),_0xea907d=_0x4fcf82[_0x4d8b8e(0x6f3)]();for(const _0x5a5ce1 of _0xea907d){_0x5a5ce1[_0x4d8b8e(0x36b)]&&(_0x4d8b8e(0x1fa)===_0x4d8b8e(0x1fa)?(this[_0x4d8b8e(0x9cd)](_0x4d8b8e(0xba8)),this[_0x4d8b8e(0x9cd)](_0x4d8b8e(0x980)),this[_0x4d8b8e(0x9cd)]('addText',_0x5a5ce1[_0x4d8b8e(0x36b)][_0x4d8b8e(0x4f8)](_0x4c10ba['name']())),this['push'](_0x4d8b8e(0x779))):this[_0x4d8b8e(0x8c5)]()?this[_0x4d8b8e(0x833)]():_0x324278[_0x4d8b8e(0xa69)][_0x4d8b8e(0x47c)][_0x4d8b8e(0x5d9)](this));}},Window_BattleLog['prototype'][_0x3df63e(0xbc3)]=function(_0x21de0a){const _0x4c36bb=_0x3df63e,_0x56f317=VisuMZ[_0x4c36bb(0xa69)][_0x4c36bb(0x5eb)][_0x4c36bb(0x642)],_0x4034b6=_0x21de0a['result']();if(_0x56f317[_0x4c36bb(0x909)])this[_0x4c36bb(0x959)](_0x21de0a,_0x4034b6[_0x4c36bb(0x8e6)],TextManager[_0x4c36bb(0x696)]);if(_0x56f317['ShowAddedDebuff'])this[_0x4c36bb(0x959)](_0x21de0a,_0x4034b6['addedDebuffs'],TextManager['debuffAdd']);if(_0x56f317['ShowRemovedBuff'])this[_0x4c36bb(0x959)](_0x21de0a,_0x4034b6['removedBuffs'],TextManager[_0x4c36bb(0x59f)]);},Window_BattleLog['prototype']['displayBuffs']=function(_0x83a70e,_0x16cf0b,_0x5adcfb){const _0x3905de=_0x3df63e;for(const _0x362a2e of _0x16cf0b){const _0x4d090c=_0x5adcfb[_0x3905de(0x4f8)](_0x83a70e[_0x3905de(0xae2)](),TextManager[_0x3905de(0x22e)](_0x362a2e));this[_0x3905de(0x9cd)](_0x3905de(0xba8)),this[_0x3905de(0x9cd)](_0x3905de(0x980)),this[_0x3905de(0x9cd)](_0x3905de(0xbbc),_0x4d090c),this[_0x3905de(0x9cd)](_0x3905de(0x779));}},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xa48)]=Window_BattleLog['prototype'][_0x3df63e(0x6be)],Window_BattleLog['prototype'][_0x3df63e(0x6be)]=function(){const _0x2cf8bc=_0x3df63e;VisuMZ[_0x2cf8bc(0xa69)][_0x2cf8bc(0xa48)][_0x2cf8bc(0x5d9)](this),this['callNextMethod']();},VisuMZ['BattleCore'][_0x3df63e(0x2ac)]=Window_BattleLog[_0x3df63e(0x655)]['pushBaseLine'],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x980)]=function(){const _0x210305=_0x3df63e;VisuMZ['BattleCore'][_0x210305(0x2ac)][_0x210305(0x5d9)](this),this['callNextMethod']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0xad7)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xba8)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0xba8)]=function(){const _0x54acbc=_0x3df63e;VisuMZ[_0x54acbc(0xa69)][_0x54acbc(0xad7)][_0x54acbc(0x5d9)](this),this[_0x54acbc(0xbcf)](),this[_0x54acbc(0x72b)]();},VisuMZ['BattleCore']['Window_BattleLog_popupDamage']=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x50f)],Window_BattleLog[_0x3df63e(0x655)]['popupDamage']=function(_0x137603){const _0x45fcbc=_0x3df63e;VisuMZ['BattleCore'][_0x45fcbc(0xb37)][_0x45fcbc(0x5d9)](this,_0x137603),this[_0x45fcbc(0x72b)]();},Window_BattleLog['prototype']['waitForNewLine']=function(){const _0x2d0d3b=_0x3df63e;let _0x5e221f=0x0;this[_0x2d0d3b(0x8e9)][_0x2d0d3b(0xb02)]>0x0&&(_0x5e221f=this[_0x2d0d3b(0x8e9)][this['_baseLineStack'][_0x2d0d3b(0xb02)]-0x1]),this[_0x2d0d3b(0x561)][_0x2d0d3b(0xb02)]>_0x5e221f?this['wait']():this[_0x2d0d3b(0x72b)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x9a9)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x638)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x638)]=function(_0x16b02e,_0x1b7199){const _0xe1ba9c=_0x3df63e;VisuMZ[_0xe1ba9c(0xa69)][_0xe1ba9c(0x9a9)]['call'](this,_0x16b02e,_0x1b7199),this['callNextMethod']();},VisuMZ['BattleCore'][_0x3df63e(0x6fa)]=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x64f)]=function(_0x4b61c6,_0x4abb18){const _0x159fbb=_0x3df63e;VisuMZ['BattleCore']['Window_BattleLog_performAction']['call'](this,_0x4b61c6,_0x4abb18),this[_0x159fbb(0x72b)]();},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x648)],Window_BattleLog[_0x3df63e(0x655)]['performActionEnd']=function(_0x3f8fc5){const _0x15976e=_0x3df63e;VisuMZ[_0x15976e(0xa69)][_0x15976e(0x378)][_0x15976e(0x5d9)](this,_0x3f8fc5);for(const _0x2fb038 of BattleManager[_0x15976e(0x3c0)]()){if(_0x15976e(0x617)===_0x15976e(0x6b1))_0x2a04a7[_0x15976e(0xa69)][_0x15976e(0x6fa)]['call'](this,_0x4a3639,_0x1ad157),this[_0x15976e(0x72b)]();else{if(!_0x2fb038)continue;if(_0x2fb038[_0x15976e(0x9a0)]())continue;_0x2fb038[_0x15976e(0x369)]();}}this['callNextMethod']();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x97b)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x5e8)],Window_BattleLog[_0x3df63e(0x655)]['performDamage']=function(_0x5bfd62){const _0x3cc2d8=_0x3df63e;VisuMZ[_0x3cc2d8(0xa69)][_0x3cc2d8(0x97b)][_0x3cc2d8(0x5d9)](this,_0x5bfd62),this[_0x3cc2d8(0x72b)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x92b)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x71d)],Window_BattleLog[_0x3df63e(0x655)]['performMiss']=function(_0x17553f){const _0x12a020=_0x3df63e;VisuMZ[_0x12a020(0xa69)][_0x12a020(0x92b)][_0x12a020(0x5d9)](this,_0x17553f),this[_0x12a020(0x72b)]();},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype'][_0x3df63e(0x80e)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x80e)]=function(_0x5e5fca){const _0x1ec66c=_0x3df63e;VisuMZ[_0x1ec66c(0xa69)][_0x1ec66c(0x19a)][_0x1ec66c(0x5d9)](this,_0x5e5fca),this[_0x1ec66c(0x72b)]();},VisuMZ['BattleCore'][_0x3df63e(0x2eb)]=Window_BattleLog[_0x3df63e(0x655)]['performEvasion'],Window_BattleLog['prototype'][_0x3df63e(0x3d3)]=function(_0x38fdc8){const _0x183397=_0x3df63e;VisuMZ['BattleCore'][_0x183397(0x2eb)]['call'](this,_0x38fdc8),this['callNextMethod']();},VisuMZ[_0x3df63e(0xa69)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype'][_0x3df63e(0x2f2)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x2f2)]=function(_0x567d74){const _0x20fc1c=_0x3df63e;VisuMZ[_0x20fc1c(0xa69)][_0x20fc1c(0x182)][_0x20fc1c(0x5d9)](this,_0x567d74),this[_0x20fc1c(0x72b)]();},VisuMZ['BattleCore'][_0x3df63e(0x2a7)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x3b2)],Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x3b2)]=function(_0x86b3a3){const _0x35463d=_0x3df63e;VisuMZ[_0x35463d(0xa69)]['Window_BattleLog_performCounter'][_0x35463d(0x5d9)](this,_0x86b3a3),this[_0x35463d(0x72b)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x51b)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x9d8)],Window_BattleLog[_0x3df63e(0x655)]['performReflection']=function(_0x3971bd){const _0x1cd01c=_0x3df63e;VisuMZ['BattleCore'][_0x1cd01c(0x51b)][_0x1cd01c(0x5d9)](this,_0x3971bd),this[_0x1cd01c(0x72b)]();},VisuMZ[_0x3df63e(0xa69)][_0x3df63e(0x4a6)]=Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x5f9)],Window_BattleLog['prototype'][_0x3df63e(0x5f9)]=function(_0x5d5e54,_0x222eaf){const _0x4ca1de=_0x3df63e;VisuMZ[_0x4ca1de(0xa69)]['Window_BattleLog_performSubstitute']['call'](this,_0x5d5e54,_0x222eaf),this[_0x4ca1de(0x72b)]();},VisuMZ['BattleCore']['Window_BattleLog_performCollapse']=Window_BattleLog['prototype']['performCollapse'],Window_BattleLog['prototype']['performCollapse']=function(_0x360928){const _0xc0416=_0x3df63e;VisuMZ[_0xc0416(0xa69)][_0xc0416(0x3ec)][_0xc0416(0x5d9)](this,_0x360928),this[_0xc0416(0x72b)]();},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x221)]=function(_0x226ee3,_0x522c7a){const _0x2c94b6=_0x3df63e;_0x226ee3[_0x2c94b6(0x221)](_0x522c7a),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3df63e(0x40d)]=function(_0xa1ec7b,_0x817b22){const _0x146f60=_0x3df63e,_0x299384=_0xa1ec7b[_0x146f60(0xa93)]();_0x299384<=0x0?SoundManager[_0x146f60(0x8d2)]():this[_0x146f60(0x39b)](_0x817b22,_0x299384);},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x8f3)]=function(_0x1dbdd2,_0x4caf45,_0x409dc4){const _0x43d2c6=_0x3df63e,_0x42c15c=[_0x1dbdd2][_0x43d2c6(0x913)](_0x4caf45);for(const _0x13da4e of _0x42c15c){if('Zzbcs'!==_0x43d2c6(0x774))this[_0x43d2c6(0x8af)]=!this[_0x43d2c6(0x33a)](),_0x54955e['registerDefeatedEnemy'](this[_0x43d2c6(0x253)]());else{if(!_0x13da4e)continue;_0x13da4e[_0x43d2c6(0x21b)](_0x409dc4);}}this[_0x43d2c6(0x72b)]();},Window_BattleLog['prototype'][_0x3df63e(0x8e5)]=function(_0x2cf1d7){this['_waitCount']=_0x2cf1d7;},Window_BattleLog['prototype'][_0x3df63e(0x80b)]=function(_0xdd5232,_0x168480){const _0x7ea3c2=_0x3df63e;for(const _0x5957df of _0xdd5232){if(!_0x5957df)continue;_0x5957df[_0x7ea3c2(0x80b)](_0x168480);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x3df63e(0xa50)]=function(_0x475a64,_0x16e54a,_0x1af53c,_0x34d025,_0x54d9e7,_0x1728d6){const _0x14ea9a=_0x3df63e;_0x475a64[_0x14ea9a(0x3f1)](_0x16e54a,_0x1af53c,_0x34d025,_0x54d9e7,_0x1728d6,-0x1),this[_0x14ea9a(0x72b)]();},Window_BattleLog['prototype'][_0x3df63e(0x839)]=function(_0x58b0a3,_0x4c3ec7,_0x27e150,_0x6bb482,_0x31ed8b,_0x426553,_0x50329d){const _0x5b85f9=_0x3df63e,_0x5a3f86=Math[_0x5b85f9(0x46d)](..._0x4c3ec7[_0x5b85f9(0x3a8)](_0x7f34f7=>_0x7f34f7[_0x5b85f9(0x669)]()[_0x5b85f9(0x924)]-_0x7f34f7[_0x5b85f9(0x669)]()[_0x5b85f9(0xaa0)]()/0x2)),_0x11f572=Math[_0x5b85f9(0x7a7)](..._0x4c3ec7[_0x5b85f9(0x3a8)](_0x560deb=>_0x560deb[_0x5b85f9(0x669)]()[_0x5b85f9(0x924)]+_0x560deb[_0x5b85f9(0x669)]()[_0x5b85f9(0xaa0)]()/0x2)),_0x486726=Math[_0x5b85f9(0x46d)](..._0x4c3ec7[_0x5b85f9(0x3a8)](_0x4f7e6a=>_0x4f7e6a[_0x5b85f9(0x669)]()[_0x5b85f9(0x560)]-_0x4f7e6a['battler']()[_0x5b85f9(0x1cf)]())),_0x32333a=Math[_0x5b85f9(0x7a7)](..._0x4c3ec7[_0x5b85f9(0x3a8)](_0x54190e=>_0x54190e['battler']()[_0x5b85f9(0x560)])),_0x2017a0=_0x4c3ec7['filter'](_0x879bab=>_0x879bab[_0x5b85f9(0x5c6)]())[_0x5b85f9(0xb02)],_0x122356=_0x4c3ec7[_0x5b85f9(0xaaa)](_0x486303=>_0x486303['isEnemy']())[_0x5b85f9(0xb02)];let _0x112de0=0x0,_0x4ed0c2=0x0;if(_0x27e150['match'](/front/i))_0x112de0=_0x2017a0>=_0x122356?_0x5a3f86:_0x11f572;else{if(_0x27e150[_0x5b85f9(0x64e)](/middle/i)){if('zpHVT'===_0x5b85f9(0x387))_0x112de0=(_0x5a3f86+_0x11f572)/0x2,_0x50329d=-0x1;else{_0x5c72ff[_0x5b85f9(0xa69)][_0x5b85f9(0x950)]['call'](this,_0x95697f,_0x447a88);if(!_0x523a40[_0x5b85f9(0xac1)]())return;if(_0x47ca14['dataId']!==_0xe62abe['deathStateId']())return;let _0xf78d6f=_0x3149fc['value1'];!this[_0x5b85f9(0x5c0)]()&&(_0xf78d6f*=_0x5b8d56['stateRate'](_0x1b1f41[_0x5b85f9(0x6a1)]),_0xf78d6f*=this[_0x5b85f9(0x56b)](_0x34a574)),_0x4ad638[_0x5b85f9(0x9eb)]()<_0xf78d6f&&(_0x582243['_deathStateApplied']=!![],this[_0x5b85f9(0x332)](_0x59e8b0));}}else{if(_0x27e150[_0x5b85f9(0x64e)](/back/i)){if(_0x5b85f9(0x56d)!==_0x5b85f9(0x56d)){if(this['isDead']())return;this['_immortal']=!![],this[_0x5b85f9(0x51e)]=![];}else _0x112de0=_0x2017a0>=_0x122356?_0x11f572:_0x5a3f86;}}}if(_0x27e150['match'](/head/i)){if(_0x5b85f9(0x549)===_0x5b85f9(0x567)){const _0x385066=_0x49b948[_0x5b85f9(0x78d)];_0xa9dada[_0x5b85f9(0x758)][_0x385066]=new _0x116729(_0x2f7706);}else _0x4ed0c2=_0x486726;}else{if(_0x27e150[_0x5b85f9(0x64e)](/center/i))_0x4ed0c2=(_0x486726+_0x32333a)/0x2;else{if(_0x27e150['match'](/base/i)){if(_0x5b85f9(0xb05)===_0x5b85f9(0x6b0)){const _0x575e1b=this[_0x5b85f9(0x529)]();return _0x575e1b[_0x353043[_0x5b85f9(0xa4d)](_0x575e1b['length'])];}else _0x4ed0c2=_0x32333a;}}}_0x58b0a3[_0x5b85f9(0x3f1)](_0x112de0,_0x4ed0c2,_0x6bb482,_0x31ed8b,_0x426553,_0x50329d),this[_0x5b85f9(0x72b)]();},Window_BattleLog[_0x3df63e(0x655)][_0x3df63e(0x74c)]=function(_0x502464,_0x58cfef,_0x1eed2c){const _0x59ba1f=_0x3df63e;for(const _0x247ad7 of _0x502464){if(_0x59ba1f(0x7b0)!==_0x59ba1f(0x325)){if(!_0x247ad7)continue;_0x247ad7[_0x59ba1f(0xa71)](_0x58cfef,_0x1eed2c);}else{if(!this[_0x59ba1f(0x957)])return;if(!this[_0x59ba1f(0x889)])return;const _0x8c60e0=_0x52495b[_0x59ba1f(0xa69)]['Settings'][_0x59ba1f(0x9c4)],_0xa575e7=this['_hpGaugeSprite'];_0xa575e7['visible']=this[_0x59ba1f(0x39f)]();const _0x3fbbf6=_0x8c60e0['OffsetX'],_0x23329d=_0x8c60e0['OffsetY'];_0xa575e7['x']=_0x3fbbf6,_0xa575e7['x']+=this['_battler']['battleUIOffsetX'](),_0xa575e7['y']=-this[_0x59ba1f(0xb78)]+_0x23329d,_0xa575e7['y']+=this[_0x59ba1f(0x957)]['battleUIOffsetY']();}}this[_0x59ba1f(0x72b)]();};